/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef rf_TYPES_H
#define rf_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace rubetek { namespace tag { namespace rf {

struct COMMAND {
  enum type {
    START_ADD_DEVICE = 700,
    ADD_RF_DEVICE_RESPONSE = 701,
    CANCEL_OPERATION = 702,
    DELETE_RF_DEVICE = 703,
    ADD_RF_DEVICE_BY_TYPE = 704,
    SYNC_DEVICE = 705,
    GET_SYNC_DEVICE = 706
  };
};

extern const std::map<int, const char*> _COMMAND_VALUES_TO_NAMES;

typedef struct _StartAddDevice__isset {
  _StartAddDevice__isset() : expected_types(false) {}
  bool expected_types;
} _StartAddDevice__isset;

class StartAddDevice {
 public:

  static const char* ascii_fingerprint; // = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};

  StartAddDevice() {
  }

  virtual ~StartAddDevice() throw() {}

  std::vector<std::string>  expected_types;

  _StartAddDevice__isset __isset;

  void __set_expected_types(const std::vector<std::string> & val) {
    expected_types = val;
  }

  bool operator == (const StartAddDevice & rhs) const
  {
    if (!(expected_types == rhs.expected_types))
      return false;
    return true;
  }
  bool operator != (const StartAddDevice &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StartAddDevice & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StartAddDevice &a, StartAddDevice &b);

typedef struct _AddRfDeviceResponse__isset {
  _AddRfDeviceResponse__isset() : rf_id(false), device_type(false), new_device(false) {}
  bool rf_id;
  bool device_type;
  bool new_device;
} _AddRfDeviceResponse__isset;

class AddRfDeviceResponse {
 public:

  static const char* ascii_fingerprint; // = "7F21FB535884165D6350077C7B970E93";
  static const uint8_t binary_fingerprint[16]; // = {0x7F,0x21,0xFB,0x53,0x58,0x84,0x16,0x5D,0x63,0x50,0x07,0x7C,0x7B,0x97,0x0E,0x93};

  AddRfDeviceResponse() : rf_id(), device_type(), new_device(0) {
  }

  virtual ~AddRfDeviceResponse() throw() {}

  std::string rf_id;
  std::string device_type;
  bool new_device;

  _AddRfDeviceResponse__isset __isset;

  void __set_rf_id(const std::string& val) {
    rf_id = val;
  }

  void __set_device_type(const std::string& val) {
    device_type = val;
  }

  void __set_new_device(const bool val) {
    new_device = val;
  }

  bool operator == (const AddRfDeviceResponse & rhs) const
  {
    if (!(rf_id == rhs.rf_id))
      return false;
    if (!(device_type == rhs.device_type))
      return false;
    if (!(new_device == rhs.new_device))
      return false;
    return true;
  }
  bool operator != (const AddRfDeviceResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddRfDeviceResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AddRfDeviceResponse &a, AddRfDeviceResponse &b);

typedef struct _DeleteRfDevice__isset {
  _DeleteRfDevice__isset() : rf_id(false) {}
  bool rf_id;
} _DeleteRfDevice__isset;

class DeleteRfDevice {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  DeleteRfDevice() : rf_id() {
  }

  virtual ~DeleteRfDevice() throw() {}

  std::string rf_id;

  _DeleteRfDevice__isset __isset;

  void __set_rf_id(const std::string& val) {
    rf_id = val;
  }

  bool operator == (const DeleteRfDevice & rhs) const
  {
    if (!(rf_id == rhs.rf_id))
      return false;
    return true;
  }
  bool operator != (const DeleteRfDevice &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteRfDevice & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DeleteRfDevice &a, DeleteRfDevice &b);

typedef struct _AddRfDeviceByType__isset {
  _AddRfDeviceByType__isset() : rf_id(false), device_type(false) {}
  bool rf_id;
  bool device_type;
} _AddRfDeviceByType__isset;

class AddRfDeviceByType {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  AddRfDeviceByType() : rf_id(), device_type() {
  }

  virtual ~AddRfDeviceByType() throw() {}

  std::string rf_id;
  std::string device_type;

  _AddRfDeviceByType__isset __isset;

  void __set_rf_id(const std::string& val) {
    rf_id = val;
  }

  void __set_device_type(const std::string& val) {
    device_type = val;
  }

  bool operator == (const AddRfDeviceByType & rhs) const
  {
    if (!(rf_id == rhs.rf_id))
      return false;
    if (!(device_type == rhs.device_type))
      return false;
    return true;
  }
  bool operator != (const AddRfDeviceByType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddRfDeviceByType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AddRfDeviceByType &a, AddRfDeviceByType &b);

typedef struct _RfDeviceInfo__isset {
  _RfDeviceInfo__isset() : rf_id(false), device_type(false) {}
  bool rf_id;
  bool device_type;
} _RfDeviceInfo__isset;

class RfDeviceInfo {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  RfDeviceInfo() : rf_id(), device_type() {
  }

  virtual ~RfDeviceInfo() throw() {}

  std::string rf_id;
  std::string device_type;

  _RfDeviceInfo__isset __isset;

  void __set_rf_id(const std::string& val) {
    rf_id = val;
  }

  void __set_device_type(const std::string& val) {
    device_type = val;
  }

  bool operator == (const RfDeviceInfo & rhs) const
  {
    if (!(rf_id == rhs.rf_id))
      return false;
    if (!(device_type == rhs.device_type))
      return false;
    return true;
  }
  bool operator != (const RfDeviceInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RfDeviceInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RfDeviceInfo &a, RfDeviceInfo &b);

typedef struct _SyncDevice__isset {
  _SyncDevice__isset() : devices(false) {}
  bool devices;
} _SyncDevice__isset;

class SyncDevice {
 public:

  static const char* ascii_fingerprint; // = "006EFB9C0A4E436459CDFDF617590BB4";
  static const uint8_t binary_fingerprint[16]; // = {0x00,0x6E,0xFB,0x9C,0x0A,0x4E,0x43,0x64,0x59,0xCD,0xFD,0xF6,0x17,0x59,0x0B,0xB4};

  SyncDevice() {
  }

  virtual ~SyncDevice() throw() {}

  std::vector<RfDeviceInfo>  devices;

  _SyncDevice__isset __isset;

  void __set_devices(const std::vector<RfDeviceInfo> & val) {
    devices = val;
  }

  bool operator == (const SyncDevice & rhs) const
  {
    if (!(devices == rhs.devices))
      return false;
    return true;
  }
  bool operator != (const SyncDevice &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncDevice & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SyncDevice &a, SyncDevice &b);

}}} // namespace

#endif
