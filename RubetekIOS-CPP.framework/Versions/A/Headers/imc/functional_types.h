/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef functional_TYPES_H
#define functional_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace rubetek { namespace tag { namespace functional {

struct COMMAND {
  enum type {
    CHANGE_PIN = 300,
    CHANGE_PIN_RESPONSE = 301,
    LIST_CLIENTS = 302,
    LIST_CLIENTS_RESPONSE = 303,
    REMOVE_CLIENT = 304,
    REMOVE_CLIENT_RESPONSE = 305,
    LIST_WIFI_NETWORK = 306,
    LIST_WIFI_NETWORK_RESPONSE = 307,
    GET_WIFI_STATUS = 308,
    GET_WIFI_STATUS_RESPONSE = 309,
    CONNECT_TO_WIFI_NETWORK = 310,
    CONNECT_TO_WIFI_NETWORK_RESPONSE = 311,
    SWITCH_TO_APP_MODE = 312,
    SWITCH_TO_APP_MODE_REPONSE = 313,
    GET_TIME_ZONE = 314,
    GET_TIME_ZONE_RESPONSE = 315,
    SET_TIME_ZONE = 316,
    SET_TIME_ZONE_RESPONSE = 317,
    GET_CC_VERSION = 318,
    GET_CC_VERSION_RESPONSE = 319,
    CHECK_FIRMWARE_UPDATE = 320,
    CHECK_FIRMWARE_UPDATE_RESPONSE = 321,
    START_FIRMWARE_UPDATE = 322,
    FIRMWARE_UPDATE_COMPLETE = 323,
    SET_NOTIFICATION_ID = 324,
    SET_NOTIFICATION_ID_RESPONSE = 325,
    GET_CC_LOGS = 326,
    GET_CC_LOGS_RESPONSE = 327,
    GET_NTP_SERVER = 328,
    GET_NTP_SERVER_RESPONSE = 329,
    SET_NTP_SERVER = 330,
    SET_NTP_SERVER_RESPONSE = 331,
    RESET_NTP_SERVER = 332,
    RESET_NTP_SERVER_RESPONSE = 333,
    GET_IP_ADDRESS = 334,
    GET_IP_ADDRESS_RESPONSE = 335,
    SET_IP_ADDRESS = 336,
    SET_IP_ADDRESS_RESPONSE = 337,
    RESET_IP_ADDRESS = 338,
    RESET_IP_ADDRESS_RESPONSE = 339,
    GET_FIRMWARE_UPDATE = 340,
    GET_FIRMWARE_UPDATE_RESPONSE = 341,
    SET_FIRMWARE_UPDATE = 342,
    SET_FIRMWARE_UPDATE_RESPONSE = 343,
    RESET_FIRMWARE_UPDATE = 344,
    RESET_FIRMWARE_UPDATE_RESPONSE = 345,
    GET_FIRMWARE_UPDATE_STATUS = 346,
    GET_FIRMWARE_UPDATE_STATUS_RESPONSE = 347,
    ENABLE_WIFI = 348,
    ENABLE_WIFI_RESPONSE = 349,
    CHANGE_AP_SETTING = 350,
    CHANGE_AP_SETTING_RESPONSE = 351,
    REBOOT_CC = 352,
    REBOOT_CC_RESPONSE = 353
  };
};

extern const std::map<int, const char*> _COMMAND_VALUES_TO_NAMES;

struct WifiStatus {
  enum type {
    unknown = 0,
    client = 1,
    access_point = 2,
    adhoc = 3,
    disabled = 4
  };
};

extern const std::map<int, const char*> _WifiStatus_VALUES_TO_NAMES;

struct WifiEncryptionType {
  enum type {
    wep = 0,
    wpa = 1,
    wpa2 = 2,
    open = 3,
    none = 4
  };
};

extern const std::map<int, const char*> _WifiEncryptionType_VALUES_TO_NAMES;

struct UpdateMode {
  enum type {
    umCheckUpdate = 0,
    umDownloadOnly = 1,
    umInstallDownloaded = 2,
    umDownloadAndInstall = 3
  };
};

extern const std::map<int, const char*> _UpdateMode_VALUES_TO_NAMES;

typedef struct _ChangePin__isset {
  _ChangePin__isset() : old_pin(false), new_pin(false) {}
  bool old_pin;
  bool new_pin;
} _ChangePin__isset;

class ChangePin {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  ChangePin() : old_pin(), new_pin() {
  }

  virtual ~ChangePin() throw() {}

  std::string old_pin;
  std::string new_pin;

  _ChangePin__isset __isset;

  void __set_old_pin(const std::string& val) {
    old_pin = val;
  }

  void __set_new_pin(const std::string& val) {
    new_pin = val;
  }

  bool operator == (const ChangePin & rhs) const
  {
    if (!(old_pin == rhs.old_pin))
      return false;
    if (!(new_pin == rhs.new_pin))
      return false;
    return true;
  }
  bool operator != (const ChangePin &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChangePin & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ChangePin &a, ChangePin &b);

typedef struct _ChangePinResponse__isset {
  _ChangePinResponse__isset() : status(false), error(false) {}
  bool status;
  bool error;
} _ChangePinResponse__isset;

class ChangePinResponse {
 public:

  static const char* ascii_fingerprint; // = "1767FFB0CB3D9275BC64B198AB3B8A8B";
  static const uint8_t binary_fingerprint[16]; // = {0x17,0x67,0xFF,0xB0,0xCB,0x3D,0x92,0x75,0xBC,0x64,0xB1,0x98,0xAB,0x3B,0x8A,0x8B};

  ChangePinResponse() : status(0), error() {
  }

  virtual ~ChangePinResponse() throw() {}

  bool status;
  std::string error;

  _ChangePinResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_error(const std::string& val) {
    error = val;
  }

  bool operator == (const ChangePinResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const ChangePinResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChangePinResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ChangePinResponse &a, ChangePinResponse &b);

typedef struct _Client__isset {
  _Client__isset() : client_id(false), device_name(false), operation_system(false), language(false), notification_id(false), time_auth(false), time_last_login(false), connection_type(false), ip_address(false), app_version(false), online(false) {}
  bool client_id;
  bool device_name;
  bool operation_system;
  bool language;
  bool notification_id;
  bool time_auth;
  bool time_last_login;
  bool connection_type;
  bool ip_address;
  bool app_version;
  bool online;
} _Client__isset;

class Client {
 public:

  static const char* ascii_fingerprint; // = "625FD828FF08A0ABF13F4984D156E5D2";
  static const uint8_t binary_fingerprint[16]; // = {0x62,0x5F,0xD8,0x28,0xFF,0x08,0xA0,0xAB,0xF1,0x3F,0x49,0x84,0xD1,0x56,0xE5,0xD2};

  Client() : client_id(), device_name(), operation_system(), language(), notification_id(), time_auth(), time_last_login(), connection_type(), ip_address(), app_version(), online(0) {
  }

  virtual ~Client() throw() {}

  std::string client_id;
  std::string device_name;
  std::string operation_system;
  std::string language;
  std::string notification_id;
  std::string time_auth;
  std::string time_last_login;
  std::string connection_type;
  std::string ip_address;
  std::string app_version;
  bool online;

  _Client__isset __isset;

  void __set_client_id(const std::string& val) {
    client_id = val;
  }

  void __set_device_name(const std::string& val) {
    device_name = val;
  }

  void __set_operation_system(const std::string& val) {
    operation_system = val;
  }

  void __set_language(const std::string& val) {
    language = val;
  }

  void __set_notification_id(const std::string& val) {
    notification_id = val;
  }

  void __set_time_auth(const std::string& val) {
    time_auth = val;
  }

  void __set_time_last_login(const std::string& val) {
    time_last_login = val;
  }

  void __set_connection_type(const std::string& val) {
    connection_type = val;
  }

  void __set_ip_address(const std::string& val) {
    ip_address = val;
  }

  void __set_app_version(const std::string& val) {
    app_version = val;
  }

  void __set_online(const bool val) {
    online = val;
  }

  bool operator == (const Client & rhs) const
  {
    if (!(client_id == rhs.client_id))
      return false;
    if (!(device_name == rhs.device_name))
      return false;
    if (!(operation_system == rhs.operation_system))
      return false;
    if (!(language == rhs.language))
      return false;
    if (!(notification_id == rhs.notification_id))
      return false;
    if (!(time_auth == rhs.time_auth))
      return false;
    if (!(time_last_login == rhs.time_last_login))
      return false;
    if (!(connection_type == rhs.connection_type))
      return false;
    if (!(ip_address == rhs.ip_address))
      return false;
    if (!(app_version == rhs.app_version))
      return false;
    if (!(online == rhs.online))
      return false;
    return true;
  }
  bool operator != (const Client &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Client & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Client &a, Client &b);

typedef struct _ListClientsResponse__isset {
  _ListClientsResponse__isset() : status(false), error(false), clients(false) {}
  bool status;
  bool error;
  bool clients;
} _ListClientsResponse__isset;

class ListClientsResponse {
 public:

  static const char* ascii_fingerprint; // = "05CB0660791352989299214F1B9BA1B4";
  static const uint8_t binary_fingerprint[16]; // = {0x05,0xCB,0x06,0x60,0x79,0x13,0x52,0x98,0x92,0x99,0x21,0x4F,0x1B,0x9B,0xA1,0xB4};

  ListClientsResponse() : status(0), error() {
  }

  virtual ~ListClientsResponse() throw() {}

  bool status;
  std::string error;
  std::vector<Client>  clients;

  _ListClientsResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_error(const std::string& val) {
    error = val;
  }

  void __set_clients(const std::vector<Client> & val) {
    clients = val;
  }

  bool operator == (const ListClientsResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(error == rhs.error))
      return false;
    if (!(clients == rhs.clients))
      return false;
    return true;
  }
  bool operator != (const ListClientsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ListClientsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ListClientsResponse &a, ListClientsResponse &b);

typedef struct _RemoveClient__isset {
  _RemoveClient__isset() : client_id(false) {}
  bool client_id;
} _RemoveClient__isset;

class RemoveClient {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  RemoveClient() : client_id() {
  }

  virtual ~RemoveClient() throw() {}

  std::string client_id;

  _RemoveClient__isset __isset;

  void __set_client_id(const std::string& val) {
    client_id = val;
  }

  bool operator == (const RemoveClient & rhs) const
  {
    if (!(client_id == rhs.client_id))
      return false;
    return true;
  }
  bool operator != (const RemoveClient &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoveClient & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RemoveClient &a, RemoveClient &b);

typedef struct _RemoveClientResponse__isset {
  _RemoveClientResponse__isset() : status(false), error(false) {}
  bool status;
  bool error;
} _RemoveClientResponse__isset;

class RemoveClientResponse {
 public:

  static const char* ascii_fingerprint; // = "1767FFB0CB3D9275BC64B198AB3B8A8B";
  static const uint8_t binary_fingerprint[16]; // = {0x17,0x67,0xFF,0xB0,0xCB,0x3D,0x92,0x75,0xBC,0x64,0xB1,0x98,0xAB,0x3B,0x8A,0x8B};

  RemoveClientResponse() : status(0), error() {
  }

  virtual ~RemoveClientResponse() throw() {}

  bool status;
  std::string error;

  _RemoveClientResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_error(const std::string& val) {
    error = val;
  }

  bool operator == (const RemoveClientResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const RemoveClientResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoveClientResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RemoveClientResponse &a, RemoveClientResponse &b);

typedef struct _WifiNetwork__isset {
  _WifiNetwork__isset() : ssid(false), protocol(false), mode(false), channel(false), encryption(false), bitrate(false), support_wep(false), support_wpa(false), support_wpa2(false) {}
  bool ssid;
  bool protocol;
  bool mode;
  bool channel;
  bool encryption;
  bool bitrate;
  bool support_wep;
  bool support_wpa;
  bool support_wpa2;
} _WifiNetwork__isset;

class WifiNetwork {
 public:

  static const char* ascii_fingerprint; // = "BB2E40C02A206A899C04558E99E200E9";
  static const uint8_t binary_fingerprint[16]; // = {0xBB,0x2E,0x40,0xC0,0x2A,0x20,0x6A,0x89,0x9C,0x04,0x55,0x8E,0x99,0xE2,0x00,0xE9};

  WifiNetwork() : ssid(), protocol(), mode(), channel(), encryption(), bitrate(), support_wep(0), support_wpa(0), support_wpa2(0) {
  }

  virtual ~WifiNetwork() throw() {}

  std::string ssid;
  std::string protocol;
  std::string mode;
  std::string channel;
  std::string encryption;
  std::string bitrate;
  bool support_wep;
  bool support_wpa;
  bool support_wpa2;

  _WifiNetwork__isset __isset;

  void __set_ssid(const std::string& val) {
    ssid = val;
  }

  void __set_protocol(const std::string& val) {
    protocol = val;
  }

  void __set_mode(const std::string& val) {
    mode = val;
  }

  void __set_channel(const std::string& val) {
    channel = val;
  }

  void __set_encryption(const std::string& val) {
    encryption = val;
  }

  void __set_bitrate(const std::string& val) {
    bitrate = val;
  }

  void __set_support_wep(const bool val) {
    support_wep = val;
  }

  void __set_support_wpa(const bool val) {
    support_wpa = val;
  }

  void __set_support_wpa2(const bool val) {
    support_wpa2 = val;
  }

  bool operator == (const WifiNetwork & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(protocol == rhs.protocol))
      return false;
    if (!(mode == rhs.mode))
      return false;
    if (!(channel == rhs.channel))
      return false;
    if (!(encryption == rhs.encryption))
      return false;
    if (!(bitrate == rhs.bitrate))
      return false;
    if (!(support_wep == rhs.support_wep))
      return false;
    if (!(support_wpa == rhs.support_wpa))
      return false;
    if (!(support_wpa2 == rhs.support_wpa2))
      return false;
    return true;
  }
  bool operator != (const WifiNetwork &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WifiNetwork & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(WifiNetwork &a, WifiNetwork &b);

typedef struct _ListWifiNetworkResponse__isset {
  _ListWifiNetworkResponse__isset() : status(false), error(false), networks(false) {}
  bool status;
  bool error;
  bool networks;
} _ListWifiNetworkResponse__isset;

class ListWifiNetworkResponse {
 public:

  static const char* ascii_fingerprint; // = "654F4ADE9B773BFDAA645F20729A156E";
  static const uint8_t binary_fingerprint[16]; // = {0x65,0x4F,0x4A,0xDE,0x9B,0x77,0x3B,0xFD,0xAA,0x64,0x5F,0x20,0x72,0x9A,0x15,0x6E};

  ListWifiNetworkResponse() : status(0), error() {
  }

  virtual ~ListWifiNetworkResponse() throw() {}

  bool status;
  std::string error;
  std::vector<WifiNetwork>  networks;

  _ListWifiNetworkResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_error(const std::string& val) {
    error = val;
  }

  void __set_networks(const std::vector<WifiNetwork> & val) {
    networks = val;
  }

  bool operator == (const ListWifiNetworkResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(error == rhs.error))
      return false;
    if (!(networks == rhs.networks))
      return false;
    return true;
  }
  bool operator != (const ListWifiNetworkResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ListWifiNetworkResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ListWifiNetworkResponse &a, ListWifiNetworkResponse &b);

typedef struct _WifiStatusResponse__isset {
  _WifiStatusResponse__isset() : status(false), ssid(false) {}
  bool status;
  bool ssid;
} _WifiStatusResponse__isset;

class WifiStatusResponse {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  WifiStatusResponse() : status((WifiStatus::type)0), ssid() {
  }

  virtual ~WifiStatusResponse() throw() {}

  WifiStatus::type status;
  std::string ssid;

  _WifiStatusResponse__isset __isset;

  void __set_status(const WifiStatus::type val) {
    status = val;
  }

  void __set_ssid(const std::string& val) {
    ssid = val;
  }

  bool operator == (const WifiStatusResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const WifiStatusResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WifiStatusResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(WifiStatusResponse &a, WifiStatusResponse &b);

typedef struct _ConnectToWifiNetwork__isset {
  _ConnectToWifiNetwork__isset() : ssid(false), encryption(false), password(false) {}
  bool ssid;
  bool encryption;
  bool password;
} _ConnectToWifiNetwork__isset;

class ConnectToWifiNetwork {
 public:

  static const char* ascii_fingerprint; // = "D9F4CFE2F293A8B1052FD3031DD2C847";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xF4,0xCF,0xE2,0xF2,0x93,0xA8,0xB1,0x05,0x2F,0xD3,0x03,0x1D,0xD2,0xC8,0x47};

  ConnectToWifiNetwork() : ssid(), encryption((WifiEncryptionType::type)0), password() {
  }

  virtual ~ConnectToWifiNetwork() throw() {}

  std::string ssid;
  WifiEncryptionType::type encryption;
  std::string password;

  _ConnectToWifiNetwork__isset __isset;

  void __set_ssid(const std::string& val) {
    ssid = val;
  }

  void __set_encryption(const WifiEncryptionType::type val) {
    encryption = val;
  }

  void __set_password(const std::string& val) {
    password = val;
  }

  bool operator == (const ConnectToWifiNetwork & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(encryption == rhs.encryption))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const ConnectToWifiNetwork &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConnectToWifiNetwork & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ConnectToWifiNetwork &a, ConnectToWifiNetwork &b);

typedef struct _ConnectToWifiNetworkResponse__isset {
  _ConnectToWifiNetworkResponse__isset() : status(false), error(false) {}
  bool status;
  bool error;
} _ConnectToWifiNetworkResponse__isset;

class ConnectToWifiNetworkResponse {
 public:

  static const char* ascii_fingerprint; // = "1767FFB0CB3D9275BC64B198AB3B8A8B";
  static const uint8_t binary_fingerprint[16]; // = {0x17,0x67,0xFF,0xB0,0xCB,0x3D,0x92,0x75,0xBC,0x64,0xB1,0x98,0xAB,0x3B,0x8A,0x8B};

  ConnectToWifiNetworkResponse() : status(0), error() {
  }

  virtual ~ConnectToWifiNetworkResponse() throw() {}

  bool status;
  std::string error;

  _ConnectToWifiNetworkResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_error(const std::string& val) {
    error = val;
  }

  bool operator == (const ConnectToWifiNetworkResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const ConnectToWifiNetworkResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConnectToWifiNetworkResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ConnectToWifiNetworkResponse &a, ConnectToWifiNetworkResponse &b);

typedef struct _SwitchToApModeResponse__isset {
  _SwitchToApModeResponse__isset() : status(false) {}
  bool status;
} _SwitchToApModeResponse__isset;

class SwitchToApModeResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  SwitchToApModeResponse() : status(0) {
  }

  virtual ~SwitchToApModeResponse() throw() {}

  bool status;

  _SwitchToApModeResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  bool operator == (const SwitchToApModeResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const SwitchToApModeResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SwitchToApModeResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SwitchToApModeResponse &a, SwitchToApModeResponse &b);

typedef struct _GetTimezoneResponse__isset {
  _GetTimezoneResponse__isset() : status(false), timezone(false) {}
  bool status;
  bool timezone;
} _GetTimezoneResponse__isset;

class GetTimezoneResponse {
 public:

  static const char* ascii_fingerprint; // = "1767FFB0CB3D9275BC64B198AB3B8A8B";
  static const uint8_t binary_fingerprint[16]; // = {0x17,0x67,0xFF,0xB0,0xCB,0x3D,0x92,0x75,0xBC,0x64,0xB1,0x98,0xAB,0x3B,0x8A,0x8B};

  GetTimezoneResponse() : status(0), timezone() {
  }

  virtual ~GetTimezoneResponse() throw() {}

  bool status;
  std::string timezone;

  _GetTimezoneResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_timezone(const std::string& val) {
    timezone = val;
  }

  bool operator == (const GetTimezoneResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(timezone == rhs.timezone))
      return false;
    return true;
  }
  bool operator != (const GetTimezoneResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetTimezoneResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetTimezoneResponse &a, GetTimezoneResponse &b);

typedef struct _SetTimezone__isset {
  _SetTimezone__isset() : timezone(false) {}
  bool timezone;
} _SetTimezone__isset;

class SetTimezone {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  SetTimezone() : timezone() {
  }

  virtual ~SetTimezone() throw() {}

  std::string timezone;

  _SetTimezone__isset __isset;

  void __set_timezone(const std::string& val) {
    timezone = val;
  }

  bool operator == (const SetTimezone & rhs) const
  {
    if (!(timezone == rhs.timezone))
      return false;
    return true;
  }
  bool operator != (const SetTimezone &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetTimezone & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetTimezone &a, SetTimezone &b);

typedef struct _SetTimezoneResponse__isset {
  _SetTimezoneResponse__isset() : status(false) {}
  bool status;
} _SetTimezoneResponse__isset;

class SetTimezoneResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  SetTimezoneResponse() : status(0) {
  }

  virtual ~SetTimezoneResponse() throw() {}

  bool status;

  _SetTimezoneResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  bool operator == (const SetTimezoneResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const SetTimezoneResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetTimezoneResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetTimezoneResponse &a, SetTimezoneResponse &b);

typedef struct _GetNtpServerResponse__isset {
  _GetNtpServerResponse__isset() : status(false), ntp_server(false) {}
  bool status;
  bool ntp_server;
} _GetNtpServerResponse__isset;

class GetNtpServerResponse {
 public:

  static const char* ascii_fingerprint; // = "1767FFB0CB3D9275BC64B198AB3B8A8B";
  static const uint8_t binary_fingerprint[16]; // = {0x17,0x67,0xFF,0xB0,0xCB,0x3D,0x92,0x75,0xBC,0x64,0xB1,0x98,0xAB,0x3B,0x8A,0x8B};

  GetNtpServerResponse() : status(0), ntp_server() {
  }

  virtual ~GetNtpServerResponse() throw() {}

  bool status;
  std::string ntp_server;

  _GetNtpServerResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_ntp_server(const std::string& val) {
    ntp_server = val;
  }

  bool operator == (const GetNtpServerResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(ntp_server == rhs.ntp_server))
      return false;
    return true;
  }
  bool operator != (const GetNtpServerResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetNtpServerResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetNtpServerResponse &a, GetNtpServerResponse &b);

typedef struct _SetNtpServer__isset {
  _SetNtpServer__isset() : ntp_server(false) {}
  bool ntp_server;
} _SetNtpServer__isset;

class SetNtpServer {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  SetNtpServer() : ntp_server() {
  }

  virtual ~SetNtpServer() throw() {}

  std::string ntp_server;

  _SetNtpServer__isset __isset;

  void __set_ntp_server(const std::string& val) {
    ntp_server = val;
  }

  bool operator == (const SetNtpServer & rhs) const
  {
    if (!(ntp_server == rhs.ntp_server))
      return false;
    return true;
  }
  bool operator != (const SetNtpServer &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetNtpServer & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetNtpServer &a, SetNtpServer &b);

typedef struct _SetNtpServerResponse__isset {
  _SetNtpServerResponse__isset() : status(false) {}
  bool status;
} _SetNtpServerResponse__isset;

class SetNtpServerResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  SetNtpServerResponse() : status(0) {
  }

  virtual ~SetNtpServerResponse() throw() {}

  bool status;

  _SetNtpServerResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  bool operator == (const SetNtpServerResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const SetNtpServerResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetNtpServerResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetNtpServerResponse &a, SetNtpServerResponse &b);

typedef struct _ResetNtpServerResponse__isset {
  _ResetNtpServerResponse__isset() : status(false) {}
  bool status;
} _ResetNtpServerResponse__isset;

class ResetNtpServerResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  ResetNtpServerResponse() : status(0) {
  }

  virtual ~ResetNtpServerResponse() throw() {}

  bool status;

  _ResetNtpServerResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  bool operator == (const ResetNtpServerResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const ResetNtpServerResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResetNtpServerResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ResetNtpServerResponse &a, ResetNtpServerResponse &b);

typedef struct _GetIpAddressResponse__isset {
  _GetIpAddressResponse__isset() : status(false), ip_address(false), netmask(false), broadcast(false), gateway(false), dns_primary(false), dns_secondary(false) {}
  bool status;
  bool ip_address;
  bool netmask;
  bool broadcast;
  bool gateway;
  bool dns_primary;
  bool dns_secondary;
} _GetIpAddressResponse__isset;

class GetIpAddressResponse {
 public:

  static const char* ascii_fingerprint; // = "74AEFB141CDB9CBC8293E46A2E8DE268";
  static const uint8_t binary_fingerprint[16]; // = {0x74,0xAE,0xFB,0x14,0x1C,0xDB,0x9C,0xBC,0x82,0x93,0xE4,0x6A,0x2E,0x8D,0xE2,0x68};

  GetIpAddressResponse() : status(0), ip_address(), netmask(), broadcast(), gateway(), dns_primary(), dns_secondary() {
  }

  virtual ~GetIpAddressResponse() throw() {}

  bool status;
  std::string ip_address;
  std::string netmask;
  std::string broadcast;
  std::string gateway;
  std::string dns_primary;
  std::string dns_secondary;

  _GetIpAddressResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_ip_address(const std::string& val) {
    ip_address = val;
  }

  void __set_netmask(const std::string& val) {
    netmask = val;
  }

  void __set_broadcast(const std::string& val) {
    broadcast = val;
  }

  void __set_gateway(const std::string& val) {
    gateway = val;
  }

  void __set_dns_primary(const std::string& val) {
    dns_primary = val;
  }

  void __set_dns_secondary(const std::string& val) {
    dns_secondary = val;
  }

  bool operator == (const GetIpAddressResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(ip_address == rhs.ip_address))
      return false;
    if (!(netmask == rhs.netmask))
      return false;
    if (!(broadcast == rhs.broadcast))
      return false;
    if (!(gateway == rhs.gateway))
      return false;
    if (!(dns_primary == rhs.dns_primary))
      return false;
    if (!(dns_secondary == rhs.dns_secondary))
      return false;
    return true;
  }
  bool operator != (const GetIpAddressResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetIpAddressResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetIpAddressResponse &a, GetIpAddressResponse &b);

typedef struct _SetIpAddress__isset {
  _SetIpAddress__isset() : ip_address(false), netmask(false), broadcast(false), gateway(false), dns_primary(false), dns_secondary(false) {}
  bool ip_address;
  bool netmask;
  bool broadcast;
  bool gateway;
  bool dns_primary;
  bool dns_secondary;
} _SetIpAddress__isset;

class SetIpAddress {
 public:

  static const char* ascii_fingerprint; // = "873CB9E5A4C10A7ECE7476FD192F55EE";
  static const uint8_t binary_fingerprint[16]; // = {0x87,0x3C,0xB9,0xE5,0xA4,0xC1,0x0A,0x7E,0xCE,0x74,0x76,0xFD,0x19,0x2F,0x55,0xEE};

  SetIpAddress() : ip_address(), netmask(), broadcast(), gateway(), dns_primary(), dns_secondary() {
  }

  virtual ~SetIpAddress() throw() {}

  std::string ip_address;
  std::string netmask;
  std::string broadcast;
  std::string gateway;
  std::string dns_primary;
  std::string dns_secondary;

  _SetIpAddress__isset __isset;

  void __set_ip_address(const std::string& val) {
    ip_address = val;
  }

  void __set_netmask(const std::string& val) {
    netmask = val;
  }

  void __set_broadcast(const std::string& val) {
    broadcast = val;
  }

  void __set_gateway(const std::string& val) {
    gateway = val;
  }

  void __set_dns_primary(const std::string& val) {
    dns_primary = val;
  }

  void __set_dns_secondary(const std::string& val) {
    dns_secondary = val;
  }

  bool operator == (const SetIpAddress & rhs) const
  {
    if (!(ip_address == rhs.ip_address))
      return false;
    if (!(netmask == rhs.netmask))
      return false;
    if (!(broadcast == rhs.broadcast))
      return false;
    if (!(gateway == rhs.gateway))
      return false;
    if (!(dns_primary == rhs.dns_primary))
      return false;
    if (!(dns_secondary == rhs.dns_secondary))
      return false;
    return true;
  }
  bool operator != (const SetIpAddress &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetIpAddress & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetIpAddress &a, SetIpAddress &b);

typedef struct _SetIpAddressResponse__isset {
  _SetIpAddressResponse__isset() : status(false) {}
  bool status;
} _SetIpAddressResponse__isset;

class SetIpAddressResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  SetIpAddressResponse() : status(0) {
  }

  virtual ~SetIpAddressResponse() throw() {}

  bool status;

  _SetIpAddressResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  bool operator == (const SetIpAddressResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const SetIpAddressResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetIpAddressResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetIpAddressResponse &a, SetIpAddressResponse &b);

typedef struct _ResetIpAddressResponse__isset {
  _ResetIpAddressResponse__isset() : status(false) {}
  bool status;
} _ResetIpAddressResponse__isset;

class ResetIpAddressResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  ResetIpAddressResponse() : status(0) {
  }

  virtual ~ResetIpAddressResponse() throw() {}

  bool status;

  _ResetIpAddressResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  bool operator == (const ResetIpAddressResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const ResetIpAddressResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResetIpAddressResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ResetIpAddressResponse &a, ResetIpAddressResponse &b);

typedef struct _CcVersion__isset {
  _CcVersion__isset() : version(false) {}
  bool version;
} _CcVersion__isset;

class CcVersion {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  CcVersion() : version() {
  }

  virtual ~CcVersion() throw() {}

  std::string version;

  _CcVersion__isset __isset;

  void __set_version(const std::string& val) {
    version = val;
  }

  bool operator == (const CcVersion & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const CcVersion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CcVersion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CcVersion &a, CcVersion &b);

typedef struct _CheckFirmwareUpdateResponse__isset {
  _CheckFirmwareUpdateResponse__isset() : need_update(false) {}
  bool need_update;
} _CheckFirmwareUpdateResponse__isset;

class CheckFirmwareUpdateResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  CheckFirmwareUpdateResponse() : need_update(0) {
  }

  virtual ~CheckFirmwareUpdateResponse() throw() {}

  bool need_update;

  _CheckFirmwareUpdateResponse__isset __isset;

  void __set_need_update(const bool val) {
    need_update = val;
  }

  bool operator == (const CheckFirmwareUpdateResponse & rhs) const
  {
    if (!(need_update == rhs.need_update))
      return false;
    return true;
  }
  bool operator != (const CheckFirmwareUpdateResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CheckFirmwareUpdateResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CheckFirmwareUpdateResponse &a, CheckFirmwareUpdateResponse &b);

typedef struct _PacketInfo__isset {
  _PacketInfo__isset() : name(false), version_installed(false), version_available(false), description(false) {}
  bool name;
  bool version_installed;
  bool version_available;
  bool description;
} _PacketInfo__isset;

class PacketInfo {
 public:

  static const char* ascii_fingerprint; // = "2748901DF3E03B56075825ABF0FCFD25";
  static const uint8_t binary_fingerprint[16]; // = {0x27,0x48,0x90,0x1D,0xF3,0xE0,0x3B,0x56,0x07,0x58,0x25,0xAB,0xF0,0xFC,0xFD,0x25};

  PacketInfo() : name(), version_installed(), version_available(), description() {
  }

  virtual ~PacketInfo() throw() {}

  std::string name;
  std::string version_installed;
  std::string version_available;
  std::string description;

  _PacketInfo__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_version_installed(const std::string& val) {
    version_installed = val;
  }

  void __set_version_available(const std::string& val) {
    version_available = val;
  }

  void __set_description(const std::string& val) {
    description = val;
    __isset.description = true;
  }

  bool operator == (const PacketInfo & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(version_installed == rhs.version_installed))
      return false;
    if (!(version_available == rhs.version_available))
      return false;
    if (__isset.description != rhs.__isset.description)
      return false;
    else if (__isset.description && !(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const PacketInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PacketInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PacketInfo &a, PacketInfo &b);

typedef struct _StartFirmwareUpdate__isset {
  _StartFirmwareUpdate__isset() : mode(false) {}
  bool mode;
} _StartFirmwareUpdate__isset;

class StartFirmwareUpdate {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

  StartFirmwareUpdate() : mode((UpdateMode::type)0) {
  }

  virtual ~StartFirmwareUpdate() throw() {}

  UpdateMode::type mode;

  _StartFirmwareUpdate__isset __isset;

  void __set_mode(const UpdateMode::type val) {
    mode = val;
  }

  bool operator == (const StartFirmwareUpdate & rhs) const
  {
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const StartFirmwareUpdate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StartFirmwareUpdate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StartFirmwareUpdate &a, StartFirmwareUpdate &b);

typedef struct _FirmwareUpdateComplete__isset {
  _FirmwareUpdateComplete__isset() : status(false), mode(false), packets(false) {}
  bool status;
  bool mode;
  bool packets;
} _FirmwareUpdateComplete__isset;

class FirmwareUpdateComplete {
 public:

  static const char* ascii_fingerprint; // = "558E70D6022C7A9AF0895FF2ED28E51D";
  static const uint8_t binary_fingerprint[16]; // = {0x55,0x8E,0x70,0xD6,0x02,0x2C,0x7A,0x9A,0xF0,0x89,0x5F,0xF2,0xED,0x28,0xE5,0x1D};

  FirmwareUpdateComplete() : status(0), mode((UpdateMode::type)0) {
  }

  virtual ~FirmwareUpdateComplete() throw() {}

  bool status;
  UpdateMode::type mode;
  std::vector<PacketInfo>  packets;

  _FirmwareUpdateComplete__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_mode(const UpdateMode::type val) {
    mode = val;
    __isset.mode = true;
  }

  void __set_packets(const std::vector<PacketInfo> & val) {
    packets = val;
    __isset.packets = true;
  }

  bool operator == (const FirmwareUpdateComplete & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (__isset.mode != rhs.__isset.mode)
      return false;
    else if (__isset.mode && !(mode == rhs.mode))
      return false;
    if (__isset.packets != rhs.__isset.packets)
      return false;
    else if (__isset.packets && !(packets == rhs.packets))
      return false;
    return true;
  }
  bool operator != (const FirmwareUpdateComplete &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FirmwareUpdateComplete & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FirmwareUpdateComplete &a, FirmwareUpdateComplete &b);

typedef struct _GetFirmwareUpdateStatusResponse__isset {
  _GetFirmwareUpdateStatusResponse__isset() : is_updating_processing(false) {}
  bool is_updating_processing;
} _GetFirmwareUpdateStatusResponse__isset;

class GetFirmwareUpdateStatusResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  GetFirmwareUpdateStatusResponse() : is_updating_processing(0) {
  }

  virtual ~GetFirmwareUpdateStatusResponse() throw() {}

  bool is_updating_processing;

  _GetFirmwareUpdateStatusResponse__isset __isset;

  void __set_is_updating_processing(const bool val) {
    is_updating_processing = val;
  }

  bool operator == (const GetFirmwareUpdateStatusResponse & rhs) const
  {
    if (!(is_updating_processing == rhs.is_updating_processing))
      return false;
    return true;
  }
  bool operator != (const GetFirmwareUpdateStatusResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetFirmwareUpdateStatusResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetFirmwareUpdateStatusResponse &a, GetFirmwareUpdateStatusResponse &b);

typedef struct _SetNotificationId__isset {
  _SetNotificationId__isset() : client_id(false), notification_id(false) {}
  bool client_id;
  bool notification_id;
} _SetNotificationId__isset;

class SetNotificationId {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  SetNotificationId() : client_id(), notification_id() {
  }

  virtual ~SetNotificationId() throw() {}

  std::string client_id;
  std::string notification_id;

  _SetNotificationId__isset __isset;

  void __set_client_id(const std::string& val) {
    client_id = val;
  }

  void __set_notification_id(const std::string& val) {
    notification_id = val;
  }

  bool operator == (const SetNotificationId & rhs) const
  {
    if (!(client_id == rhs.client_id))
      return false;
    if (!(notification_id == rhs.notification_id))
      return false;
    return true;
  }
  bool operator != (const SetNotificationId &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetNotificationId & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetNotificationId &a, SetNotificationId &b);

typedef struct _SetNotificationIdResponse__isset {
  _SetNotificationIdResponse__isset() : status(false), error(false) {}
  bool status;
  bool error;
} _SetNotificationIdResponse__isset;

class SetNotificationIdResponse {
 public:

  static const char* ascii_fingerprint; // = "1767FFB0CB3D9275BC64B198AB3B8A8B";
  static const uint8_t binary_fingerprint[16]; // = {0x17,0x67,0xFF,0xB0,0xCB,0x3D,0x92,0x75,0xBC,0x64,0xB1,0x98,0xAB,0x3B,0x8A,0x8B};

  SetNotificationIdResponse() : status(0), error() {
  }

  virtual ~SetNotificationIdResponse() throw() {}

  bool status;
  std::string error;

  _SetNotificationIdResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_error(const std::string& val) {
    error = val;
  }

  bool operator == (const SetNotificationIdResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SetNotificationIdResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetNotificationIdResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetNotificationIdResponse &a, SetNotificationIdResponse &b);

typedef struct _GetCCLogs__isset {
  _GetCCLogs__isset() : filter(false) {}
  bool filter;
} _GetCCLogs__isset;

class GetCCLogs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  GetCCLogs() : filter() {
  }

  virtual ~GetCCLogs() throw() {}

  std::string filter;

  _GetCCLogs__isset __isset;

  void __set_filter(const std::string& val) {
    filter = val;
  }

  bool operator == (const GetCCLogs & rhs) const
  {
    if (!(filter == rhs.filter))
      return false;
    return true;
  }
  bool operator != (const GetCCLogs &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetCCLogs & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetCCLogs &a, GetCCLogs &b);

typedef struct _GetCCLogsResponse__isset {
  _GetCCLogsResponse__isset() : status(false), data(false) {}
  bool status;
  bool data;
} _GetCCLogsResponse__isset;

class GetCCLogsResponse {
 public:

  static const char* ascii_fingerprint; // = "1FE28212835C671E1BD5B23650620465";
  static const uint8_t binary_fingerprint[16]; // = {0x1F,0xE2,0x82,0x12,0x83,0x5C,0x67,0x1E,0x1B,0xD5,0xB2,0x36,0x50,0x62,0x04,0x65};

  GetCCLogsResponse() : status(0) {
  }

  virtual ~GetCCLogsResponse() throw() {}

  bool status;
  std::vector<int8_t>  data;

  _GetCCLogsResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_data(const std::vector<int8_t> & val) {
    data = val;
  }

  bool operator == (const GetCCLogsResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const GetCCLogsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetCCLogsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetCCLogsResponse &a, GetCCLogsResponse &b);

typedef struct _GetFirmwareUpdateResponse__isset {
  _GetFirmwareUpdateResponse__isset() : status(false), uri(false) {}
  bool status;
  bool uri;
} _GetFirmwareUpdateResponse__isset;

class GetFirmwareUpdateResponse {
 public:

  static const char* ascii_fingerprint; // = "1767FFB0CB3D9275BC64B198AB3B8A8B";
  static const uint8_t binary_fingerprint[16]; // = {0x17,0x67,0xFF,0xB0,0xCB,0x3D,0x92,0x75,0xBC,0x64,0xB1,0x98,0xAB,0x3B,0x8A,0x8B};

  GetFirmwareUpdateResponse() : status(0), uri() {
  }

  virtual ~GetFirmwareUpdateResponse() throw() {}

  bool status;
  std::string uri;

  _GetFirmwareUpdateResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_uri(const std::string& val) {
    uri = val;
  }

  bool operator == (const GetFirmwareUpdateResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(uri == rhs.uri))
      return false;
    return true;
  }
  bool operator != (const GetFirmwareUpdateResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetFirmwareUpdateResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetFirmwareUpdateResponse &a, GetFirmwareUpdateResponse &b);

typedef struct _SetFirmwareUpdate__isset {
  _SetFirmwareUpdate__isset() : uri(false) {}
  bool uri;
} _SetFirmwareUpdate__isset;

class SetFirmwareUpdate {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  SetFirmwareUpdate() : uri() {
  }

  virtual ~SetFirmwareUpdate() throw() {}

  std::string uri;

  _SetFirmwareUpdate__isset __isset;

  void __set_uri(const std::string& val) {
    uri = val;
  }

  bool operator == (const SetFirmwareUpdate & rhs) const
  {
    if (!(uri == rhs.uri))
      return false;
    return true;
  }
  bool operator != (const SetFirmwareUpdate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetFirmwareUpdate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetFirmwareUpdate &a, SetFirmwareUpdate &b);

typedef struct _SetFirmwareUpdateResponse__isset {
  _SetFirmwareUpdateResponse__isset() : status(false) {}
  bool status;
} _SetFirmwareUpdateResponse__isset;

class SetFirmwareUpdateResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  SetFirmwareUpdateResponse() : status(0) {
  }

  virtual ~SetFirmwareUpdateResponse() throw() {}

  bool status;

  _SetFirmwareUpdateResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  bool operator == (const SetFirmwareUpdateResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const SetFirmwareUpdateResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetFirmwareUpdateResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetFirmwareUpdateResponse &a, SetFirmwareUpdateResponse &b);

typedef struct _ResetFirmwareUpdateResponse__isset {
  _ResetFirmwareUpdateResponse__isset() : status(false) {}
  bool status;
} _ResetFirmwareUpdateResponse__isset;

class ResetFirmwareUpdateResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  ResetFirmwareUpdateResponse() : status(0) {
  }

  virtual ~ResetFirmwareUpdateResponse() throw() {}

  bool status;

  _ResetFirmwareUpdateResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  bool operator == (const ResetFirmwareUpdateResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const ResetFirmwareUpdateResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResetFirmwareUpdateResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ResetFirmwareUpdateResponse &a, ResetFirmwareUpdateResponse &b);

typedef struct _EnableWifi__isset {
  _EnableWifi__isset() : enable(false) {}
  bool enable;
} _EnableWifi__isset;

class EnableWifi {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  EnableWifi() : enable(0) {
  }

  virtual ~EnableWifi() throw() {}

  bool enable;

  _EnableWifi__isset __isset;

  void __set_enable(const bool val) {
    enable = val;
  }

  bool operator == (const EnableWifi & rhs) const
  {
    if (!(enable == rhs.enable))
      return false;
    return true;
  }
  bool operator != (const EnableWifi &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EnableWifi & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EnableWifi &a, EnableWifi &b);

typedef struct _EnableWifiResponse__isset {
  _EnableWifiResponse__isset() : status(false), request_state(false), error(false) {}
  bool status;
  bool request_state;
  bool error;
} _EnableWifiResponse__isset;

class EnableWifiResponse {
 public:

  static const char* ascii_fingerprint; // = "C3745037F91B2EB03D6C83E2C83E685D";
  static const uint8_t binary_fingerprint[16]; // = {0xC3,0x74,0x50,0x37,0xF9,0x1B,0x2E,0xB0,0x3D,0x6C,0x83,0xE2,0xC8,0x3E,0x68,0x5D};

  EnableWifiResponse() : status(0), request_state(0), error() {
  }

  virtual ~EnableWifiResponse() throw() {}

  bool status;
  bool request_state;
  std::string error;

  _EnableWifiResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_request_state(const bool val) {
    request_state = val;
  }

  void __set_error(const std::string& val) {
    error = val;
  }

  bool operator == (const EnableWifiResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(request_state == rhs.request_state))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const EnableWifiResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EnableWifiResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EnableWifiResponse &a, EnableWifiResponse &b);

typedef struct _ChangeApSetting__isset {
  _ChangeApSetting__isset() : network_name(false), network_password(false), encryption(false), hidden(false) {}
  bool network_name;
  bool network_password;
  bool encryption;
  bool hidden;
} _ChangeApSetting__isset;

class ChangeApSetting {
 public:

  static const char* ascii_fingerprint; // = "50BAD927FD916D0D7AE37B7F00C4B62C";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0xBA,0xD9,0x27,0xFD,0x91,0x6D,0x0D,0x7A,0xE3,0x7B,0x7F,0x00,0xC4,0xB6,0x2C};

  ChangeApSetting() : network_name(), network_password(), encryption((WifiEncryptionType::type)0), hidden(0) {
  }

  virtual ~ChangeApSetting() throw() {}

  std::string network_name;
  std::string network_password;
  WifiEncryptionType::type encryption;
  bool hidden;

  _ChangeApSetting__isset __isset;

  void __set_network_name(const std::string& val) {
    network_name = val;
  }

  void __set_network_password(const std::string& val) {
    network_password = val;
  }

  void __set_encryption(const WifiEncryptionType::type val) {
    encryption = val;
  }

  void __set_hidden(const bool val) {
    hidden = val;
  }

  bool operator == (const ChangeApSetting & rhs) const
  {
    if (!(network_name == rhs.network_name))
      return false;
    if (!(network_password == rhs.network_password))
      return false;
    if (!(encryption == rhs.encryption))
      return false;
    if (!(hidden == rhs.hidden))
      return false;
    return true;
  }
  bool operator != (const ChangeApSetting &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChangeApSetting & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ChangeApSetting &a, ChangeApSetting &b);

typedef struct _ChangeApSettingResponse__isset {
  _ChangeApSettingResponse__isset() : status(false), error(false) {}
  bool status;
  bool error;
} _ChangeApSettingResponse__isset;

class ChangeApSettingResponse {
 public:

  static const char* ascii_fingerprint; // = "1767FFB0CB3D9275BC64B198AB3B8A8B";
  static const uint8_t binary_fingerprint[16]; // = {0x17,0x67,0xFF,0xB0,0xCB,0x3D,0x92,0x75,0xBC,0x64,0xB1,0x98,0xAB,0x3B,0x8A,0x8B};

  ChangeApSettingResponse() : status(0), error() {
  }

  virtual ~ChangeApSettingResponse() throw() {}

  bool status;
  std::string error;

  _ChangeApSettingResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_error(const std::string& val) {
    error = val;
  }

  bool operator == (const ChangeApSettingResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const ChangeApSettingResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChangeApSettingResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ChangeApSettingResponse &a, ChangeApSettingResponse &b);

}}} // namespace

#endif
