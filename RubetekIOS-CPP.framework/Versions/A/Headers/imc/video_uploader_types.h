/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef video_uploader_TYPES_H
#define video_uploader_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace rubetek { namespace tag { namespace video_uploader {

struct COMMAND {
  enum type {
    INIT_TOKEN = 1000,
    DEINIT_TOKEN = 1001,
    UPLOAD_FILE = 1002,
    GET_ALL_TOKENS = 1003,
    GET_ALL_TOKENS_RESPONSE = 1004,
    MARK_DEVICE = 1005
  };
};

extern const std::map<int, const char*> _COMMAND_VALUES_TO_NAMES;

typedef struct _TokenInfo__isset {
  _TokenInfo__isset() : token_id(false), uploader_type(false), token(false), root_folder(false) {}
  bool token_id;
  bool uploader_type;
  bool token;
  bool root_folder;
} _TokenInfo__isset;

class TokenInfo {
 public:

  static const char* ascii_fingerprint; // = "C93D890311F28844166CF6E571EB3AC2";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};

  TokenInfo() : token_id(), uploader_type(), token(), root_folder() {
  }

  virtual ~TokenInfo() throw() {}

  std::string token_id;
  std::string uploader_type;
  std::string token;
  std::string root_folder;

  _TokenInfo__isset __isset;

  void __set_token_id(const std::string& val) {
    token_id = val;
  }

  void __set_uploader_type(const std::string& val) {
    uploader_type = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  void __set_root_folder(const std::string& val) {
    root_folder = val;
  }

  bool operator == (const TokenInfo & rhs) const
  {
    if (!(token_id == rhs.token_id))
      return false;
    if (!(uploader_type == rhs.uploader_type))
      return false;
    if (!(token == rhs.token))
      return false;
    if (!(root_folder == rhs.root_folder))
      return false;
    return true;
  }
  bool operator != (const TokenInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TokenInfo &a, TokenInfo &b);

typedef struct _FileInfo__isset {
  _FileInfo__isset() : file_path(false), record_mode(false), token_id(false), script_mode(false), device_id(false) {}
  bool file_path;
  bool record_mode;
  bool token_id;
  bool script_mode;
  bool device_id;
} _FileInfo__isset;

class FileInfo {
 public:

  static const char* ascii_fingerprint; // = "BFF0E21728CB005F9AA5774A41542B8D";
  static const uint8_t binary_fingerprint[16]; // = {0xBF,0xF0,0xE2,0x17,0x28,0xCB,0x00,0x5F,0x9A,0xA5,0x77,0x4A,0x41,0x54,0x2B,0x8D};

  FileInfo() : file_path(), record_mode(), token_id(), script_mode(), device_id() {
  }

  virtual ~FileInfo() throw() {}

  std::string file_path;
  std::string record_mode;
  std::string token_id;
  std::string script_mode;
  std::string device_id;

  _FileInfo__isset __isset;

  void __set_file_path(const std::string& val) {
    file_path = val;
  }

  void __set_record_mode(const std::string& val) {
    record_mode = val;
  }

  void __set_token_id(const std::string& val) {
    token_id = val;
  }

  void __set_script_mode(const std::string& val) {
    script_mode = val;
  }

  void __set_device_id(const std::string& val) {
    device_id = val;
  }

  bool operator == (const FileInfo & rhs) const
  {
    if (!(file_path == rhs.file_path))
      return false;
    if (!(record_mode == rhs.record_mode))
      return false;
    if (!(token_id == rhs.token_id))
      return false;
    if (!(script_mode == rhs.script_mode))
      return false;
    if (!(device_id == rhs.device_id))
      return false;
    return true;
  }
  bool operator != (const FileInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FileInfo &a, FileInfo &b);

typedef struct _MarkInfo__isset {
  _MarkInfo__isset() : mark(false), device_id(false) {}
  bool mark;
  bool device_id;
} _MarkInfo__isset;

class MarkInfo {
 public:

  static const char* ascii_fingerprint; // = "1767FFB0CB3D9275BC64B198AB3B8A8B";
  static const uint8_t binary_fingerprint[16]; // = {0x17,0x67,0xFF,0xB0,0xCB,0x3D,0x92,0x75,0xBC,0x64,0xB1,0x98,0xAB,0x3B,0x8A,0x8B};

  MarkInfo() : mark(0), device_id() {
  }

  virtual ~MarkInfo() throw() {}

  bool mark;
  std::string device_id;

  _MarkInfo__isset __isset;

  void __set_mark(const bool val) {
    mark = val;
  }

  void __set_device_id(const std::string& val) {
    device_id = val;
  }

  bool operator == (const MarkInfo & rhs) const
  {
    if (!(mark == rhs.mark))
      return false;
    if (!(device_id == rhs.device_id))
      return false;
    return true;
  }
  bool operator != (const MarkInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MarkInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MarkInfo &a, MarkInfo &b);

}}} // namespace

#endif
