/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef statistics_TYPES_H
#define statistics_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace rubetek { namespace tag { namespace statistics {

struct COMMAND {
  enum type {
    STATISTICS_REQUEST = 1300,
    STATISTICS_RESPONSE = 1301,
    ENERGY_REQUEST = 1302,
    ENERGY_RESPONSE = 1303
  };
};

extern const std::map<int, const char*> _COMMAND_VALUES_TO_NAMES;

typedef struct _statistics_request__isset {
  _statistics_request__isset() : device_id(false), property_id(false), begin_time(false), end_time(false), graph_width(false) {}
  bool device_id;
  bool property_id;
  bool begin_time;
  bool end_time;
  bool graph_width;
} _statistics_request__isset;

class statistics_request {
 public:

  static const char* ascii_fingerprint; // = "A26709F89CA920767EE22659E011C16E";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0x67,0x09,0xF8,0x9C,0xA9,0x20,0x76,0x7E,0xE2,0x26,0x59,0xE0,0x11,0xC1,0x6E};

  statistics_request() : device_id(), property_id(0), begin_time(0), end_time(0), graph_width(0) {
  }

  virtual ~statistics_request() throw() {}

  std::string device_id;
  int32_t property_id;
  int32_t begin_time;
  int32_t end_time;
  int16_t graph_width;

  _statistics_request__isset __isset;

  void __set_device_id(const std::string& val) {
    device_id = val;
  }

  void __set_property_id(const int32_t val) {
    property_id = val;
  }

  void __set_begin_time(const int32_t val) {
    begin_time = val;
  }

  void __set_end_time(const int32_t val) {
    end_time = val;
  }

  void __set_graph_width(const int16_t val) {
    graph_width = val;
  }

  bool operator == (const statistics_request & rhs) const
  {
    if (!(device_id == rhs.device_id))
      return false;
    if (!(property_id == rhs.property_id))
      return false;
    if (!(begin_time == rhs.begin_time))
      return false;
    if (!(end_time == rhs.end_time))
      return false;
    if (!(graph_width == rhs.graph_width))
      return false;
    return true;
  }
  bool operator != (const statistics_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const statistics_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(statistics_request &a, statistics_request &b);

typedef struct _statistics_item_bool__isset {
  _statistics_item_bool__isset() : time(false), value(false) {}
  bool time;
  bool value;
} _statistics_item_bool__isset;

class statistics_item_bool {
 public:

  static const char* ascii_fingerprint; // = "4DC0C1A1F380340B40244ADC7FB0BA60";
  static const uint8_t binary_fingerprint[16]; // = {0x4D,0xC0,0xC1,0xA1,0xF3,0x80,0x34,0x0B,0x40,0x24,0x4A,0xDC,0x7F,0xB0,0xBA,0x60};

  statistics_item_bool() : time(0), value(0) {
  }

  virtual ~statistics_item_bool() throw() {}

  int32_t time;
  bool value;

  _statistics_item_bool__isset __isset;

  void __set_time(const int32_t val) {
    time = val;
  }

  void __set_value(const bool val) {
    value = val;
  }

  bool operator == (const statistics_item_bool & rhs) const
  {
    if (!(time == rhs.time))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const statistics_item_bool &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const statistics_item_bool & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(statistics_item_bool &a, statistics_item_bool &b);

typedef struct _statistics_item_int__isset {
  _statistics_item_int__isset() : time(false), value(false) {}
  bool time;
  bool value;
} _statistics_item_int__isset;

class statistics_item_int {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  statistics_item_int() : time(0), value(0) {
  }

  virtual ~statistics_item_int() throw() {}

  int32_t time;
  int32_t value;

  _statistics_item_int__isset __isset;

  void __set_time(const int32_t val) {
    time = val;
  }

  void __set_value(const int32_t val) {
    value = val;
  }

  bool operator == (const statistics_item_int & rhs) const
  {
    if (!(time == rhs.time))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const statistics_item_int &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const statistics_item_int & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(statistics_item_int &a, statistics_item_int &b);

typedef struct _statistics_item_float__isset {
  _statistics_item_float__isset() : time(false), value(false) {}
  bool time;
  bool value;
} _statistics_item_float__isset;

class statistics_item_float {
 public:

  static const char* ascii_fingerprint; // = "0B663F1913C9C6F43150B524A8B76386";
  static const uint8_t binary_fingerprint[16]; // = {0x0B,0x66,0x3F,0x19,0x13,0xC9,0xC6,0xF4,0x31,0x50,0xB5,0x24,0xA8,0xB7,0x63,0x86};

  statistics_item_float() : time(0), value(0) {
  }

  virtual ~statistics_item_float() throw() {}

  int32_t time;
  double value;

  _statistics_item_float__isset __isset;

  void __set_time(const int32_t val) {
    time = val;
  }

  void __set_value(const double val) {
    value = val;
  }

  bool operator == (const statistics_item_float & rhs) const
  {
    if (!(time == rhs.time))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const statistics_item_float &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const statistics_item_float & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(statistics_item_float &a, statistics_item_float &b);

typedef struct _statistics_response__isset {
  _statistics_response__isset() : device_id(false), property_id(false), items_bool(false), items_int(false), items_float(false), begin_time(false), end_time(false) {}
  bool device_id;
  bool property_id;
  bool items_bool;
  bool items_int;
  bool items_float;
  bool begin_time;
  bool end_time;
} _statistics_response__isset;

class statistics_response {
 public:

  static const char* ascii_fingerprint; // = "1809104B6FE80831B07E6C97EDCCDFB5";
  static const uint8_t binary_fingerprint[16]; // = {0x18,0x09,0x10,0x4B,0x6F,0xE8,0x08,0x31,0xB0,0x7E,0x6C,0x97,0xED,0xCC,0xDF,0xB5};

  statistics_response() : device_id(), property_id(0), begin_time(0), end_time(0) {
  }

  virtual ~statistics_response() throw() {}

  std::string device_id;
  int32_t property_id;
  std::vector<statistics_item_bool>  items_bool;
  std::vector<statistics_item_int>  items_int;
  std::vector<statistics_item_float>  items_float;
  int32_t begin_time;
  int32_t end_time;

  _statistics_response__isset __isset;

  void __set_device_id(const std::string& val) {
    device_id = val;
  }

  void __set_property_id(const int32_t val) {
    property_id = val;
  }

  void __set_items_bool(const std::vector<statistics_item_bool> & val) {
    items_bool = val;
    __isset.items_bool = true;
  }

  void __set_items_int(const std::vector<statistics_item_int> & val) {
    items_int = val;
    __isset.items_int = true;
  }

  void __set_items_float(const std::vector<statistics_item_float> & val) {
    items_float = val;
    __isset.items_float = true;
  }

  void __set_begin_time(const int32_t val) {
    begin_time = val;
  }

  void __set_end_time(const int32_t val) {
    end_time = val;
  }

  bool operator == (const statistics_response & rhs) const
  {
    if (!(device_id == rhs.device_id))
      return false;
    if (!(property_id == rhs.property_id))
      return false;
    if (__isset.items_bool != rhs.__isset.items_bool)
      return false;
    else if (__isset.items_bool && !(items_bool == rhs.items_bool))
      return false;
    if (__isset.items_int != rhs.__isset.items_int)
      return false;
    else if (__isset.items_int && !(items_int == rhs.items_int))
      return false;
    if (__isset.items_float != rhs.__isset.items_float)
      return false;
    else if (__isset.items_float && !(items_float == rhs.items_float))
      return false;
    if (!(begin_time == rhs.begin_time))
      return false;
    if (!(end_time == rhs.end_time))
      return false;
    return true;
  }
  bool operator != (const statistics_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const statistics_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(statistics_response &a, statistics_response &b);

typedef struct _energy_request__isset {
  _energy_request__isset() : device_id(false), begin_time(false), end_time(false), context(false) {}
  bool device_id;
  bool begin_time;
  bool end_time;
  bool context;
} _energy_request__isset;

class energy_request {
 public:

  static const char* ascii_fingerprint; // = "117811434B043EA39B98AC2A3E784934";
  static const uint8_t binary_fingerprint[16]; // = {0x11,0x78,0x11,0x43,0x4B,0x04,0x3E,0xA3,0x9B,0x98,0xAC,0x2A,0x3E,0x78,0x49,0x34};

  energy_request() : device_id(), begin_time(0), end_time(0), context() {
  }

  virtual ~energy_request() throw() {}

  std::string device_id;
  int32_t begin_time;
  int32_t end_time;
  std::string context;

  _energy_request__isset __isset;

  void __set_device_id(const std::string& val) {
    device_id = val;
  }

  void __set_begin_time(const int32_t val) {
    begin_time = val;
  }

  void __set_end_time(const int32_t val) {
    end_time = val;
  }

  void __set_context(const std::string& val) {
    context = val;
  }

  bool operator == (const energy_request & rhs) const
  {
    if (!(device_id == rhs.device_id))
      return false;
    if (!(begin_time == rhs.begin_time))
      return false;
    if (!(end_time == rhs.end_time))
      return false;
    if (!(context == rhs.context))
      return false;
    return true;
  }
  bool operator != (const energy_request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const energy_request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(energy_request &a, energy_request &b);

typedef struct _energy_response__isset {
  _energy_response__isset() : device_id(false), begin_time(false), end_time(false), counted_value(false), context(false) {}
  bool device_id;
  bool begin_time;
  bool end_time;
  bool counted_value;
  bool context;
} _energy_response__isset;

class energy_response {
 public:

  static const char* ascii_fingerprint; // = "501EC38EEA86FF178B6B5ED649747CDB";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0x1E,0xC3,0x8E,0xEA,0x86,0xFF,0x17,0x8B,0x6B,0x5E,0xD6,0x49,0x74,0x7C,0xDB};

  energy_response() : device_id(), begin_time(0), end_time(0), counted_value(0), context() {
  }

  virtual ~energy_response() throw() {}

  std::string device_id;
  int32_t begin_time;
  int32_t end_time;
  double counted_value;
  std::string context;

  _energy_response__isset __isset;

  void __set_device_id(const std::string& val) {
    device_id = val;
  }

  void __set_begin_time(const int32_t val) {
    begin_time = val;
  }

  void __set_end_time(const int32_t val) {
    end_time = val;
  }

  void __set_counted_value(const double val) {
    counted_value = val;
  }

  void __set_context(const std::string& val) {
    context = val;
  }

  bool operator == (const energy_response & rhs) const
  {
    if (!(device_id == rhs.device_id))
      return false;
    if (!(begin_time == rhs.begin_time))
      return false;
    if (!(end_time == rhs.end_time))
      return false;
    if (!(counted_value == rhs.counted_value))
      return false;
    if (!(context == rhs.context))
      return false;
    return true;
  }
  bool operator != (const energy_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const energy_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(energy_response &a, energy_response &b);

}}} // namespace

#endif
