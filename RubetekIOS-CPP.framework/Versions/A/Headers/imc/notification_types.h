/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef notification_TYPES_H
#define notification_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace rubetek { namespace tag { namespace notification {

struct COMMAND {
  enum type {
    CLIENT_CONNECTION_CHANGED = 400,
    INTERCOM_INCOMING_CALL = 401,
    SEND_CUSTOM_NOTIFICATION = 402,
    SEND_SNAPSHOT_NOTIFICATION = 403,
    PULL_LOCAL_NOTIFICATION = 404,
    PULL_FILE = 405,
    SEND_SYSTEM_NOTIFICATION = 406
  };
};

extern const std::map<int, const char*> _COMMAND_VALUES_TO_NAMES;

struct ConnectionStatus {
  enum type {
    csLocal = 0,
    csRemote = 1,
    csOffline = 2
  };
};

extern const std::map<int, const char*> _ConnectionStatus_VALUES_TO_NAMES;

struct NotificationType {
  enum type {
    ntSensor = 0,
    ntCustom = 1,
    ntSnapshot = 2
  };
};

extern const std::map<int, const char*> _NotificationType_VALUES_TO_NAMES;

typedef struct _ClientConnectionChanged__isset {
  _ClientConnectionChanged__isset() : client_id(false), last_status(false), current_status(false), project_id(false) {}
  bool client_id;
  bool last_status;
  bool current_status;
  bool project_id;
} _ClientConnectionChanged__isset;

class ClientConnectionChanged {
 public:

  static const char* ascii_fingerprint; // = "4889D0BBDC856BDE6D947A26F27AE5BA";
  static const uint8_t binary_fingerprint[16]; // = {0x48,0x89,0xD0,0xBB,0xDC,0x85,0x6B,0xDE,0x6D,0x94,0x7A,0x26,0xF2,0x7A,0xE5,0xBA};

  ClientConnectionChanged() : client_id(), last_status((ConnectionStatus::type)0), current_status((ConnectionStatus::type)0), project_id() {
  }

  virtual ~ClientConnectionChanged() throw() {}

  std::string client_id;
  ConnectionStatus::type last_status;
  ConnectionStatus::type current_status;
  std::string project_id;

  _ClientConnectionChanged__isset __isset;

  void __set_client_id(const std::string& val) {
    client_id = val;
  }

  void __set_last_status(const ConnectionStatus::type val) {
    last_status = val;
  }

  void __set_current_status(const ConnectionStatus::type val) {
    current_status = val;
  }

  void __set_project_id(const std::string& val) {
    project_id = val;
  }

  bool operator == (const ClientConnectionChanged & rhs) const
  {
    if (!(client_id == rhs.client_id))
      return false;
    if (!(last_status == rhs.last_status))
      return false;
    if (!(current_status == rhs.current_status))
      return false;
    if (!(project_id == rhs.project_id))
      return false;
    return true;
  }
  bool operator != (const ClientConnectionChanged &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientConnectionChanged & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ClientConnectionChanged &a, ClientConnectionChanged &b);

typedef struct _IntercomIncomingCall__isset {
  _IntercomIncomingCall__isset() : intercom_name(false), intercom_id(false) {}
  bool intercom_name;
  bool intercom_id;
} _IntercomIncomingCall__isset;

class IntercomIncomingCall {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  IntercomIncomingCall() : intercom_name(), intercom_id() {
  }

  virtual ~IntercomIncomingCall() throw() {}

  std::string intercom_name;
  std::string intercom_id;

  _IntercomIncomingCall__isset __isset;

  void __set_intercom_name(const std::string& val) {
    intercom_name = val;
  }

  void __set_intercom_id(const std::string& val) {
    intercom_id = val;
  }

  bool operator == (const IntercomIncomingCall & rhs) const
  {
    if (!(intercom_name == rhs.intercom_name))
      return false;
    if (!(intercom_id == rhs.intercom_id))
      return false;
    return true;
  }
  bool operator != (const IntercomIncomingCall &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IntercomIncomingCall & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(IntercomIncomingCall &a, IntercomIncomingCall &b);

typedef struct _SnapshotNotificationData__isset {
  _SnapshotNotificationData__isset() : device_id(false), file(false) {}
  bool device_id;
  bool file;
} _SnapshotNotificationData__isset;

class SnapshotNotificationData {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  SnapshotNotificationData() : device_id(), file() {
  }

  virtual ~SnapshotNotificationData() throw() {}

  std::string device_id;
  std::string file;

  _SnapshotNotificationData__isset __isset;

  void __set_device_id(const std::string& val) {
    device_id = val;
  }

  void __set_file(const std::string& val) {
    file = val;
  }

  bool operator == (const SnapshotNotificationData & rhs) const
  {
    if (!(device_id == rhs.device_id))
      return false;
    if (!(file == rhs.file))
      return false;
    return true;
  }
  bool operator != (const SnapshotNotificationData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnapshotNotificationData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SnapshotNotificationData &a, SnapshotNotificationData &b);

typedef struct _CustomNotificationData__isset {
  _CustomNotificationData__isset() : notify_type(false), message(false) {}
  bool notify_type;
  bool message;
} _CustomNotificationData__isset;

class CustomNotificationData {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  CustomNotificationData() : notify_type(), message() {
  }

  virtual ~CustomNotificationData() throw() {}

  std::string notify_type;
  std::string message;

  _CustomNotificationData__isset __isset;

  void __set_notify_type(const std::string& val) {
    notify_type = val;
  }

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const CustomNotificationData & rhs) const
  {
    if (!(notify_type == rhs.notify_type))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const CustomNotificationData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CustomNotificationData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CustomNotificationData &a, CustomNotificationData &b);

typedef struct _NotificationData__isset {
  _NotificationData__isset() : device_id(false), value(false), time(false), type(false), device_type(false), device_name(false), room(false), message(false), controller_id(false), push_uuid(false), client_id(false), snapshot_uuid(false), channel(false) {}
  bool device_id;
  bool value;
  bool time;
  bool type;
  bool device_type;
  bool device_name;
  bool room;
  bool message;
  bool controller_id;
  bool push_uuid;
  bool client_id;
  bool snapshot_uuid;
  bool channel;
} _NotificationData__isset;

class NotificationData {
 public:

  static const char* ascii_fingerprint; // = "A60235EA78C5B45133C6C400039BC78C";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x02,0x35,0xEA,0x78,0xC5,0xB4,0x51,0x33,0xC6,0xC4,0x00,0x03,0x9B,0xC7,0x8C};

  NotificationData() : device_id(), value(), time(), type(), device_type(), device_name(), room(), message(), controller_id(), push_uuid(), client_id(), snapshot_uuid(), channel() {
  }

  virtual ~NotificationData() throw() {}

  std::string device_id;
  std::string value;
  std::string time;
  std::string type;
  std::string device_type;
  std::string device_name;
  std::string room;
  std::string message;
  std::string controller_id;
  std::string push_uuid;
  std::string client_id;
  std::string snapshot_uuid;
  std::string channel;

  _NotificationData__isset __isset;

  void __set_device_id(const std::string& val) {
    device_id = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  void __set_time(const std::string& val) {
    time = val;
  }

  void __set_type(const std::string& val) {
    type = val;
  }

  void __set_device_type(const std::string& val) {
    device_type = val;
  }

  void __set_device_name(const std::string& val) {
    device_name = val;
  }

  void __set_room(const std::string& val) {
    room = val;
  }

  void __set_message(const std::string& val) {
    message = val;
  }

  void __set_controller_id(const std::string& val) {
    controller_id = val;
  }

  void __set_push_uuid(const std::string& val) {
    push_uuid = val;
  }

  void __set_client_id(const std::string& val) {
    client_id = val;
  }

  void __set_snapshot_uuid(const std::string& val) {
    snapshot_uuid = val;
  }

  void __set_channel(const std::string& val) {
    channel = val;
    __isset.channel = true;
  }

  bool operator == (const NotificationData & rhs) const
  {
    if (!(device_id == rhs.device_id))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(time == rhs.time))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(device_type == rhs.device_type))
      return false;
    if (!(device_name == rhs.device_name))
      return false;
    if (!(room == rhs.room))
      return false;
    if (!(message == rhs.message))
      return false;
    if (!(controller_id == rhs.controller_id))
      return false;
    if (!(push_uuid == rhs.push_uuid))
      return false;
    if (!(client_id == rhs.client_id))
      return false;
    if (!(snapshot_uuid == rhs.snapshot_uuid))
      return false;
    if (__isset.channel != rhs.__isset.channel)
      return false;
    else if (__isset.channel && !(channel == rhs.channel))
      return false;
    return true;
  }
  bool operator != (const NotificationData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotificationData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NotificationData &a, NotificationData &b);

typedef struct _LocalNotificationData__isset {
  _LocalNotificationData__isset() : type(false), data(false) {}
  bool type;
  bool data;
} _LocalNotificationData__isset;

class LocalNotificationData {
 public:

  static const char* ascii_fingerprint; // = "E3F7410F42E00F536EE1FBA3246D2530";
  static const uint8_t binary_fingerprint[16]; // = {0xE3,0xF7,0x41,0x0F,0x42,0xE0,0x0F,0x53,0x6E,0xE1,0xFB,0xA3,0x24,0x6D,0x25,0x30};

  LocalNotificationData() : type((NotificationType::type)0) {
  }

  virtual ~LocalNotificationData() throw() {}

  NotificationType::type type;
  NotificationData data;

  _LocalNotificationData__isset __isset;

  void __set_type(const NotificationType::type val) {
    type = val;
  }

  void __set_data(const NotificationData& val) {
    data = val;
  }

  bool operator == (const LocalNotificationData & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const LocalNotificationData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LocalNotificationData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LocalNotificationData &a, LocalNotificationData &b);

typedef struct _FileData__isset {
  _FileData__isset() : uuid(false), content(false) {}
  bool uuid;
  bool content;
} _FileData__isset;

class FileData {
 public:

  static const char* ascii_fingerprint; // = "17384A69639B5CA95A0008F1904DB635";
  static const uint8_t binary_fingerprint[16]; // = {0x17,0x38,0x4A,0x69,0x63,0x9B,0x5C,0xA9,0x5A,0x00,0x08,0xF1,0x90,0x4D,0xB6,0x35};

  FileData() : uuid() {
  }

  virtual ~FileData() throw() {}

  std::string uuid;
  std::vector<int8_t>  content;

  _FileData__isset __isset;

  void __set_uuid(const std::string& val) {
    uuid = val;
  }

  void __set_content(const std::vector<int8_t> & val) {
    content = val;
  }

  bool operator == (const FileData & rhs) const
  {
    if (!(uuid == rhs.uuid))
      return false;
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const FileData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FileData &a, FileData &b);

typedef struct _SystemNotificationData__isset {
  _SystemNotificationData__isset() : notification_type(false), device_id(false), device_type(false), property_id(false), property_value(false) {}
  bool notification_type;
  bool device_id;
  bool device_type;
  bool property_id;
  bool property_value;
} _SystemNotificationData__isset;

class SystemNotificationData {
 public:

  static const char* ascii_fingerprint; // = "BFF0E21728CB005F9AA5774A41542B8D";
  static const uint8_t binary_fingerprint[16]; // = {0xBF,0xF0,0xE2,0x17,0x28,0xCB,0x00,0x5F,0x9A,0xA5,0x77,0x4A,0x41,0x54,0x2B,0x8D};

  SystemNotificationData() : notification_type(), device_id(), device_type(), property_id(), property_value() {
  }

  virtual ~SystemNotificationData() throw() {}

  std::string notification_type;
  std::string device_id;
  std::string device_type;
  std::string property_id;
  std::string property_value;

  _SystemNotificationData__isset __isset;

  void __set_notification_type(const std::string& val) {
    notification_type = val;
  }

  void __set_device_id(const std::string& val) {
    device_id = val;
  }

  void __set_device_type(const std::string& val) {
    device_type = val;
  }

  void __set_property_id(const std::string& val) {
    property_id = val;
  }

  void __set_property_value(const std::string& val) {
    property_value = val;
  }

  bool operator == (const SystemNotificationData & rhs) const
  {
    if (!(notification_type == rhs.notification_type))
      return false;
    if (!(device_id == rhs.device_id))
      return false;
    if (!(device_type == rhs.device_type))
      return false;
    if (!(property_id == rhs.property_id))
      return false;
    if (!(property_value == rhs.property_value))
      return false;
    return true;
  }
  bool operator != (const SystemNotificationData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SystemNotificationData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SystemNotificationData &a, SystemNotificationData &b);

}}} // namespace

#endif
