/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef wifi_device_TYPES_H
#define wifi_device_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace rubetek { namespace tag { namespace wifidevice {

struct COMMAND {
  enum type {
    LIST_FOUND_DEVICE = 1700,
    LIST_FOUND_DEVICE_RESPONSE = 1701,
    GET_KEY_WIFI_DEVICE = 1702,
    GET_KEY_WIFI_DEVICE_RESPONSE = 1703
  };
};

extern const std::map<int, const char*> _COMMAND_VALUES_TO_NAMES;

typedef struct _FoundWifiDevice__isset {
  _FoundWifiDevice__isset() : device_id(false), ip(false), type(false) {}
  bool device_id;
  bool ip;
  bool type;
} _FoundWifiDevice__isset;

class FoundWifiDevice {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  FoundWifiDevice() : device_id(), ip(), type() {
  }

  virtual ~FoundWifiDevice() throw() {}

  std::string device_id;
  std::string ip;
  std::string type;

  _FoundWifiDevice__isset __isset;

  void __set_device_id(const std::string& val) {
    device_id = val;
  }

  void __set_ip(const std::string& val) {
    ip = val;
  }

  void __set_type(const std::string& val) {
    type = val;
  }

  bool operator == (const FoundWifiDevice & rhs) const
  {
    if (!(device_id == rhs.device_id))
      return false;
    if (!(ip == rhs.ip))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const FoundWifiDevice &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FoundWifiDevice & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FoundWifiDevice &a, FoundWifiDevice &b);

typedef struct _ListFoundDeviceResponse__isset {
  _ListFoundDeviceResponse__isset() : devices(false) {}
  bool devices;
} _ListFoundDeviceResponse__isset;

class ListFoundDeviceResponse {
 public:

  static const char* ascii_fingerprint; // = "0146931C2E0BE367167559BCD459F51A";
  static const uint8_t binary_fingerprint[16]; // = {0x01,0x46,0x93,0x1C,0x2E,0x0B,0xE3,0x67,0x16,0x75,0x59,0xBC,0xD4,0x59,0xF5,0x1A};

  ListFoundDeviceResponse() {
  }

  virtual ~ListFoundDeviceResponse() throw() {}

  std::vector<FoundWifiDevice>  devices;

  _ListFoundDeviceResponse__isset __isset;

  void __set_devices(const std::vector<FoundWifiDevice> & val) {
    devices = val;
  }

  bool operator == (const ListFoundDeviceResponse & rhs) const
  {
    if (!(devices == rhs.devices))
      return false;
    return true;
  }
  bool operator != (const ListFoundDeviceResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ListFoundDeviceResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ListFoundDeviceResponse &a, ListFoundDeviceResponse &b);

typedef struct _GetKeyWifiDevice__isset {
  _GetKeyWifiDevice__isset() : device_id(false), ip(false) {}
  bool device_id;
  bool ip;
} _GetKeyWifiDevice__isset;

class GetKeyWifiDevice {
 public:

  static const char* ascii_fingerprint; // = "D0297FC5011701BD87898CC36146A565";
  static const uint8_t binary_fingerprint[16]; // = {0xD0,0x29,0x7F,0xC5,0x01,0x17,0x01,0xBD,0x87,0x89,0x8C,0xC3,0x61,0x46,0xA5,0x65};

  GetKeyWifiDevice() : device_id(), ip() {
  }

  virtual ~GetKeyWifiDevice() throw() {}

  std::string device_id;
  std::string ip;

  _GetKeyWifiDevice__isset __isset;

  void __set_device_id(const std::string& val) {
    device_id = val;
    __isset.device_id = true;
  }

  void __set_ip(const std::string& val) {
    ip = val;
    __isset.ip = true;
  }

  bool operator == (const GetKeyWifiDevice & rhs) const
  {
    if (__isset.device_id != rhs.__isset.device_id)
      return false;
    else if (__isset.device_id && !(device_id == rhs.device_id))
      return false;
    if (__isset.ip != rhs.__isset.ip)
      return false;
    else if (__isset.ip && !(ip == rhs.ip))
      return false;
    return true;
  }
  bool operator != (const GetKeyWifiDevice &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetKeyWifiDevice & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetKeyWifiDevice &a, GetKeyWifiDevice &b);

typedef struct _GetKeyWifiDeviceResponse__isset {
  _GetKeyWifiDeviceResponse__isset() : status(false), device_id(false), key(false), ip(false) {}
  bool status;
  bool device_id;
  bool key;
  bool ip;
} _GetKeyWifiDeviceResponse__isset;

class GetKeyWifiDeviceResponse {
 public:

  static const char* ascii_fingerprint; // = "B7080D97FBE64A05254F705FB1FADA7F";
  static const uint8_t binary_fingerprint[16]; // = {0xB7,0x08,0x0D,0x97,0xFB,0xE6,0x4A,0x05,0x25,0x4F,0x70,0x5F,0xB1,0xFA,0xDA,0x7F};

  GetKeyWifiDeviceResponse() : status(0), device_id(), key(), ip() {
  }

  virtual ~GetKeyWifiDeviceResponse() throw() {}

  bool status;
  std::string device_id;
  std::string key;
  std::string ip;

  _GetKeyWifiDeviceResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_device_id(const std::string& val) {
    device_id = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_ip(const std::string& val) {
    ip = val;
  }

  bool operator == (const GetKeyWifiDeviceResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(device_id == rhs.device_id))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(ip == rhs.ip))
      return false;
    return true;
  }
  bool operator != (const GetKeyWifiDeviceResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetKeyWifiDeviceResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetKeyWifiDeviceResponse &a, GetKeyWifiDeviceResponse &b);

}}} // namespace

#endif
