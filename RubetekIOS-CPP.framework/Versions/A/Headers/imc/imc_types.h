/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef imc_TYPES_H
#define imc_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "property_types.h"
#include "device_types.h"
#include "home_builder_types.h"
#include "zwave_types.h"
#include "functional_types.h"
#include "notification_types.h"
#include "camera2_types.h"
#include "script_types.h"
#include "rf_types.h"
#include "video_recorder_types.h"
#include "rtsp_relay_types.h"
#include "video_uploader_types.h"
#include "upnp_types.h"
#include "statistics_types.h"
#include "o7_types.h"
#include "server_auxiliary_types.h"
#include "rtsp_server_relay_types.h"
#include "homekit_bridge_types.h"
#include "wifi_device_types.h"


namespace rubetek { namespace proto { namespace imc {

struct tag {
  enum type {
    emulator_echo = 0,
    command_from_client = 1,
    command_to_client = 2,
    home_reconfigure = 3,
    get_client_list = 4,
    client_list = 5,
    property_from_module = 6,
    property_to_module = 7,
    device_list_request = 8,
    device_list_response = 9,
    auxiliary_from_server = 10,
    auxiliary_to_server = 11,
    set_device_property = 12,
    property_list_request = 13,
    property_list_response = 14,
    client_project_changed = 15
  };
};

extern const std::map<int, const char*> _tag_VALUES_TO_NAMES;

typedef struct _client_command__isset {
  _client_command__isset() : client_id(false), payload(false) {}
  bool client_id;
  bool payload;
} _client_command__isset;

class client_command {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  client_command() : client_id(), payload() {
  }

  virtual ~client_command() throw() {}

  std::string client_id;
  std::string payload;

  _client_command__isset __isset;

  void __set_client_id(const std::string& val) {
    client_id = val;
  }

  void __set_payload(const std::string& val) {
    payload = val;
  }

  bool operator == (const client_command & rhs) const
  {
    if (!(client_id == rhs.client_id))
      return false;
    if (!(payload == rhs.payload))
      return false;
    return true;
  }
  bool operator != (const client_command &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const client_command & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(client_command &a, client_command &b);

typedef struct _client_payload__isset {
  _client_payload__isset() : tag(false), payload(false) {}
  bool tag;
  bool payload;
} _client_payload__isset;

class client_payload {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  client_payload() : tag(0), payload() {
  }

  virtual ~client_payload() throw() {}

  int32_t tag;
  std::string payload;

  _client_payload__isset __isset;

  void __set_tag(const int32_t val) {
    tag = val;
  }

  void __set_payload(const std::string& val) {
    payload = val;
  }

  bool operator == (const client_payload & rhs) const
  {
    if (!(tag == rhs.tag))
      return false;
    if (!(payload == rhs.payload))
      return false;
    return true;
  }
  bool operator != (const client_payload &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const client_payload & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(client_payload &a, client_payload &b);

typedef struct _client_info__isset {
  _client_info__isset() : id(false), online(false) {}
  bool id;
  bool online;
} _client_info__isset;

class client_info {
 public:

  static const char* ascii_fingerprint; // = "7D61C9AA00102AB4D8F72A1DA58297DC";
  static const uint8_t binary_fingerprint[16]; // = {0x7D,0x61,0xC9,0xAA,0x00,0x10,0x2A,0xB4,0xD8,0xF7,0x2A,0x1D,0xA5,0x82,0x97,0xDC};

  client_info() : id(), online(0) {
  }

  virtual ~client_info() throw() {}

  std::string id;
  bool online;

  _client_info__isset __isset;

  void __set_id(const std::string& val) {
    id = val;
  }

  void __set_online(const bool val) {
    online = val;
  }

  bool operator == (const client_info & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(online == rhs.online))
      return false;
    return true;
  }
  bool operator != (const client_info &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const client_info & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(client_info &a, client_info &b);

typedef struct _client_list__isset {
  _client_list__isset() : clients(false) {}
  bool clients;
} _client_list__isset;

class client_list {
 public:

  static const char* ascii_fingerprint; // = "33B85C286546E1F97EC300E9AC5B6C30";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0xB8,0x5C,0x28,0x65,0x46,0xE1,0xF9,0x7E,0xC3,0x00,0xE9,0xAC,0x5B,0x6C,0x30};

  client_list() {
  }

  virtual ~client_list() throw() {}

  std::vector<client_info>  clients;

  _client_list__isset __isset;

  void __set_clients(const std::vector<client_info> & val) {
    clients = val;
  }

  bool operator == (const client_list & rhs) const
  {
    if (!(clients == rhs.clients))
      return false;
    return true;
  }
  bool operator != (const client_list &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const client_list & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(client_list &a, client_list &b);

typedef struct _device_list_response__isset {
  _device_list_response__isset() : devices(false) {}
  bool devices;
} _device_list_response__isset;

class device_list_response {
 public:

  static const char* ascii_fingerprint; // = "231EAEC2FDB12AA516346F1EB03CA7FB";
  static const uint8_t binary_fingerprint[16]; // = {0x23,0x1E,0xAE,0xC2,0xFD,0xB1,0x2A,0xA5,0x16,0x34,0x6F,0x1E,0xB0,0x3C,0xA7,0xFB};

  device_list_response() {
  }

  virtual ~device_list_response() throw() {}

  std::vector< ::rubetek::proto::imc::deivce_info>  devices;

  _device_list_response__isset __isset;

  void __set_devices(const std::vector< ::rubetek::proto::imc::deivce_info> & val) {
    devices = val;
  }

  bool operator == (const device_list_response & rhs) const
  {
    if (!(devices == rhs.devices))
      return false;
    return true;
  }
  bool operator != (const device_list_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const device_list_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(device_list_response &a, device_list_response &b);

typedef struct _property_list_response__isset {
  _property_list_response__isset() : properties(false) {}
  bool properties;
} _property_list_response__isset;

class property_list_response {
 public:

  static const char* ascii_fingerprint; // = "B1A8A17C6421D3CF338069B0154B392F";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xA8,0xA1,0x7C,0x64,0x21,0xD3,0xCF,0x33,0x80,0x69,0xB0,0x15,0x4B,0x39,0x2F};

  property_list_response() {
  }

  virtual ~property_list_response() throw() {}

  std::vector< ::rubetek::proto::imc::device_properties>  properties;

  _property_list_response__isset __isset;

  void __set_properties(const std::vector< ::rubetek::proto::imc::device_properties> & val) {
    properties = val;
  }

  bool operator == (const property_list_response & rhs) const
  {
    if (!(properties == rhs.properties))
      return false;
    return true;
  }
  bool operator != (const property_list_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const property_list_response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(property_list_response &a, property_list_response &b);

}}} // namespace

#endif
