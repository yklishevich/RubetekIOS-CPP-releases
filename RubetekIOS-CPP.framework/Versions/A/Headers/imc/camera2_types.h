/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef camera2_TYPES_H
#define camera2_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace rubetek { namespace tag { namespace camera2 {

struct COMMAND {
  enum type {
    FIND_CAMERA = 500,
    GET_CAMERA_INFO = 501,
    GET_CAMERA_FULL_INFO = 502,
    REMOVE_CAMERA = 503,
    GET_CAMERA_SNAPSHOT = 504,
    CHANGE_CAMERA_RECORD_MODE = 505
  };
};

extern const std::map<int, const char*> _COMMAND_VALUES_TO_NAMES;

typedef struct _RemoveCamera__isset {
  _RemoveCamera__isset() : id(false) {}
  bool id;
} _RemoveCamera__isset;

class RemoveCamera {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  RemoveCamera() : id() {
  }

  virtual ~RemoveCamera() throw() {}

  std::string id;

  _RemoveCamera__isset __isset;

  void __set_id(const std::string& val) {
    id = val;
  }

  bool operator == (const RemoveCamera & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const RemoveCamera &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoveCamera & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RemoveCamera &a, RemoveCamera &b);

typedef struct _ChangeCameraRecordMode__isset {
  _ChangeCameraRecordMode__isset() : id(false), record_mode(false) {}
  bool id;
  bool record_mode;
} _ChangeCameraRecordMode__isset;

class ChangeCameraRecordMode {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  ChangeCameraRecordMode() : id(), record_mode() {
  }

  virtual ~ChangeCameraRecordMode() throw() {}

  std::string id;
  std::string record_mode;

  _ChangeCameraRecordMode__isset __isset;

  void __set_id(const std::string& val) {
    id = val;
  }

  void __set_record_mode(const std::string& val) {
    record_mode = val;
  }

  bool operator == (const ChangeCameraRecordMode & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(record_mode == rhs.record_mode))
      return false;
    return true;
  }
  bool operator != (const ChangeCameraRecordMode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChangeCameraRecordMode & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ChangeCameraRecordMode &a, ChangeCameraRecordMode &b);

}}} // namespace

#endif
