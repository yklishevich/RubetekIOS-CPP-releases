/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef property_TYPES_H
#define property_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace rubetek { namespace proto { namespace imc {

struct property_type {
  enum type {
    bool_type = 0,
    int_type = 1,
    float_type = 2,
    string_type = 3
  };
};

extern const std::map<int, const char*> _property_type_VALUES_TO_NAMES;

typedef struct _property_bool__isset {
  _property_bool__isset() : value(false) {}
  bool value;
} _property_bool__isset;

class property_bool {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  property_bool() : value(0) {
  }

  virtual ~property_bool() throw() {}

  bool value;

  _property_bool__isset __isset;

  void __set_value(const bool val) {
    value = val;
  }

  bool operator == (const property_bool & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const property_bool &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const property_bool & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(property_bool &a, property_bool &b);

typedef struct _property_int__isset {
  _property_int__isset() : value(false) {}
  bool value;
} _property_int__isset;

class property_int {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  property_int() : value(0) {
  }

  virtual ~property_int() throw() {}

  int32_t value;

  _property_int__isset __isset;

  void __set_value(const int32_t val) {
    value = val;
  }

  bool operator == (const property_int & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const property_int &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const property_int & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(property_int &a, property_int &b);

typedef struct _property_float__isset {
  _property_float__isset() : value(false) {}
  bool value;
} _property_float__isset;

class property_float {
 public:

  static const char* ascii_fingerprint; // = "66FFB53A2471384C03D9F21F6FACA58F";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0xFF,0xB5,0x3A,0x24,0x71,0x38,0x4C,0x03,0xD9,0xF2,0x1F,0x6F,0xAC,0xA5,0x8F};

  property_float() : value(0) {
  }

  virtual ~property_float() throw() {}

  double value;

  _property_float__isset __isset;

  void __set_value(const double val) {
    value = val;
  }

  bool operator == (const property_float & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const property_float &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const property_float & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(property_float &a, property_float &b);

typedef struct _property_string__isset {
  _property_string__isset() : value(false) {}
  bool value;
} _property_string__isset;

class property_string {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  property_string() : value() {
  }

  virtual ~property_string() throw() {}

  std::string value;

  _property_string__isset __isset;

  void __set_value(const std::string& val) {
    value = val;
  }

  bool operator == (const property_string & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const property_string &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const property_string & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(property_string &a, property_string &b);

typedef struct _property_info__isset {
  _property_info__isset() : id(false), type(false) {}
  bool id;
  bool type;
} _property_info__isset;

class property_info {
 public:

  static const char* ascii_fingerprint; // = "20FDD15CF009C5B6C703B6F2C65DFE88";
  static const uint8_t binary_fingerprint[16]; // = {0x20,0xFD,0xD1,0x5C,0xF0,0x09,0xC5,0xB6,0xC7,0x03,0xB6,0xF2,0xC6,0x5D,0xFE,0x88};

  property_info() : id(0), type((property_type::type)0) {
  }

  virtual ~property_info() throw() {}

  int32_t id;
  property_type::type type;

  _property_info__isset __isset;

  void __set_id(const int32_t val) {
    id = val;
  }

  void __set_type(const property_type::type val) {
    type = val;
  }

  bool operator == (const property_info & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const property_info &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const property_info & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(property_info &a, property_info &b);

typedef struct _property_value__isset {
  _property_value__isset() : type(false), value(false) {}
  bool type;
  bool value;
} _property_value__isset;

class property_value {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  property_value() : type((property_type::type)0), value() {
  }

  virtual ~property_value() throw() {}

  property_type::type type;
  std::string value;

  _property_value__isset __isset;

  void __set_type(const property_type::type val) {
    type = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  bool operator == (const property_value & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const property_value &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const property_value & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(property_value &a, property_value &b);

typedef struct _property__isset {
  _property__isset() : id(false), value(false) {}
  bool id;
  bool value;
} _property__isset;

class property {
 public:

  static const char* ascii_fingerprint; // = "BEDFAEB6FA5A907E34E046B6CEEAF4B7";
  static const uint8_t binary_fingerprint[16]; // = {0xBE,0xDF,0xAE,0xB6,0xFA,0x5A,0x90,0x7E,0x34,0xE0,0x46,0xB6,0xCE,0xEA,0xF4,0xB7};

  property() : id(0) {
  }

  virtual ~property() throw() {}

  int32_t id;
  property_value value;

  _property__isset __isset;

  void __set_id(const int32_t val) {
    id = val;
  }

  void __set_value(const property_value& val) {
    value = val;
  }

  bool operator == (const property & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const property &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const property & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(property &a, property &b);

typedef struct _device_properties__isset {
  _device_properties__isset() : address(false), properties(false), module_name(false) {}
  bool address;
  bool properties;
  bool module_name;
} _device_properties__isset;

class device_properties {
 public:

  static const char* ascii_fingerprint; // = "583ABCB2A67C1D4C54CD3DE6C9D19BFB";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x3A,0xBC,0xB2,0xA6,0x7C,0x1D,0x4C,0x54,0xCD,0x3D,0xE6,0xC9,0xD1,0x9B,0xFB};

  device_properties() : address(), module_name() {
  }

  virtual ~device_properties() throw() {}

  std::string address;
  std::vector<property>  properties;
  std::string module_name;

  _device_properties__isset __isset;

  void __set_address(const std::string& val) {
    address = val;
  }

  void __set_properties(const std::vector<property> & val) {
    properties = val;
  }

  void __set_module_name(const std::string& val) {
    module_name = val;
    __isset.module_name = true;
  }

  bool operator == (const device_properties & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    if (!(properties == rhs.properties))
      return false;
    if (__isset.module_name != rhs.__isset.module_name)
      return false;
    else if (__isset.module_name && !(module_name == rhs.module_name))
      return false;
    return true;
  }
  bool operator != (const device_properties &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const device_properties & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(device_properties &a, device_properties &b);

}}} // namespace

#endif
