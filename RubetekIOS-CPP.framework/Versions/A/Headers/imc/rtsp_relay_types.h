/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef rtsp_relay_TYPES_H
#define rtsp_relay_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace rubetek { namespace tag { namespace rtsp_relay {

struct COMMAND {
  enum type {
    MAP_CAMERA = 900,
    MAP_CAMERA_RESPONSE = 901,
    UNMAP_CAMERA = 902,
    UNMAP_CAMERA_RESPONSE = 903,
    GET_ALL_MAPPINGS = 904,
    GET_ALL_MAPPING_RESPONSE = 905
  };
};

extern const std::map<int, const char*> _COMMAND_VALUES_TO_NAMES;

typedef struct _CameraInfo__isset {
  _CameraInfo__isset() : local_url(false), remote_url(false) {}
  bool local_url;
  bool remote_url;
} _CameraInfo__isset;

class CameraInfo {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  CameraInfo() : local_url(), remote_url() {
  }

  virtual ~CameraInfo() throw() {}

  std::string local_url;
  std::string remote_url;

  _CameraInfo__isset __isset;

  void __set_local_url(const std::string& val) {
    local_url = val;
  }

  void __set_remote_url(const std::string& val) {
    remote_url = val;
  }

  bool operator == (const CameraInfo & rhs) const
  {
    if (!(local_url == rhs.local_url))
      return false;
    if (!(remote_url == rhs.remote_url))
      return false;
    return true;
  }
  bool operator != (const CameraInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CameraInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CameraInfo &a, CameraInfo &b);

typedef struct _MapCamera__isset {
  _MapCamera__isset() : cameras(false) {}
  bool cameras;
} _MapCamera__isset;

class MapCamera {
 public:

  static const char* ascii_fingerprint; // = "006EFB9C0A4E436459CDFDF617590BB4";
  static const uint8_t binary_fingerprint[16]; // = {0x00,0x6E,0xFB,0x9C,0x0A,0x4E,0x43,0x64,0x59,0xCD,0xFD,0xF6,0x17,0x59,0x0B,0xB4};

  MapCamera() {
  }

  virtual ~MapCamera() throw() {}

  std::vector<CameraInfo>  cameras;

  _MapCamera__isset __isset;

  void __set_cameras(const std::vector<CameraInfo> & val) {
    cameras = val;
  }

  bool operator == (const MapCamera & rhs) const
  {
    if (!(cameras == rhs.cameras))
      return false;
    return true;
  }
  bool operator != (const MapCamera &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapCamera & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MapCamera &a, MapCamera &b);

typedef struct _MapCameraResponse__isset {
  _MapCameraResponse__isset() : status(false) {}
  bool status;
} _MapCameraResponse__isset;

class MapCameraResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MapCameraResponse() : status(0) {
  }

  virtual ~MapCameraResponse() throw() {}

  bool status;

  _MapCameraResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  bool operator == (const MapCameraResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const MapCameraResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapCameraResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MapCameraResponse &a, MapCameraResponse &b);

typedef struct _UnmapCamera__isset {
  _UnmapCamera__isset() : local_urls(false) {}
  bool local_urls;
} _UnmapCamera__isset;

class UnmapCamera {
 public:

  static const char* ascii_fingerprint; // = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};

  UnmapCamera() {
  }

  virtual ~UnmapCamera() throw() {}

  std::vector<std::string>  local_urls;

  _UnmapCamera__isset __isset;

  void __set_local_urls(const std::vector<std::string> & val) {
    local_urls = val;
  }

  bool operator == (const UnmapCamera & rhs) const
  {
    if (!(local_urls == rhs.local_urls))
      return false;
    return true;
  }
  bool operator != (const UnmapCamera &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UnmapCamera & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UnmapCamera &a, UnmapCamera &b);

}}} // namespace

#endif
