/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef home_builder_TYPES_H
#define home_builder_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace rubetek { namespace tag { namespace homebuilder {

struct COMMAND {
  enum type {
    DEFAULT_VALUE = 0,
    START_ADD_DEVICE = 200,
    START_ADD_DEVICE_RESPONSE = 201,
    ADD_DEVICE_RESPONSE = 202,
    INTERVIEW_RESPONSE = 203,
    START_REMOVE_DEVICE = 204,
    START_REMOVE_DEVICE_RESPONSE = 205,
    REMOVE_DEVICE_RESPONSE = 206,
    CANCEL_OPERATION = 207,
    CANCEL_OPERATION_RESPONSE = 208,
    REMOVE_FAILED = 209,
    REMOVE_FAILED_RESPONSE = 210,
    GET_DEVICE_SETTINGS = 211,
    GET_SETTINGS_RESPONSE = 212,
    SET_DEVICE_SETTINGS = 213,
    SET_SETTING_RESPONSE = 214,
    DELETE_DEVICE = 215,
    DELETE_DEVICE_RESPONSE = 216,
    LIST_DEVICE = 217,
    LIST_DEVICE_RESPONSE = 218,
    RENAME_PROJECT = 219,
    RENAME_PROJECT_RESPONSE = 220,
    RENAME_DEVICE = 221,
    RENAME_DEVICE_RESPONSE = 222,
    ADD_OR_MODIFY_SCRIPT = 223,
    ADD_OR_MODIFY_SCRIPT_RESPONSE = 224,
    LIST_SCRIPT = 225,
    LIST_SCRIPT_RESPONSE = 226,
    ADD_CAMERA = 227,
    ADD_CAMERA_RESPONSE = 228,
    EDIT_CAMERA_SETTINGS = 229,
    EDIT_CAMERA_SETTINGS_RESPONSE = 230,
    LIST_VIDEO_FILES = 231,
    LIST_VIDEO_FILES_RESPONSE = 232,
    GET_PREVIEW_FOR_FILE = 233,
    GET_PREVIEW_FOR_FILE_RESPONSE = 234,
    ADD_INTERCOM = 237,
    ADD_INTERCOM_RESPONSE = 238,
    GET_SCRIPT_BY_ID = 239,
    GET_SCRIPT_BY_ID_RESPONSE = 240,
    FIND_CAMERA = 250,
    FIND_CAMERA_RESPONSE = 251,
    GET_CAMERA_INFO = 252,
    GET_CAMERA_INFO_RESPONSE = 253,
    GET_CAMERA_FULL_INFO = 254,
    GET_CAMERA_FULL_INFO_RESPONSE = 255,
    ADD_TOKEN = 256,
    ADD_TOKEN_RESPONSE = 257,
    LIST_TOKEN = 258,
    LIST_TOKEN_RESPONSE = 259,
    RF_FOUND_DEVICE = 260,
    ADD_RF_DEVICE_BY_TYPE = 261,
    ADD_RF_DEVICE_BY_TYPE_RESPONSE = 262,
    GET_CC_SERVER = 263,
    GET_CC_SERVER_RESPONSE = 264,
    GET_VIDEO_FILES = 265,
    GET_VIDEO_FILES_RESPONSE = 266,
    GET_CAMERA_SNAPSHOT = 267,
    GET_CAMERA_SNAPSHOT_RESPONSE = 268,
    GET_NODES_INFO = 269,
    GET_NODES_INFO_RESPONSE = 270,
    SET_RULES = 271,
    SET_RULES_RESPONSE = 272,
    GET_RULES = 273,
    GET_RULES_RESPONSE = 274,
    ADD_EMULATOR_DEVICE = 275,
    ADD_EMULATOR_DEVICE_RESPONSE = 276,
    SET_PROJECT_SETTING = 277,
    SET_PROJECT_SETTING_RESPONSE = 278,
    LIST_PROJECT_SETTING = 279,
    LIST_PROJECT_SETTING_RESPONSE = 280,
    ADD_WIFI_DEVICE = 281,
    ADD_WIFI_DEVICE_RESPONSE = 282
  };
};

extern const std::map<int, const char*> _COMMAND_VALUES_TO_NAMES;

struct PropertyAccess {
  enum type {
    paRead = 0,
    paWrite = 1,
    paReadWrite = 2
  };
};

extern const std::map<int, const char*> _PropertyAccess_VALUES_TO_NAMES;

struct ConditionType {
  enum type {
    ctDevice = 0,
    ctVariable = 1,
    ctTime = 2,
    ctDaysOfWeek = 3,
    ctCountedEnergy = 4
  };
};

extern const std::map<int, const char*> _ConditionType_VALUES_TO_NAMES;

struct OperationType {
  enum type {
    otEqual = 0,
    otNotEqual = 1,
    otGreater = 2,
    otLess = 3,
    otGreateOrEqual = 4,
    otLessOrEqual = 5,
    otAssigment = 6,
    otAddition = 7,
    otSubtraction = 8,
    otMultiplication = 9,
    otDivision = 10,
    otAnd = 11,
    otOr = 12
  };
};

extern const std::map<int, const char*> _OperationType_VALUES_TO_NAMES;

struct TimerLogic {
  enum type {
    tlStrict = 0,
    tlLastExecution = 1
  };
};

extern const std::map<int, const char*> _TimerLogic_VALUES_TO_NAMES;

struct CountedInterval {
  enum type {
    ciLastDay = 0,
    ciLastWeek = 1,
    ciLastMonth = 2,
    ciLastYear = 3,
    ciAll = 4
  };
};

extern const std::map<int, const char*> _CountedInterval_VALUES_TO_NAMES;

struct DayOfWeek {
  enum type {
    dwSunday = 1,
    dwMonday = 2,
    dwTuesday = 3,
    dwWednesday = 4,
    dwThursday = 5,
    dwFriday = 6,
    dwSaturday = 7
  };
};

extern const std::map<int, const char*> _DayOfWeek_VALUES_TO_NAMES;

struct ActionType {
  enum type {
    atDevice = 0,
    atVariable = 1,
    atNotify = 2,
    atSnapShot = 3,
    atVideoSlice = 4
  };
};

extern const std::map<int, const char*> _ActionType_VALUES_TO_NAMES;

struct NotifyType {
  enum type {
    ntSms = 0,
    ntPush = 1
  };
};

extern const std::map<int, const char*> _NotifyType_VALUES_TO_NAMES;

typedef struct _StartAddDevice__isset {
  _StartAddDevice__isset() : module_name(false), expected_types(false) {}
  bool module_name;
  bool expected_types;
} _StartAddDevice__isset;

class StartAddDevice {
 public:

  static const char* ascii_fingerprint; // = "25702B8D5E28AA39160F267DABBC8446";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0x70,0x2B,0x8D,0x5E,0x28,0xAA,0x39,0x16,0x0F,0x26,0x7D,0xAB,0xBC,0x84,0x46};

  StartAddDevice() : module_name() {
  }

  virtual ~StartAddDevice() throw() {}

  std::string module_name;
  std::vector<std::string>  expected_types;

  _StartAddDevice__isset __isset;

  void __set_module_name(const std::string& val) {
    module_name = val;
  }

  void __set_expected_types(const std::vector<std::string> & val) {
    expected_types = val;
  }

  bool operator == (const StartAddDevice & rhs) const
  {
    if (!(module_name == rhs.module_name))
      return false;
    if (!(expected_types == rhs.expected_types))
      return false;
    return true;
  }
  bool operator != (const StartAddDevice &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StartAddDevice & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StartAddDevice &a, StartAddDevice &b);

typedef struct _ProjectInfo__isset {
  _ProjectInfo__isset() : name(false) {}
  bool name;
} _ProjectInfo__isset;

class ProjectInfo {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ProjectInfo() : name() {
  }

  virtual ~ProjectInfo() throw() {}

  std::string name;

  _ProjectInfo__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const ProjectInfo & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const ProjectInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProjectInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ProjectInfo &a, ProjectInfo &b);

typedef struct _RenameProjectResponse__isset {
  _RenameProjectResponse__isset() : status(false) {}
  bool status;
} _RenameProjectResponse__isset;

class RenameProjectResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  RenameProjectResponse() : status(0) {
  }

  virtual ~RenameProjectResponse() throw() {}

  bool status;

  _RenameProjectResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  bool operator == (const RenameProjectResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const RenameProjectResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RenameProjectResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RenameProjectResponse &a, RenameProjectResponse &b);

typedef struct _NodeInfo__isset {
  _NodeInfo__isset() : node_id(false) {}
  bool node_id;
} _NodeInfo__isset;

class NodeInfo {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  NodeInfo() : node_id(0) {
  }

  virtual ~NodeInfo() throw() {}

  int8_t node_id;

  _NodeInfo__isset __isset;

  void __set_node_id(const int8_t val) {
    node_id = val;
  }

  bool operator == (const NodeInfo & rhs) const
  {
    if (!(node_id == rhs.node_id))
      return false;
    return true;
  }
  bool operator != (const NodeInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NodeInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NodeInfo &a, NodeInfo &b);

typedef struct _DeviceInfo__isset {
  _DeviceInfo__isset() : device_id(false), device_name(false), module_name(false) {}
  bool device_id;
  bool device_name;
  bool module_name;
} _DeviceInfo__isset;

class DeviceInfo {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  DeviceInfo() : device_id(), device_name(), module_name() {
  }

  virtual ~DeviceInfo() throw() {}

  std::string device_id;
  std::string device_name;
  std::string module_name;

  _DeviceInfo__isset __isset;

  void __set_device_id(const std::string& val) {
    device_id = val;
  }

  void __set_device_name(const std::string& val) {
    device_name = val;
  }

  void __set_module_name(const std::string& val) {
    module_name = val;
  }

  bool operator == (const DeviceInfo & rhs) const
  {
    if (!(device_id == rhs.device_id))
      return false;
    if (!(device_name == rhs.device_name))
      return false;
    if (!(module_name == rhs.module_name))
      return false;
    return true;
  }
  bool operator != (const DeviceInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DeviceInfo &a, DeviceInfo &b);

typedef struct _DeleteDeviceResponse__isset {
  _DeleteDeviceResponse__isset() : status(false), error(false), device_id(false) {}
  bool status;
  bool error;
  bool device_id;
} _DeleteDeviceResponse__isset;

class DeleteDeviceResponse {
 public:

  static const char* ascii_fingerprint; // = "DC8F62AF23854A1A6849A2A157CCCA65";
  static const uint8_t binary_fingerprint[16]; // = {0xDC,0x8F,0x62,0xAF,0x23,0x85,0x4A,0x1A,0x68,0x49,0xA2,0xA1,0x57,0xCC,0xCA,0x65};

  DeleteDeviceResponse() : status(0), error(), device_id() {
  }

  virtual ~DeleteDeviceResponse() throw() {}

  bool status;
  std::string error;
  std::string device_id;

  _DeleteDeviceResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_error(const std::string& val) {
    error = val;
  }

  void __set_device_id(const std::string& val) {
    device_id = val;
  }

  bool operator == (const DeleteDeviceResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(error == rhs.error))
      return false;
    if (!(device_id == rhs.device_id))
      return false;
    return true;
  }
  bool operator != (const DeleteDeviceResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteDeviceResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DeleteDeviceResponse &a, DeleteDeviceResponse &b);

typedef struct _GetDeviceSettings__isset {
  _GetDeviceSettings__isset() : device(false), locale(false) {}
  bool device;
  bool locale;
} _GetDeviceSettings__isset;

class GetDeviceSettings {
 public:

  static const char* ascii_fingerprint; // = "EABB4035A1D4D396F89BA78BCA56537A";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0xBB,0x40,0x35,0xA1,0xD4,0xD3,0x96,0xF8,0x9B,0xA7,0x8B,0xCA,0x56,0x53,0x7A};

  GetDeviceSettings() : locale() {
  }

  virtual ~GetDeviceSettings() throw() {}

  DeviceInfo device;
  std::string locale;

  _GetDeviceSettings__isset __isset;

  void __set_device(const DeviceInfo& val) {
    device = val;
  }

  void __set_locale(const std::string& val) {
    locale = val;
  }

  bool operator == (const GetDeviceSettings & rhs) const
  {
    if (!(device == rhs.device))
      return false;
    if (!(locale == rhs.locale))
      return false;
    return true;
  }
  bool operator != (const GetDeviceSettings &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetDeviceSettings & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetDeviceSettings &a, GetDeviceSettings &b);

typedef struct _ListItem__isset {
  _ListItem__isset() : item_label(false), item_value(false) {}
  bool item_label;
  bool item_value;
} _ListItem__isset;

class ListItem {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  ListItem() : item_label(), item_value() {
  }

  virtual ~ListItem() throw() {}

  std::string item_label;
  std::string item_value;

  _ListItem__isset __isset;

  void __set_item_label(const std::string& val) {
    item_label = val;
  }

  void __set_item_value(const std::string& val) {
    item_value = val;
  }

  bool operator == (const ListItem & rhs) const
  {
    if (!(item_label == rhs.item_label))
      return false;
    if (!(item_value == rhs.item_value))
      return false;
    return true;
  }
  bool operator != (const ListItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ListItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ListItem &a, ListItem &b);

typedef struct _Setting__isset {
  _Setting__isset() : label(false), help(false), id(false), type(false), items(false), value(false), value_min(false), value_max(false), is_read_only(false), is_write_only(false), size(false) {}
  bool label;
  bool help;
  bool id;
  bool type;
  bool items;
  bool value;
  bool value_min;
  bool value_max;
  bool is_read_only;
  bool is_write_only;
  bool size;
} _Setting__isset;

class Setting {
 public:

  static const char* ascii_fingerprint; // = "C7D6A8C25A71A76A91D4FC57DD2CA42B";
  static const uint8_t binary_fingerprint[16]; // = {0xC7,0xD6,0xA8,0xC2,0x5A,0x71,0xA7,0x6A,0x91,0xD4,0xFC,0x57,0xDD,0x2C,0xA4,0x2B};

  Setting() : label(), help(), id(0), type(), value(), value_min(), value_max(), is_read_only(0), is_write_only(0), size(0) {
  }

  virtual ~Setting() throw() {}

  std::string label;
  std::string help;
  int8_t id;
  std::string type;
  std::vector<ListItem>  items;
  std::string value;
  std::string value_min;
  std::string value_max;
  bool is_read_only;
  bool is_write_only;
  int8_t size;

  _Setting__isset __isset;

  void __set_label(const std::string& val) {
    label = val;
  }

  void __set_help(const std::string& val) {
    help = val;
  }

  void __set_id(const int8_t val) {
    id = val;
  }

  void __set_type(const std::string& val) {
    type = val;
  }

  void __set_items(const std::vector<ListItem> & val) {
    items = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  void __set_value_min(const std::string& val) {
    value_min = val;
  }

  void __set_value_max(const std::string& val) {
    value_max = val;
  }

  void __set_is_read_only(const bool val) {
    is_read_only = val;
  }

  void __set_is_write_only(const bool val) {
    is_write_only = val;
  }

  void __set_size(const int8_t val) {
    size = val;
  }

  bool operator == (const Setting & rhs) const
  {
    if (!(label == rhs.label))
      return false;
    if (!(help == rhs.help))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(items == rhs.items))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(value_min == rhs.value_min))
      return false;
    if (!(value_max == rhs.value_max))
      return false;
    if (!(is_read_only == rhs.is_read_only))
      return false;
    if (!(is_write_only == rhs.is_write_only))
      return false;
    if (!(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const Setting &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Setting & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Setting &a, Setting &b);

typedef struct _Timeout__isset {
  _Timeout__isset() : label(false), value(false) {}
  bool label;
  bool value;
} _Timeout__isset;

class Timeout {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  Timeout() : label(), value(0) {
  }

  virtual ~Timeout() throw() {}

  std::string label;
  int32_t value;

  _Timeout__isset __isset;

  void __set_label(const std::string& val) {
    label = val;
  }

  void __set_value(const int32_t val) {
    value = val;
  }

  bool operator == (const Timeout & rhs) const
  {
    if (!(label == rhs.label))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const Timeout &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Timeout & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Timeout &a, Timeout &b);

typedef struct _GetDeviceSettingsResponse__isset {
  _GetDeviceSettingsResponse__isset() : status(false), node_id(false), manufacturer_id(false), product_type(false), product_id(false), settings(false), timeout(false) {}
  bool status;
  bool node_id;
  bool manufacturer_id;
  bool product_type;
  bool product_id;
  bool settings;
  bool timeout;
} _GetDeviceSettingsResponse__isset;

class GetDeviceSettingsResponse {
 public:

  static const char* ascii_fingerprint; // = "F2DC4976EC9572C4ED7143E8AD250F07";
  static const uint8_t binary_fingerprint[16]; // = {0xF2,0xDC,0x49,0x76,0xEC,0x95,0x72,0xC4,0xED,0x71,0x43,0xE8,0xAD,0x25,0x0F,0x07};

  GetDeviceSettingsResponse() : status(0), node_id(0), manufacturer_id(0), product_type(0), product_id(0) {
  }

  virtual ~GetDeviceSettingsResponse() throw() {}

  bool status;
  int8_t node_id;
  int32_t manufacturer_id;
  int32_t product_type;
  int32_t product_id;
  std::vector<Setting>  settings;
  Timeout timeout;

  _GetDeviceSettingsResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_node_id(const int8_t val) {
    node_id = val;
  }

  void __set_manufacturer_id(const int32_t val) {
    manufacturer_id = val;
  }

  void __set_product_type(const int32_t val) {
    product_type = val;
  }

  void __set_product_id(const int32_t val) {
    product_id = val;
  }

  void __set_settings(const std::vector<Setting> & val) {
    settings = val;
  }

  void __set_timeout(const Timeout& val) {
    timeout = val;
    __isset.timeout = true;
  }

  bool operator == (const GetDeviceSettingsResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(node_id == rhs.node_id))
      return false;
    if (!(manufacturer_id == rhs.manufacturer_id))
      return false;
    if (!(product_type == rhs.product_type))
      return false;
    if (!(product_id == rhs.product_id))
      return false;
    if (!(settings == rhs.settings))
      return false;
    if (__isset.timeout != rhs.__isset.timeout)
      return false;
    else if (__isset.timeout && !(timeout == rhs.timeout))
      return false;
    return true;
  }
  bool operator != (const GetDeviceSettingsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetDeviceSettingsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetDeviceSettingsResponse &a, GetDeviceSettingsResponse &b);

typedef struct _SettingLite__isset {
  _SettingLite__isset() : id(false), value(false) {}
  bool id;
  bool value;
} _SettingLite__isset;

class SettingLite {
 public:

  static const char* ascii_fingerprint; // = "EFFD9F67D6D23CD85DFFD381B41885B5";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xFD,0x9F,0x67,0xD6,0xD2,0x3C,0xD8,0x5D,0xFF,0xD3,0x81,0xB4,0x18,0x85,0xB5};

  SettingLite() : id(0), value(0) {
  }

  virtual ~SettingLite() throw() {}

  int8_t id;
  int32_t value;

  _SettingLite__isset __isset;

  void __set_id(const int8_t val) {
    id = val;
  }

  void __set_value(const int32_t val) {
    value = val;
  }

  bool operator == (const SettingLite & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const SettingLite &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingLite & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SettingLite &a, SettingLite &b);

typedef struct _SetDeviceSettings__isset {
  _SetDeviceSettings__isset() : device_id(false), modified_settings(false), timeout(false) {}
  bool device_id;
  bool modified_settings;
  bool timeout;
} _SetDeviceSettings__isset;

class SetDeviceSettings {
 public:

  static const char* ascii_fingerprint; // = "2C4881BB33235A6069652280339D1571";
  static const uint8_t binary_fingerprint[16]; // = {0x2C,0x48,0x81,0xBB,0x33,0x23,0x5A,0x60,0x69,0x65,0x22,0x80,0x33,0x9D,0x15,0x71};

  SetDeviceSettings() : device_id(0) {
  }

  virtual ~SetDeviceSettings() throw() {}

  int32_t device_id;
  std::vector<SettingLite>  modified_settings;
  Timeout timeout;

  _SetDeviceSettings__isset __isset;

  void __set_device_id(const int32_t val) {
    device_id = val;
  }

  void __set_modified_settings(const std::vector<SettingLite> & val) {
    modified_settings = val;
  }

  void __set_timeout(const Timeout& val) {
    timeout = val;
    __isset.timeout = true;
  }

  bool operator == (const SetDeviceSettings & rhs) const
  {
    if (!(device_id == rhs.device_id))
      return false;
    if (!(modified_settings == rhs.modified_settings))
      return false;
    if (__isset.timeout != rhs.__isset.timeout)
      return false;
    else if (__isset.timeout && !(timeout == rhs.timeout))
      return false;
    return true;
  }
  bool operator != (const SetDeviceSettings &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetDeviceSettings & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetDeviceSettings &a, SetDeviceSettings &b);

typedef struct _SetDeviceSettingsResponse__isset {
  _SetDeviceSettingsResponse__isset() : status(false), node_id(false), message(false) {}
  bool status;
  bool node_id;
  bool message;
} _SetDeviceSettingsResponse__isset;

class SetDeviceSettingsResponse {
 public:

  static const char* ascii_fingerprint; // = "E35734C17C54916030F3D4FF83727A14";
  static const uint8_t binary_fingerprint[16]; // = {0xE3,0x57,0x34,0xC1,0x7C,0x54,0x91,0x60,0x30,0xF3,0xD4,0xFF,0x83,0x72,0x7A,0x14};

  SetDeviceSettingsResponse() : status(0), node_id(0), message() {
  }

  virtual ~SetDeviceSettingsResponse() throw() {}

  bool status;
  int8_t node_id;
  std::string message;

  _SetDeviceSettingsResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_node_id(const int8_t val) {
    node_id = val;
  }

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const SetDeviceSettingsResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(node_id == rhs.node_id))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const SetDeviceSettingsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetDeviceSettingsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetDeviceSettingsResponse &a, SetDeviceSettingsResponse &b);

typedef struct _RenameDeviceResponse__isset {
  _RenameDeviceResponse__isset() : status(false) {}
  bool status;
} _RenameDeviceResponse__isset;

class RenameDeviceResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  RenameDeviceResponse() : status(0) {
  }

  virtual ~RenameDeviceResponse() throw() {}

  bool status;

  _RenameDeviceResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  bool operator == (const RenameDeviceResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const RenameDeviceResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RenameDeviceResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RenameDeviceResponse &a, RenameDeviceResponse &b);

typedef struct _Property__isset {
  _Property__isset() : property_id(false), property_name(false), property_type(false), property_access(false) {}
  bool property_id;
  bool property_name;
  bool property_type;
  bool property_access;
} _Property__isset;

class Property {
 public:

  static const char* ascii_fingerprint; // = "B2F538B973B50AC9998D9FCB4B126BE9";
  static const uint8_t binary_fingerprint[16]; // = {0xB2,0xF5,0x38,0xB9,0x73,0xB5,0x0A,0xC9,0x99,0x8D,0x9F,0xCB,0x4B,0x12,0x6B,0xE9};

  Property() : property_id(0), property_name(), property_type(), property_access((PropertyAccess::type)0) {
  }

  virtual ~Property() throw() {}

  int8_t property_id;
  std::string property_name;
  std::string property_type;
  PropertyAccess::type property_access;

  _Property__isset __isset;

  void __set_property_id(const int8_t val) {
    property_id = val;
  }

  void __set_property_name(const std::string& val) {
    property_name = val;
  }

  void __set_property_type(const std::string& val) {
    property_type = val;
  }

  void __set_property_access(const PropertyAccess::type val) {
    property_access = val;
  }

  bool operator == (const Property & rhs) const
  {
    if (!(property_id == rhs.property_id))
      return false;
    if (!(property_name == rhs.property_name))
      return false;
    if (!(property_type == rhs.property_type))
      return false;
    if (!(property_access == rhs.property_access))
      return false;
    return true;
  }
  bool operator != (const Property &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Property & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Property &a, Property &b);

typedef struct _Device__isset {
  _Device__isset() : device_id(false), device_name(false), module_name(false), device_type(false), model_name(false), properties(false), parent_id(false) {}
  bool device_id;
  bool device_name;
  bool module_name;
  bool device_type;
  bool model_name;
  bool properties;
  bool parent_id;
} _Device__isset;

class Device {
 public:

  static const char* ascii_fingerprint; // = "263ED0AD09FAD1FC4686A2D8316319AC";
  static const uint8_t binary_fingerprint[16]; // = {0x26,0x3E,0xD0,0xAD,0x09,0xFA,0xD1,0xFC,0x46,0x86,0xA2,0xD8,0x31,0x63,0x19,0xAC};

  Device() : device_id(), device_name(), module_name(), device_type(), model_name(), parent_id() {
  }

  virtual ~Device() throw() {}

  std::string device_id;
  std::string device_name;
  std::string module_name;
  std::string device_type;
  std::string model_name;
  std::vector<Property>  properties;
  std::string parent_id;

  _Device__isset __isset;

  void __set_device_id(const std::string& val) {
    device_id = val;
  }

  void __set_device_name(const std::string& val) {
    device_name = val;
  }

  void __set_module_name(const std::string& val) {
    module_name = val;
  }

  void __set_device_type(const std::string& val) {
    device_type = val;
  }

  void __set_model_name(const std::string& val) {
    model_name = val;
  }

  void __set_properties(const std::vector<Property> & val) {
    properties = val;
  }

  void __set_parent_id(const std::string& val) {
    parent_id = val;
  }

  bool operator == (const Device & rhs) const
  {
    if (!(device_id == rhs.device_id))
      return false;
    if (!(device_name == rhs.device_name))
      return false;
    if (!(module_name == rhs.module_name))
      return false;
    if (!(device_type == rhs.device_type))
      return false;
    if (!(model_name == rhs.model_name))
      return false;
    if (!(properties == rhs.properties))
      return false;
    if (!(parent_id == rhs.parent_id))
      return false;
    return true;
  }
  bool operator != (const Device &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Device & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Device &a, Device &b);

typedef struct _ListDeviceResponse__isset {
  _ListDeviceResponse__isset() : status(false), devices(false), cc_id(false) {}
  bool status;
  bool devices;
  bool cc_id;
} _ListDeviceResponse__isset;

class ListDeviceResponse {
 public:

  static const char* ascii_fingerprint; // = "80769A389D8B959AF8953607D6714230";
  static const uint8_t binary_fingerprint[16]; // = {0x80,0x76,0x9A,0x38,0x9D,0x8B,0x95,0x9A,0xF8,0x95,0x36,0x07,0xD6,0x71,0x42,0x30};

  ListDeviceResponse() : status(0), cc_id() {
  }

  virtual ~ListDeviceResponse() throw() {}

  bool status;
  std::vector<Device>  devices;
  std::string cc_id;

  _ListDeviceResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_devices(const std::vector<Device> & val) {
    devices = val;
  }

  void __set_cc_id(const std::string& val) {
    cc_id = val;
  }

  bool operator == (const ListDeviceResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(devices == rhs.devices))
      return false;
    if (!(cc_id == rhs.cc_id))
      return false;
    return true;
  }
  bool operator != (const ListDeviceResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ListDeviceResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ListDeviceResponse &a, ListDeviceResponse &b);

typedef struct _StartAddDeviceResponse__isset {
  _StartAddDeviceResponse__isset() : status(false), error(false), module_name(false) {}
  bool status;
  bool error;
  bool module_name;
} _StartAddDeviceResponse__isset;

class StartAddDeviceResponse {
 public:

  static const char* ascii_fingerprint; // = "DC8F62AF23854A1A6849A2A157CCCA65";
  static const uint8_t binary_fingerprint[16]; // = {0xDC,0x8F,0x62,0xAF,0x23,0x85,0x4A,0x1A,0x68,0x49,0xA2,0xA1,0x57,0xCC,0xCA,0x65};

  StartAddDeviceResponse() : status(0), error(), module_name() {
  }

  virtual ~StartAddDeviceResponse() throw() {}

  bool status;
  std::string error;
  std::string module_name;

  _StartAddDeviceResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_error(const std::string& val) {
    error = val;
  }

  void __set_module_name(const std::string& val) {
    module_name = val;
  }

  bool operator == (const StartAddDeviceResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(error == rhs.error))
      return false;
    if (!(module_name == rhs.module_name))
      return false;
    return true;
  }
  bool operator != (const StartAddDeviceResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StartAddDeviceResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StartAddDeviceResponse &a, StartAddDeviceResponse &b);

typedef struct _StartRemoveDeviceResponse__isset {
  _StartRemoveDeviceResponse__isset() : status(false), error(false) {}
  bool status;
  bool error;
} _StartRemoveDeviceResponse__isset;

class StartRemoveDeviceResponse {
 public:

  static const char* ascii_fingerprint; // = "1767FFB0CB3D9275BC64B198AB3B8A8B";
  static const uint8_t binary_fingerprint[16]; // = {0x17,0x67,0xFF,0xB0,0xCB,0x3D,0x92,0x75,0xBC,0x64,0xB1,0x98,0xAB,0x3B,0x8A,0x8B};

  StartRemoveDeviceResponse() : status(0), error() {
  }

  virtual ~StartRemoveDeviceResponse() throw() {}

  bool status;
  std::string error;

  _StartRemoveDeviceResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_error(const std::string& val) {
    error = val;
  }

  bool operator == (const StartRemoveDeviceResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const StartRemoveDeviceResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StartRemoveDeviceResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StartRemoveDeviceResponse &a, StartRemoveDeviceResponse &b);

typedef struct _AddDeviceResponse__isset {
  _AddDeviceResponse__isset() : status(false), node_id(false), error(false), module_name(false), new_device(false) {}
  bool status;
  bool node_id;
  bool error;
  bool module_name;
  bool new_device;
} _AddDeviceResponse__isset;

class AddDeviceResponse {
 public:

  static const char* ascii_fingerprint; // = "48C27BDF9195FCD0F66E56EF7A71E319";
  static const uint8_t binary_fingerprint[16]; // = {0x48,0xC2,0x7B,0xDF,0x91,0x95,0xFC,0xD0,0xF6,0x6E,0x56,0xEF,0x7A,0x71,0xE3,0x19};

  AddDeviceResponse() : status(0), node_id(0), error(), module_name(), new_device(0) {
  }

  virtual ~AddDeviceResponse() throw() {}

  bool status;
  int8_t node_id;
  std::string error;
  std::string module_name;
  bool new_device;

  _AddDeviceResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_node_id(const int8_t val) {
    node_id = val;
  }

  void __set_error(const std::string& val) {
    error = val;
  }

  void __set_module_name(const std::string& val) {
    module_name = val;
  }

  void __set_new_device(const bool val) {
    new_device = val;
  }

  bool operator == (const AddDeviceResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(node_id == rhs.node_id))
      return false;
    if (!(error == rhs.error))
      return false;
    if (!(module_name == rhs.module_name))
      return false;
    if (!(new_device == rhs.new_device))
      return false;
    return true;
  }
  bool operator != (const AddDeviceResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddDeviceResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AddDeviceResponse &a, AddDeviceResponse &b);

typedef struct _RemoveDeviceResponse__isset {
  _RemoveDeviceResponse__isset() : status(false), error(false), removed_devices(false) {}
  bool status;
  bool error;
  bool removed_devices;
} _RemoveDeviceResponse__isset;

class RemoveDeviceResponse {
 public:

  static const char* ascii_fingerprint; // = "9A7EA49D8DFC35C9972B3D9DD14CEAC5";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x7E,0xA4,0x9D,0x8D,0xFC,0x35,0xC9,0x97,0x2B,0x3D,0x9D,0xD1,0x4C,0xEA,0xC5};

  RemoveDeviceResponse() : status(0), error() {
  }

  virtual ~RemoveDeviceResponse() throw() {}

  bool status;
  std::string error;
  std::vector<std::string>  removed_devices;

  _RemoveDeviceResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_error(const std::string& val) {
    error = val;
  }

  void __set_removed_devices(const std::vector<std::string> & val) {
    removed_devices = val;
  }

  bool operator == (const RemoveDeviceResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(error == rhs.error))
      return false;
    if (!(removed_devices == rhs.removed_devices))
      return false;
    return true;
  }
  bool operator != (const RemoveDeviceResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoveDeviceResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RemoveDeviceResponse &a, RemoveDeviceResponse &b);

typedef struct _CancelOperationResponse__isset {
  _CancelOperationResponse__isset() : status(false), error(false), module_name(false) {}
  bool status;
  bool error;
  bool module_name;
} _CancelOperationResponse__isset;

class CancelOperationResponse {
 public:

  static const char* ascii_fingerprint; // = "DC8F62AF23854A1A6849A2A157CCCA65";
  static const uint8_t binary_fingerprint[16]; // = {0xDC,0x8F,0x62,0xAF,0x23,0x85,0x4A,0x1A,0x68,0x49,0xA2,0xA1,0x57,0xCC,0xCA,0x65};

  CancelOperationResponse() : status(0), error(), module_name() {
  }

  virtual ~CancelOperationResponse() throw() {}

  bool status;
  std::string error;
  std::string module_name;

  _CancelOperationResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_error(const std::string& val) {
    error = val;
  }

  void __set_module_name(const std::string& val) {
    module_name = val;
  }

  bool operator == (const CancelOperationResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(error == rhs.error))
      return false;
    if (!(module_name == rhs.module_name))
      return false;
    return true;
  }
  bool operator != (const CancelOperationResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CancelOperationResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CancelOperationResponse &a, CancelOperationResponse &b);

typedef struct _RemoveFailedDeviceResponse__isset {
  _RemoveFailedDeviceResponse__isset() : status(false), node_id(false), error(false) {}
  bool status;
  bool node_id;
  bool error;
} _RemoveFailedDeviceResponse__isset;

class RemoveFailedDeviceResponse {
 public:

  static const char* ascii_fingerprint; // = "E35734C17C54916030F3D4FF83727A14";
  static const uint8_t binary_fingerprint[16]; // = {0xE3,0x57,0x34,0xC1,0x7C,0x54,0x91,0x60,0x30,0xF3,0xD4,0xFF,0x83,0x72,0x7A,0x14};

  RemoveFailedDeviceResponse() : status(0), node_id(0), error() {
  }

  virtual ~RemoveFailedDeviceResponse() throw() {}

  bool status;
  int8_t node_id;
  std::string error;

  _RemoveFailedDeviceResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_node_id(const int8_t val) {
    node_id = val;
  }

  void __set_error(const std::string& val) {
    error = val;
  }

  bool operator == (const RemoveFailedDeviceResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(node_id == rhs.node_id))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const RemoveFailedDeviceResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoveFailedDeviceResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RemoveFailedDeviceResponse &a, RemoveFailedDeviceResponse &b);

typedef struct _Instances__isset {
  _Instances__isset() : instance_id(false), type(false) {}
  bool instance_id;
  bool type;
} _Instances__isset;

class Instances {
 public:

  static const char* ascii_fingerprint; // = "D3B91891CF1F31392E7E70F167226591";
  static const uint8_t binary_fingerprint[16]; // = {0xD3,0xB9,0x18,0x91,0xCF,0x1F,0x31,0x39,0x2E,0x7E,0x70,0xF1,0x67,0x22,0x65,0x91};

  Instances() : instance_id(0), type(0) {
  }

  virtual ~Instances() throw() {}

  int8_t instance_id;
  int8_t type;

  _Instances__isset __isset;

  void __set_instance_id(const int8_t val) {
    instance_id = val;
  }

  void __set_type(const int8_t val) {
    type = val;
  }

  bool operator == (const Instances & rhs) const
  {
    if (!(instance_id == rhs.instance_id))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const Instances &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Instances & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Instances &a, Instances &b);

typedef struct _InterviewComplete__isset {
  _InterviewComplete__isset() : status(false), node_id(false), model(false), instances(false), module_name(false) {}
  bool status;
  bool node_id;
  bool model;
  bool instances;
  bool module_name;
} _InterviewComplete__isset;

class InterviewComplete {
 public:

  static const char* ascii_fingerprint; // = "57AA8A1A38E73562CF50256B5F9DD266";
  static const uint8_t binary_fingerprint[16]; // = {0x57,0xAA,0x8A,0x1A,0x38,0xE7,0x35,0x62,0xCF,0x50,0x25,0x6B,0x5F,0x9D,0xD2,0x66};

  InterviewComplete() : status(0), node_id(0), model(), module_name() {
  }

  virtual ~InterviewComplete() throw() {}

  bool status;
  int8_t node_id;
  std::string model;
  std::vector<Instances>  instances;
  std::string module_name;

  _InterviewComplete__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_node_id(const int8_t val) {
    node_id = val;
  }

  void __set_model(const std::string& val) {
    model = val;
  }

  void __set_instances(const std::vector<Instances> & val) {
    instances = val;
  }

  void __set_module_name(const std::string& val) {
    module_name = val;
  }

  bool operator == (const InterviewComplete & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(node_id == rhs.node_id))
      return false;
    if (!(model == rhs.model))
      return false;
    if (!(instances == rhs.instances))
      return false;
    if (!(module_name == rhs.module_name))
      return false;
    return true;
  }
  bool operator != (const InterviewComplete &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InterviewComplete & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(InterviewComplete &a, InterviewComplete &b);

typedef struct _Camera__isset {
  _Camera__isset() : name(false), ip_address(false), port(false), hq_url(false), mq_url(false), lq_url(false), login(false), password(false), mask(false), uuid(false), model(false), onvif_login(false), onvif_password(false), serial_number(false) {}
  bool name;
  bool ip_address;
  bool port;
  bool hq_url;
  bool mq_url;
  bool lq_url;
  bool login;
  bool password;
  bool mask;
  bool uuid;
  bool model;
  bool onvif_login;
  bool onvif_password;
  bool serial_number;
} _Camera__isset;

class Camera {
 public:

  static const char* ascii_fingerprint; // = "FC9779B17313690DE08EADF981D526B8";
  static const uint8_t binary_fingerprint[16]; // = {0xFC,0x97,0x79,0xB1,0x73,0x13,0x69,0x0D,0xE0,0x8E,0xAD,0xF9,0x81,0xD5,0x26,0xB8};

  Camera() : name(), ip_address(), port(0), hq_url(), mq_url(), lq_url(), login(), password(), mask(), uuid(), model(), onvif_login(), onvif_password(), serial_number() {
  }

  virtual ~Camera() throw() {}

  std::string name;
  std::string ip_address;
  int16_t port;
  std::string hq_url;
  std::string mq_url;
  std::string lq_url;
  std::string login;
  std::string password;
  std::string mask;
  std::string uuid;
  std::string model;
  std::string onvif_login;
  std::string onvif_password;
  std::string serial_number;

  _Camera__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_ip_address(const std::string& val) {
    ip_address = val;
  }

  void __set_port(const int16_t val) {
    port = val;
  }

  void __set_hq_url(const std::string& val) {
    hq_url = val;
  }

  void __set_mq_url(const std::string& val) {
    mq_url = val;
  }

  void __set_lq_url(const std::string& val) {
    lq_url = val;
  }

  void __set_login(const std::string& val) {
    login = val;
  }

  void __set_password(const std::string& val) {
    password = val;
  }

  void __set_mask(const std::string& val) {
    mask = val;
  }

  void __set_uuid(const std::string& val) {
    uuid = val;
  }

  void __set_model(const std::string& val) {
    model = val;
  }

  void __set_onvif_login(const std::string& val) {
    onvif_login = val;
  }

  void __set_onvif_password(const std::string& val) {
    onvif_password = val;
  }

  void __set_serial_number(const std::string& val) {
    serial_number = val;
  }

  bool operator == (const Camera & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(ip_address == rhs.ip_address))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(hq_url == rhs.hq_url))
      return false;
    if (!(mq_url == rhs.mq_url))
      return false;
    if (!(lq_url == rhs.lq_url))
      return false;
    if (!(login == rhs.login))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(mask == rhs.mask))
      return false;
    if (!(uuid == rhs.uuid))
      return false;
    if (!(model == rhs.model))
      return false;
    if (!(onvif_login == rhs.onvif_login))
      return false;
    if (!(onvif_password == rhs.onvif_password))
      return false;
    if (!(serial_number == rhs.serial_number))
      return false;
    return true;
  }
  bool operator != (const Camera &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Camera & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Camera &a, Camera &b);

typedef struct _AddCamera__isset {
  _AddCamera__isset() : camera(false) {}
  bool camera;
} _AddCamera__isset;

class AddCamera {
 public:

  static const char* ascii_fingerprint; // = "AFE0311EDB1433B8729083843FB9B2B9";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xE0,0x31,0x1E,0xDB,0x14,0x33,0xB8,0x72,0x90,0x83,0x84,0x3F,0xB9,0xB2,0xB9};

  AddCamera() {
  }

  virtual ~AddCamera() throw() {}

  Camera camera;

  _AddCamera__isset __isset;

  void __set_camera(const Camera& val) {
    camera = val;
  }

  bool operator == (const AddCamera & rhs) const
  {
    if (!(camera == rhs.camera))
      return false;
    return true;
  }
  bool operator != (const AddCamera &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddCamera & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AddCamera &a, AddCamera &b);

typedef struct _AddCameraResponse__isset {
  _AddCameraResponse__isset() : status(false), error(false), device_id(false), camera(false) {}
  bool status;
  bool error;
  bool device_id;
  bool camera;
} _AddCameraResponse__isset;

class AddCameraResponse {
 public:

  static const char* ascii_fingerprint; // = "D40577EFE4F1D82BC78981608CA4FE92";
  static const uint8_t binary_fingerprint[16]; // = {0xD4,0x05,0x77,0xEF,0xE4,0xF1,0xD8,0x2B,0xC7,0x89,0x81,0x60,0x8C,0xA4,0xFE,0x92};

  AddCameraResponse() : status(0), error(), device_id() {
  }

  virtual ~AddCameraResponse() throw() {}

  bool status;
  std::string error;
  std::string device_id;
  Camera camera;

  _AddCameraResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_error(const std::string& val) {
    error = val;
  }

  void __set_device_id(const std::string& val) {
    device_id = val;
  }

  void __set_camera(const Camera& val) {
    camera = val;
  }

  bool operator == (const AddCameraResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(error == rhs.error))
      return false;
    if (!(device_id == rhs.device_id))
      return false;
    if (!(camera == rhs.camera))
      return false;
    return true;
  }
  bool operator != (const AddCameraResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddCameraResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AddCameraResponse &a, AddCameraResponse &b);

typedef struct _EditCameraSettings__isset {
  _EditCameraSettings__isset() : camera_id(false), camera(false) {}
  bool camera_id;
  bool camera;
} _EditCameraSettings__isset;

class EditCameraSettings {
 public:

  static const char* ascii_fingerprint; // = "330E439DFDD0D41BE66A0F896E41C1B9";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x0E,0x43,0x9D,0xFD,0xD0,0xD4,0x1B,0xE6,0x6A,0x0F,0x89,0x6E,0x41,0xC1,0xB9};

  EditCameraSettings() : camera_id() {
  }

  virtual ~EditCameraSettings() throw() {}

  std::string camera_id;
  Camera camera;

  _EditCameraSettings__isset __isset;

  void __set_camera_id(const std::string& val) {
    camera_id = val;
  }

  void __set_camera(const Camera& val) {
    camera = val;
  }

  bool operator == (const EditCameraSettings & rhs) const
  {
    if (!(camera_id == rhs.camera_id))
      return false;
    if (!(camera == rhs.camera))
      return false;
    return true;
  }
  bool operator != (const EditCameraSettings &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EditCameraSettings & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EditCameraSettings &a, EditCameraSettings &b);

typedef struct _EditCameraSettingsResponse__isset {
  _EditCameraSettingsResponse__isset() : status(false), error(false) {}
  bool status;
  bool error;
} _EditCameraSettingsResponse__isset;

class EditCameraSettingsResponse {
 public:

  static const char* ascii_fingerprint; // = "1767FFB0CB3D9275BC64B198AB3B8A8B";
  static const uint8_t binary_fingerprint[16]; // = {0x17,0x67,0xFF,0xB0,0xCB,0x3D,0x92,0x75,0xBC,0x64,0xB1,0x98,0xAB,0x3B,0x8A,0x8B};

  EditCameraSettingsResponse() : status(0), error() {
  }

  virtual ~EditCameraSettingsResponse() throw() {}

  bool status;
  std::string error;

  _EditCameraSettingsResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_error(const std::string& val) {
    error = val;
  }

  bool operator == (const EditCameraSettingsResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const EditCameraSettingsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EditCameraSettingsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EditCameraSettingsResponse &a, EditCameraSettingsResponse &b);

typedef struct _Intercom__isset {
  _Intercom__isset() : camera(false), mac_address(false), intercom_port(false) {}
  bool camera;
  bool mac_address;
  bool intercom_port;
} _Intercom__isset;

class Intercom {
 public:

  static const char* ascii_fingerprint; // = "BC2637A4C9C3D02B0C2760240A6C247C";
  static const uint8_t binary_fingerprint[16]; // = {0xBC,0x26,0x37,0xA4,0xC9,0xC3,0xD0,0x2B,0x0C,0x27,0x60,0x24,0x0A,0x6C,0x24,0x7C};

  Intercom() : mac_address(), intercom_port(0) {
  }

  virtual ~Intercom() throw() {}

  Camera camera;
  std::string mac_address;
  int16_t intercom_port;

  _Intercom__isset __isset;

  void __set_camera(const Camera& val) {
    camera = val;
  }

  void __set_mac_address(const std::string& val) {
    mac_address = val;
  }

  void __set_intercom_port(const int16_t val) {
    intercom_port = val;
  }

  bool operator == (const Intercom & rhs) const
  {
    if (!(camera == rhs.camera))
      return false;
    if (!(mac_address == rhs.mac_address))
      return false;
    if (!(intercom_port == rhs.intercom_port))
      return false;
    return true;
  }
  bool operator != (const Intercom &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Intercom & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Intercom &a, Intercom &b);

typedef struct _AddIntercom__isset {
  _AddIntercom__isset() : intercom(false) {}
  bool intercom;
} _AddIntercom__isset;

class AddIntercom {
 public:

  static const char* ascii_fingerprint; // = "EC36C50165DF43BC92B5C81D16078B81";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0x36,0xC5,0x01,0x65,0xDF,0x43,0xBC,0x92,0xB5,0xC8,0x1D,0x16,0x07,0x8B,0x81};

  AddIntercom() {
  }

  virtual ~AddIntercom() throw() {}

  Intercom intercom;

  _AddIntercom__isset __isset;

  void __set_intercom(const Intercom& val) {
    intercom = val;
  }

  bool operator == (const AddIntercom & rhs) const
  {
    if (!(intercom == rhs.intercom))
      return false;
    return true;
  }
  bool operator != (const AddIntercom &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddIntercom & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AddIntercom &a, AddIntercom &b);

typedef struct _AddIntercomResponse__isset {
  _AddIntercomResponse__isset() : status(false), error(false), device_id(false), intercom(false) {}
  bool status;
  bool error;
  bool device_id;
  bool intercom;
} _AddIntercomResponse__isset;

class AddIntercomResponse {
 public:

  static const char* ascii_fingerprint; // = "9074991A14166CE0CE5579D6AE319F3C";
  static const uint8_t binary_fingerprint[16]; // = {0x90,0x74,0x99,0x1A,0x14,0x16,0x6C,0xE0,0xCE,0x55,0x79,0xD6,0xAE,0x31,0x9F,0x3C};

  AddIntercomResponse() : status(0), error(), device_id() {
  }

  virtual ~AddIntercomResponse() throw() {}

  bool status;
  std::string error;
  std::string device_id;
  Intercom intercom;

  _AddIntercomResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_error(const std::string& val) {
    error = val;
  }

  void __set_device_id(const std::string& val) {
    device_id = val;
  }

  void __set_intercom(const Intercom& val) {
    intercom = val;
  }

  bool operator == (const AddIntercomResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(error == rhs.error))
      return false;
    if (!(device_id == rhs.device_id))
      return false;
    if (!(intercom == rhs.intercom))
      return false;
    return true;
  }
  bool operator != (const AddIntercomResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddIntercomResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AddIntercomResponse &a, AddIntercomResponse &b);

typedef struct _GetCameraInfo__isset {
  _GetCameraInfo__isset() : endpoint(false) {}
  bool endpoint;
} _GetCameraInfo__isset;

class GetCameraInfo {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  GetCameraInfo() : endpoint() {
  }

  virtual ~GetCameraInfo() throw() {}

  std::string endpoint;

  _GetCameraInfo__isset __isset;

  void __set_endpoint(const std::string& val) {
    endpoint = val;
  }

  bool operator == (const GetCameraInfo & rhs) const
  {
    if (!(endpoint == rhs.endpoint))
      return false;
    return true;
  }
  bool operator != (const GetCameraInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetCameraInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetCameraInfo &a, GetCameraInfo &b);

typedef struct _GetCameraInfoResponse__isset {
  _GetCameraInfoResponse__isset() : status(false), endpoint(false), is_need_auth(false), model(false), serial(false), firmware_version(false), manufacturer(false), hardware_id(false), ip_address(false) {}
  bool status;
  bool endpoint;
  bool is_need_auth;
  bool model;
  bool serial;
  bool firmware_version;
  bool manufacturer;
  bool hardware_id;
  bool ip_address;
} _GetCameraInfoResponse__isset;

class GetCameraInfoResponse {
 public:

  static const char* ascii_fingerprint; // = "EAF606A7BBB3F346F71D1100F335E869";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0xF6,0x06,0xA7,0xBB,0xB3,0xF3,0x46,0xF7,0x1D,0x11,0x00,0xF3,0x35,0xE8,0x69};

  GetCameraInfoResponse() : status(0), endpoint(), is_need_auth(0), model(), serial(), firmware_version(), manufacturer(), hardware_id(), ip_address() {
  }

  virtual ~GetCameraInfoResponse() throw() {}

  bool status;
  std::string endpoint;
  bool is_need_auth;
  std::string model;
  std::string serial;
  std::string firmware_version;
  std::string manufacturer;
  std::string hardware_id;
  std::string ip_address;

  _GetCameraInfoResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_endpoint(const std::string& val) {
    endpoint = val;
  }

  void __set_is_need_auth(const bool val) {
    is_need_auth = val;
  }

  void __set_model(const std::string& val) {
    model = val;
  }

  void __set_serial(const std::string& val) {
    serial = val;
  }

  void __set_firmware_version(const std::string& val) {
    firmware_version = val;
  }

  void __set_manufacturer(const std::string& val) {
    manufacturer = val;
  }

  void __set_hardware_id(const std::string& val) {
    hardware_id = val;
  }

  void __set_ip_address(const std::string& val) {
    ip_address = val;
  }

  bool operator == (const GetCameraInfoResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(endpoint == rhs.endpoint))
      return false;
    if (!(is_need_auth == rhs.is_need_auth))
      return false;
    if (!(model == rhs.model))
      return false;
    if (!(serial == rhs.serial))
      return false;
    if (!(firmware_version == rhs.firmware_version))
      return false;
    if (!(manufacturer == rhs.manufacturer))
      return false;
    if (!(hardware_id == rhs.hardware_id))
      return false;
    if (!(ip_address == rhs.ip_address))
      return false;
    return true;
  }
  bool operator != (const GetCameraInfoResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetCameraInfoResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetCameraInfoResponse &a, GetCameraInfoResponse &b);

typedef struct _GetCameraFullInfo__isset {
  _GetCameraFullInfo__isset() : endpoint(false), login(false), password(false) {}
  bool endpoint;
  bool login;
  bool password;
} _GetCameraFullInfo__isset;

class GetCameraFullInfo {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  GetCameraFullInfo() : endpoint(), login(), password() {
  }

  virtual ~GetCameraFullInfo() throw() {}

  std::string endpoint;
  std::string login;
  std::string password;

  _GetCameraFullInfo__isset __isset;

  void __set_endpoint(const std::string& val) {
    endpoint = val;
  }

  void __set_login(const std::string& val) {
    login = val;
  }

  void __set_password(const std::string& val) {
    password = val;
  }

  bool operator == (const GetCameraFullInfo & rhs) const
  {
    if (!(endpoint == rhs.endpoint))
      return false;
    if (!(login == rhs.login))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const GetCameraFullInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetCameraFullInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetCameraFullInfo &a, GetCameraFullInfo &b);

typedef struct _MediaProfile__isset {
  _MediaProfile__isset() : url(false), port(false), width(false), height(false), need_auth(false) {}
  bool url;
  bool port;
  bool width;
  bool height;
  bool need_auth;
} _MediaProfile__isset;

class MediaProfile {
 public:

  static const char* ascii_fingerprint; // = "39B4C761DFFA63BBB1A931F91F5CF3C0";
  static const uint8_t binary_fingerprint[16]; // = {0x39,0xB4,0xC7,0x61,0xDF,0xFA,0x63,0xBB,0xB1,0xA9,0x31,0xF9,0x1F,0x5C,0xF3,0xC0};

  MediaProfile() : url(), port(0), width(0), height(0), need_auth(0) {
  }

  virtual ~MediaProfile() throw() {}

  std::string url;
  int16_t port;
  int16_t width;
  int16_t height;
  bool need_auth;

  _MediaProfile__isset __isset;

  void __set_url(const std::string& val) {
    url = val;
  }

  void __set_port(const int16_t val) {
    port = val;
  }

  void __set_width(const int16_t val) {
    width = val;
  }

  void __set_height(const int16_t val) {
    height = val;
  }

  void __set_need_auth(const bool val) {
    need_auth = val;
  }

  bool operator == (const MediaProfile & rhs) const
  {
    if (!(url == rhs.url))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(width == rhs.width))
      return false;
    if (!(height == rhs.height))
      return false;
    if (!(need_auth == rhs.need_auth))
      return false;
    return true;
  }
  bool operator != (const MediaProfile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MediaProfile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MediaProfile &a, MediaProfile &b);

typedef struct _GetCameraFullInfoResponse__isset {
  _GetCameraFullInfoResponse__isset() : status(false), endpoint(false), model(false), serial(false), firmware_version(false), manufacturer(false), hardware_id(false), has_ptz(false), profiles(false), ip_address(false), login(false), password(false) {}
  bool status;
  bool endpoint;
  bool model;
  bool serial;
  bool firmware_version;
  bool manufacturer;
  bool hardware_id;
  bool has_ptz;
  bool profiles;
  bool ip_address;
  bool login;
  bool password;
} _GetCameraFullInfoResponse__isset;

class GetCameraFullInfoResponse {
 public:

  static const char* ascii_fingerprint; // = "172A96A16CDA912616AEA176DD1A2661";
  static const uint8_t binary_fingerprint[16]; // = {0x17,0x2A,0x96,0xA1,0x6C,0xDA,0x91,0x26,0x16,0xAE,0xA1,0x76,0xDD,0x1A,0x26,0x61};

  GetCameraFullInfoResponse() : status(0), endpoint(), model(), serial(), firmware_version(), manufacturer(), hardware_id(), has_ptz(0), ip_address(), login(), password() {
  }

  virtual ~GetCameraFullInfoResponse() throw() {}

  bool status;
  std::string endpoint;
  std::string model;
  std::string serial;
  std::string firmware_version;
  std::string manufacturer;
  std::string hardware_id;
  bool has_ptz;
  std::vector<MediaProfile>  profiles;
  std::string ip_address;
  std::string login;
  std::string password;

  _GetCameraFullInfoResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_endpoint(const std::string& val) {
    endpoint = val;
  }

  void __set_model(const std::string& val) {
    model = val;
  }

  void __set_serial(const std::string& val) {
    serial = val;
  }

  void __set_firmware_version(const std::string& val) {
    firmware_version = val;
  }

  void __set_manufacturer(const std::string& val) {
    manufacturer = val;
  }

  void __set_hardware_id(const std::string& val) {
    hardware_id = val;
  }

  void __set_has_ptz(const bool val) {
    has_ptz = val;
  }

  void __set_profiles(const std::vector<MediaProfile> & val) {
    profiles = val;
  }

  void __set_ip_address(const std::string& val) {
    ip_address = val;
  }

  void __set_login(const std::string& val) {
    login = val;
  }

  void __set_password(const std::string& val) {
    password = val;
  }

  bool operator == (const GetCameraFullInfoResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(endpoint == rhs.endpoint))
      return false;
    if (!(model == rhs.model))
      return false;
    if (!(serial == rhs.serial))
      return false;
    if (!(firmware_version == rhs.firmware_version))
      return false;
    if (!(manufacturer == rhs.manufacturer))
      return false;
    if (!(hardware_id == rhs.hardware_id))
      return false;
    if (!(has_ptz == rhs.has_ptz))
      return false;
    if (!(profiles == rhs.profiles))
      return false;
    if (!(ip_address == rhs.ip_address))
      return false;
    if (!(login == rhs.login))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const GetCameraFullInfoResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetCameraFullInfoResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetCameraFullInfoResponse &a, GetCameraFullInfoResponse &b);

typedef struct _FoundedCamera__isset {
  _FoundedCamera__isset() : ip_address(false), endpoint(false), model(false) {}
  bool ip_address;
  bool endpoint;
  bool model;
} _FoundedCamera__isset;

class FoundedCamera {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  FoundedCamera() : ip_address(), endpoint(), model() {
  }

  virtual ~FoundedCamera() throw() {}

  std::string ip_address;
  std::string endpoint;
  std::string model;

  _FoundedCamera__isset __isset;

  void __set_ip_address(const std::string& val) {
    ip_address = val;
  }

  void __set_endpoint(const std::string& val) {
    endpoint = val;
  }

  void __set_model(const std::string& val) {
    model = val;
  }

  bool operator == (const FoundedCamera & rhs) const
  {
    if (!(ip_address == rhs.ip_address))
      return false;
    if (!(endpoint == rhs.endpoint))
      return false;
    if (!(model == rhs.model))
      return false;
    return true;
  }
  bool operator != (const FoundedCamera &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FoundedCamera & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FoundedCamera &a, FoundedCamera &b);

typedef struct _FindCameraResponse__isset {
  _FindCameraResponse__isset() : status(false), error(false), cameras(false) {}
  bool status;
  bool error;
  bool cameras;
} _FindCameraResponse__isset;

class FindCameraResponse {
 public:

  static const char* ascii_fingerprint; // = "325080CACD5DE705383B29C3D56251B9";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x50,0x80,0xCA,0xCD,0x5D,0xE7,0x05,0x38,0x3B,0x29,0xC3,0xD5,0x62,0x51,0xB9};

  FindCameraResponse() : status(0), error() {
  }

  virtual ~FindCameraResponse() throw() {}

  bool status;
  std::string error;
  std::vector<FoundedCamera>  cameras;

  _FindCameraResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_error(const std::string& val) {
    error = val;
  }

  void __set_cameras(const std::vector<FoundedCamera> & val) {
    cameras = val;
  }

  bool operator == (const FindCameraResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(error == rhs.error))
      return false;
    if (!(cameras == rhs.cameras))
      return false;
    return true;
  }
  bool operator != (const FindCameraResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FindCameraResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FindCameraResponse &a, FindCameraResponse &b);

typedef struct _FileInfo__isset {
  _FileInfo__isset() : file_name(false) {}
  bool file_name;
} _FileInfo__isset;

class FileInfo {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  FileInfo() : file_name() {
  }

  virtual ~FileInfo() throw() {}

  std::string file_name;

  _FileInfo__isset __isset;

  void __set_file_name(const std::string& val) {
    file_name = val;
  }

  bool operator == (const FileInfo & rhs) const
  {
    if (!(file_name == rhs.file_name))
      return false;
    return true;
  }
  bool operator != (const FileInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FileInfo &a, FileInfo &b);

typedef struct _ListVideoFilesResponse__isset {
  _ListVideoFilesResponse__isset() : status(false), files(false) {}
  bool status;
  bool files;
} _ListVideoFilesResponse__isset;

class ListVideoFilesResponse {
 public:

  static const char* ascii_fingerprint; // = "1936DDD8AAE5D42671F07B555EAE9B95";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0x36,0xDD,0xD8,0xAA,0xE5,0xD4,0x26,0x71,0xF0,0x7B,0x55,0x5E,0xAE,0x9B,0x95};

  ListVideoFilesResponse() : status(0) {
  }

  virtual ~ListVideoFilesResponse() throw() {}

  bool status;
  std::vector<FileInfo>  files;

  _ListVideoFilesResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_files(const std::vector<FileInfo> & val) {
    files = val;
  }

  bool operator == (const ListVideoFilesResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(files == rhs.files))
      return false;
    return true;
  }
  bool operator != (const ListVideoFilesResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ListVideoFilesResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ListVideoFilesResponse &a, ListVideoFilesResponse &b);

typedef struct _GetPreviewForData__isset {
  _GetPreviewForData__isset() : file_name(false) {}
  bool file_name;
} _GetPreviewForData__isset;

class GetPreviewForData {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  GetPreviewForData() : file_name() {
  }

  virtual ~GetPreviewForData() throw() {}

  std::string file_name;

  _GetPreviewForData__isset __isset;

  void __set_file_name(const std::string& val) {
    file_name = val;
  }

  bool operator == (const GetPreviewForData & rhs) const
  {
    if (!(file_name == rhs.file_name))
      return false;
    return true;
  }
  bool operator != (const GetPreviewForData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetPreviewForData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetPreviewForData &a, GetPreviewForData &b);

typedef struct _PreviewData__isset {
  _PreviewData__isset() : content(false) {}
  bool content;
} _PreviewData__isset;

class PreviewData {
 public:

  static const char* ascii_fingerprint; // = "1F71178153FA37316E045C21ACA93767";
  static const uint8_t binary_fingerprint[16]; // = {0x1F,0x71,0x17,0x81,0x53,0xFA,0x37,0x31,0x6E,0x04,0x5C,0x21,0xAC,0xA9,0x37,0x67};

  PreviewData() {
  }

  virtual ~PreviewData() throw() {}

  std::vector<int8_t>  content;

  _PreviewData__isset __isset;

  void __set_content(const std::vector<int8_t> & val) {
    content = val;
  }

  bool operator == (const PreviewData & rhs) const
  {
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const PreviewData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PreviewData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PreviewData &a, PreviewData &b);

typedef struct _GetPreviewForFileResponse__isset {
  _GetPreviewForFileResponse__isset() : status(false), previews(false) {}
  bool status;
  bool previews;
} _GetPreviewForFileResponse__isset;

class GetPreviewForFileResponse {
 public:

  static const char* ascii_fingerprint; // = "93BA2787DECCFB2F9EAA21BFD3D4F677";
  static const uint8_t binary_fingerprint[16]; // = {0x93,0xBA,0x27,0x87,0xDE,0xCC,0xFB,0x2F,0x9E,0xAA,0x21,0xBF,0xD3,0xD4,0xF6,0x77};

  GetPreviewForFileResponse() : status(0) {
  }

  virtual ~GetPreviewForFileResponse() throw() {}

  bool status;
  std::vector<PreviewData>  previews;

  _GetPreviewForFileResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_previews(const std::vector<PreviewData> & val) {
    previews = val;
  }

  bool operator == (const GetPreviewForFileResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(previews == rhs.previews))
      return false;
    return true;
  }
  bool operator != (const GetPreviewForFileResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetPreviewForFileResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetPreviewForFileResponse &a, GetPreviewForFileResponse &b);

typedef struct _HardwareDevice__isset {
  _HardwareDevice__isset() : device_id(false), property_id(false), property_type(false), value(false) {}
  bool device_id;
  bool property_id;
  bool property_type;
  bool value;
} _HardwareDevice__isset;

class HardwareDevice {
 public:

  static const char* ascii_fingerprint; // = "EA518475E5C322C65E49AE0B5ECC3C79";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x51,0x84,0x75,0xE5,0xC3,0x22,0xC6,0x5E,0x49,0xAE,0x0B,0x5E,0xCC,0x3C,0x79};

  HardwareDevice() : device_id(), property_id(0), property_type(), value() {
  }

  virtual ~HardwareDevice() throw() {}

  std::string device_id;
  int8_t property_id;
  std::string property_type;
  std::string value;

  _HardwareDevice__isset __isset;

  void __set_device_id(const std::string& val) {
    device_id = val;
  }

  void __set_property_id(const int8_t val) {
    property_id = val;
  }

  void __set_property_type(const std::string& val) {
    property_type = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  bool operator == (const HardwareDevice & rhs) const
  {
    if (!(device_id == rhs.device_id))
      return false;
    if (!(property_id == rhs.property_id))
      return false;
    if (!(property_type == rhs.property_type))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const HardwareDevice &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HardwareDevice & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HardwareDevice &a, HardwareDevice &b);

typedef struct _SnapShotInfo__isset {
  _SnapShotInfo__isset() : device_id(false) {}
  bool device_id;
} _SnapShotInfo__isset;

class SnapShotInfo {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  SnapShotInfo() : device_id() {
  }

  virtual ~SnapShotInfo() throw() {}

  std::string device_id;

  _SnapShotInfo__isset __isset;

  void __set_device_id(const std::string& val) {
    device_id = val;
  }

  bool operator == (const SnapShotInfo & rhs) const
  {
    if (!(device_id == rhs.device_id))
      return false;
    return true;
  }
  bool operator != (const SnapShotInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnapShotInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SnapShotInfo &a, SnapShotInfo &b);

typedef struct _VideoSliceInfo__isset {
  _VideoSliceInfo__isset() : device_id(false) {}
  bool device_id;
} _VideoSliceInfo__isset;

class VideoSliceInfo {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  VideoSliceInfo() : device_id() {
  }

  virtual ~VideoSliceInfo() throw() {}

  std::string device_id;

  _VideoSliceInfo__isset __isset;

  void __set_device_id(const std::string& val) {
    device_id = val;
  }

  bool operator == (const VideoSliceInfo & rhs) const
  {
    if (!(device_id == rhs.device_id))
      return false;
    return true;
  }
  bool operator != (const VideoSliceInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VideoSliceInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(VideoSliceInfo &a, VideoSliceInfo &b);

typedef struct _Time__isset {
  _Time__isset() : hours(false), minutes(false), seconds(false), logic(false) {}
  bool hours;
  bool minutes;
  bool seconds;
  bool logic;
} _Time__isset;

class Time {
 public:

  static const char* ascii_fingerprint; // = "82831440235308324F1EFD541C763BCB";
  static const uint8_t binary_fingerprint[16]; // = {0x82,0x83,0x14,0x40,0x23,0x53,0x08,0x32,0x4F,0x1E,0xFD,0x54,0x1C,0x76,0x3B,0xCB};

  Time() : hours(0), minutes(0), seconds(0), logic((TimerLogic::type)0) {
  }

  virtual ~Time() throw() {}

  int8_t hours;
  int8_t minutes;
  int8_t seconds;
  TimerLogic::type logic;

  _Time__isset __isset;

  void __set_hours(const int8_t val) {
    hours = val;
  }

  void __set_minutes(const int8_t val) {
    minutes = val;
  }

  void __set_seconds(const int8_t val) {
    seconds = val;
  }

  void __set_logic(const TimerLogic::type val) {
    logic = val;
  }

  bool operator == (const Time & rhs) const
  {
    if (!(hours == rhs.hours))
      return false;
    if (!(minutes == rhs.minutes))
      return false;
    if (!(seconds == rhs.seconds))
      return false;
    if (!(logic == rhs.logic))
      return false;
    return true;
  }
  bool operator != (const Time &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Time & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Time &a, Time &b);

typedef struct _Variable__isset {
  _Variable__isset() : name(false), id(false), type(false), value(false) {}
  bool name;
  bool id;
  bool type;
  bool value;
} _Variable__isset;

class Variable {
 public:

  static const char* ascii_fingerprint; // = "C93D890311F28844166CF6E571EB3AC2";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};

  Variable() : name(), id(), type(), value() {
  }

  virtual ~Variable() throw() {}

  std::string name;
  std::string id;
  std::string type;
  std::string value;

  _Variable__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_id(const std::string& val) {
    id = val;
  }

  void __set_type(const std::string& val) {
    type = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  bool operator == (const Variable & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const Variable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Variable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Variable &a, Variable &b);

typedef struct _CountedEnergy__isset {
  _CountedEnergy__isset() : device_id(false), value(false), interval(false) {}
  bool device_id;
  bool value;
  bool interval;
} _CountedEnergy__isset;

class CountedEnergy {
 public:

  static const char* ascii_fingerprint; // = "51553B00ECD9218B9C31C1EAEC5BD7E5";
  static const uint8_t binary_fingerprint[16]; // = {0x51,0x55,0x3B,0x00,0xEC,0xD9,0x21,0x8B,0x9C,0x31,0xC1,0xEA,0xEC,0x5B,0xD7,0xE5};

  CountedEnergy() : device_id(), value(0), interval((CountedInterval::type)0) {
  }

  virtual ~CountedEnergy() throw() {}

  std::string device_id;
  double value;
  CountedInterval::type interval;

  _CountedEnergy__isset __isset;

  void __set_device_id(const std::string& val) {
    device_id = val;
  }

  void __set_value(const double val) {
    value = val;
  }

  void __set_interval(const CountedInterval::type val) {
    interval = val;
  }

  bool operator == (const CountedEnergy & rhs) const
  {
    if (!(device_id == rhs.device_id))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(interval == rhs.interval))
      return false;
    return true;
  }
  bool operator != (const CountedEnergy &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CountedEnergy & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CountedEnergy &a, CountedEnergy &b);

typedef struct _DaysOfWeek__isset {
  _DaysOfWeek__isset() : days(false) {}
  bool days;
} _DaysOfWeek__isset;

class DaysOfWeek {
 public:

  static const char* ascii_fingerprint; // = "87C2618D316F4CF12649B129BA0E78C6";
  static const uint8_t binary_fingerprint[16]; // = {0x87,0xC2,0x61,0x8D,0x31,0x6F,0x4C,0xF1,0x26,0x49,0xB1,0x29,0xBA,0x0E,0x78,0xC6};

  DaysOfWeek() {
  }

  virtual ~DaysOfWeek() throw() {}

  std::vector<DayOfWeek::type>  days;

  _DaysOfWeek__isset __isset;

  void __set_days(const std::vector<DayOfWeek::type> & val) {
    days = val;
  }

  bool operator == (const DaysOfWeek & rhs) const
  {
    if (!(days == rhs.days))
      return false;
    return true;
  }
  bool operator != (const DaysOfWeek &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DaysOfWeek & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DaysOfWeek &a, DaysOfWeek &b);

typedef struct _Condition__isset {
  _Condition__isset() : type(false), operation(false), device(false), time(false), variable(false), days(false), energy(false) {}
  bool type;
  bool operation;
  bool device;
  bool time;
  bool variable;
  bool days;
  bool energy;
} _Condition__isset;

class Condition {
 public:

  static const char* ascii_fingerprint; // = "017D4551CFF2794B0368660D18430BDA";
  static const uint8_t binary_fingerprint[16]; // = {0x01,0x7D,0x45,0x51,0xCF,0xF2,0x79,0x4B,0x03,0x68,0x66,0x0D,0x18,0x43,0x0B,0xDA};

  Condition() : type((ConditionType::type)0), operation((OperationType::type)0) {
  }

  virtual ~Condition() throw() {}

  ConditionType::type type;
  OperationType::type operation;
  HardwareDevice device;
  Time time;
  Variable variable;
  DaysOfWeek days;
  CountedEnergy energy;

  _Condition__isset __isset;

  void __set_type(const ConditionType::type val) {
    type = val;
  }

  void __set_operation(const OperationType::type val) {
    operation = val;
  }

  void __set_device(const HardwareDevice& val) {
    device = val;
  }

  void __set_time(const Time& val) {
    time = val;
  }

  void __set_variable(const Variable& val) {
    variable = val;
  }

  void __set_days(const DaysOfWeek& val) {
    days = val;
  }

  void __set_energy(const CountedEnergy& val) {
    energy = val;
  }

  bool operator == (const Condition & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(operation == rhs.operation))
      return false;
    if (!(device == rhs.device))
      return false;
    if (!(time == rhs.time))
      return false;
    if (!(variable == rhs.variable))
      return false;
    if (!(days == rhs.days))
      return false;
    if (!(energy == rhs.energy))
      return false;
    return true;
  }
  bool operator != (const Condition &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Condition & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Condition &a, Condition &b);

typedef struct _Notify__isset {
  _Notify__isset() : type(false), message(false) {}
  bool type;
  bool message;
} _Notify__isset;

class Notify {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  Notify() : type((NotifyType::type)0), message() {
  }

  virtual ~Notify() throw() {}

  NotifyType::type type;
  std::string message;

  _Notify__isset __isset;

  void __set_type(const NotifyType::type val) {
    type = val;
  }

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const Notify & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const Notify &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Notify & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Notify &a, Notify &b);

typedef struct _Action__isset {
  _Action__isset() : type(false), operation(false), has_timer(false), timer(false), device(false), variable(false), notify(false), snap_shot_info(false), video_slice_info(false) {}
  bool type;
  bool operation;
  bool has_timer;
  bool timer;
  bool device;
  bool variable;
  bool notify;
  bool snap_shot_info;
  bool video_slice_info;
} _Action__isset;

class Action {
 public:

  static const char* ascii_fingerprint; // = "980505CDDC0653E2B6470AEE330AD455";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x05,0x05,0xCD,0xDC,0x06,0x53,0xE2,0xB6,0x47,0x0A,0xEE,0x33,0x0A,0xD4,0x55};

  Action() : type((ActionType::type)0), operation((OperationType::type)0), has_timer(0) {
  }

  virtual ~Action() throw() {}

  ActionType::type type;
  OperationType::type operation;
  bool has_timer;
  Time timer;
  HardwareDevice device;
  Variable variable;
  Notify notify;
  SnapShotInfo snap_shot_info;
  VideoSliceInfo video_slice_info;

  _Action__isset __isset;

  void __set_type(const ActionType::type val) {
    type = val;
  }

  void __set_operation(const OperationType::type val) {
    operation = val;
  }

  void __set_has_timer(const bool val) {
    has_timer = val;
  }

  void __set_timer(const Time& val) {
    timer = val;
  }

  void __set_device(const HardwareDevice& val) {
    device = val;
  }

  void __set_variable(const Variable& val) {
    variable = val;
  }

  void __set_notify(const Notify& val) {
    notify = val;
  }

  void __set_snap_shot_info(const SnapShotInfo& val) {
    snap_shot_info = val;
  }

  void __set_video_slice_info(const VideoSliceInfo& val) {
    video_slice_info = val;
  }

  bool operator == (const Action & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(operation == rhs.operation))
      return false;
    if (!(has_timer == rhs.has_timer))
      return false;
    if (!(timer == rhs.timer))
      return false;
    if (!(device == rhs.device))
      return false;
    if (!(variable == rhs.variable))
      return false;
    if (!(notify == rhs.notify))
      return false;
    if (!(snap_shot_info == rhs.snap_shot_info))
      return false;
    if (!(video_slice_info == rhs.video_slice_info))
      return false;
    return true;
  }
  bool operator != (const Action &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Action & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Action &a, Action &b);

typedef struct _ScriptDescription__isset {
  _ScriptDescription__isset() : name(false), conditions(false), actions(false) {}
  bool name;
  bool conditions;
  bool actions;
} _ScriptDescription__isset;

class ScriptDescription {
 public:

  static const char* ascii_fingerprint; // = "35A7806553811FB94B1E985116C4EE2B";
  static const uint8_t binary_fingerprint[16]; // = {0x35,0xA7,0x80,0x65,0x53,0x81,0x1F,0xB9,0x4B,0x1E,0x98,0x51,0x16,0xC4,0xEE,0x2B};

  ScriptDescription() : name() {
  }

  virtual ~ScriptDescription() throw() {}

  std::string name;
  std::vector<Condition>  conditions;
  std::vector<Action>  actions;

  _ScriptDescription__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_conditions(const std::vector<Condition> & val) {
    conditions = val;
  }

  void __set_actions(const std::vector<Action> & val) {
    actions = val;
  }

  bool operator == (const ScriptDescription & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(conditions == rhs.conditions))
      return false;
    if (!(actions == rhs.actions))
      return false;
    return true;
  }
  bool operator != (const ScriptDescription &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ScriptDescription & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ScriptDescription &a, ScriptDescription &b);

typedef struct _Script__isset {
  _Script__isset() : script_id(false), description(false), is_macros(false), body(false) {}
  bool script_id;
  bool description;
  bool is_macros;
  bool body;
} _Script__isset;

class Script {
 public:

  static const char* ascii_fingerprint; // = "ACFCB960C89FF55B0FB07FAE90EC7090";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xFC,0xB9,0x60,0xC8,0x9F,0xF5,0x5B,0x0F,0xB0,0x7F,0xAE,0x90,0xEC,0x70,0x90};

  Script() : script_id(), is_macros(0), body() {
  }

  virtual ~Script() throw() {}

  std::string script_id;
  ScriptDescription description;
  bool is_macros;
  std::string body;

  _Script__isset __isset;

  void __set_script_id(const std::string& val) {
    script_id = val;
  }

  void __set_description(const ScriptDescription& val) {
    description = val;
  }

  void __set_is_macros(const bool val) {
    is_macros = val;
  }

  void __set_body(const std::string& val) {
    body = val;
  }

  bool operator == (const Script & rhs) const
  {
    if (!(script_id == rhs.script_id))
      return false;
    if (!(description == rhs.description))
      return false;
    if (!(is_macros == rhs.is_macros))
      return false;
    if (!(body == rhs.body))
      return false;
    return true;
  }
  bool operator != (const Script &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Script & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Script &a, Script &b);

typedef struct _AddOrModifyScript__isset {
  _AddOrModifyScript__isset() : script_id(false), description(false) {}
  bool script_id;
  bool description;
} _AddOrModifyScript__isset;

class AddOrModifyScript {
 public:

  static const char* ascii_fingerprint; // = "BC22F38B2EBBBDCF8F9E24F20681CC6B";
  static const uint8_t binary_fingerprint[16]; // = {0xBC,0x22,0xF3,0x8B,0x2E,0xBB,0xBD,0xCF,0x8F,0x9E,0x24,0xF2,0x06,0x81,0xCC,0x6B};

  AddOrModifyScript() : script_id() {
  }

  virtual ~AddOrModifyScript() throw() {}

  std::string script_id;
  ScriptDescription description;

  _AddOrModifyScript__isset __isset;

  void __set_script_id(const std::string& val) {
    script_id = val;
  }

  void __set_description(const ScriptDescription& val) {
    description = val;
  }

  bool operator == (const AddOrModifyScript & rhs) const
  {
    if (!(script_id == rhs.script_id))
      return false;
    if (!(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const AddOrModifyScript &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddOrModifyScript & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AddOrModifyScript &a, AddOrModifyScript &b);

typedef struct _AddOrModifyScriptResponse__isset {
  _AddOrModifyScriptResponse__isset() : status(false), error(false), script_id(false), description(false) {}
  bool status;
  bool error;
  bool script_id;
  bool description;
} _AddOrModifyScriptResponse__isset;

class AddOrModifyScriptResponse {
 public:

  static const char* ascii_fingerprint; // = "00E0FD2C4833615E4563BCC8C48F7A4B";
  static const uint8_t binary_fingerprint[16]; // = {0x00,0xE0,0xFD,0x2C,0x48,0x33,0x61,0x5E,0x45,0x63,0xBC,0xC8,0xC4,0x8F,0x7A,0x4B};

  AddOrModifyScriptResponse() : status(0), error(), script_id() {
  }

  virtual ~AddOrModifyScriptResponse() throw() {}

  bool status;
  std::string error;
  std::string script_id;
  ScriptDescription description;

  _AddOrModifyScriptResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_error(const std::string& val) {
    error = val;
  }

  void __set_script_id(const std::string& val) {
    script_id = val;
  }

  void __set_description(const ScriptDescription& val) {
    description = val;
  }

  bool operator == (const AddOrModifyScriptResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(error == rhs.error))
      return false;
    if (!(script_id == rhs.script_id))
      return false;
    if (!(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const AddOrModifyScriptResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddOrModifyScriptResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AddOrModifyScriptResponse &a, AddOrModifyScriptResponse &b);

typedef struct _ListScriptResponse__isset {
  _ListScriptResponse__isset() : status(false), scripts(false) {}
  bool status;
  bool scripts;
} _ListScriptResponse__isset;

class ListScriptResponse {
 public:

  static const char* ascii_fingerprint; // = "F5BF3DDD81098497085DA1239D24CBA4";
  static const uint8_t binary_fingerprint[16]; // = {0xF5,0xBF,0x3D,0xDD,0x81,0x09,0x84,0x97,0x08,0x5D,0xA1,0x23,0x9D,0x24,0xCB,0xA4};

  ListScriptResponse() : status(0) {
  }

  virtual ~ListScriptResponse() throw() {}

  bool status;
  std::vector<Script>  scripts;

  _ListScriptResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_scripts(const std::vector<Script> & val) {
    scripts = val;
  }

  bool operator == (const ListScriptResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(scripts == rhs.scripts))
      return false;
    return true;
  }
  bool operator != (const ListScriptResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ListScriptResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ListScriptResponse &a, ListScriptResponse &b);

typedef struct _GetScriptById__isset {
  _GetScriptById__isset() : script_id(false) {}
  bool script_id;
} _GetScriptById__isset;

class GetScriptById {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  GetScriptById() : script_id() {
  }

  virtual ~GetScriptById() throw() {}

  std::string script_id;

  _GetScriptById__isset __isset;

  void __set_script_id(const std::string& val) {
    script_id = val;
  }

  bool operator == (const GetScriptById & rhs) const
  {
    if (!(script_id == rhs.script_id))
      return false;
    return true;
  }
  bool operator != (const GetScriptById &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetScriptById & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetScriptById &a, GetScriptById &b);

typedef struct _GetScriptByIdResponse__isset {
  _GetScriptByIdResponse__isset() : status(false), error(false), script(false) {}
  bool status;
  bool error;
  bool script;
} _GetScriptByIdResponse__isset;

class GetScriptByIdResponse {
 public:

  static const char* ascii_fingerprint; // = "7C028D99E3A9C8C0B81580EAA28F0FEB";
  static const uint8_t binary_fingerprint[16]; // = {0x7C,0x02,0x8D,0x99,0xE3,0xA9,0xC8,0xC0,0xB8,0x15,0x80,0xEA,0xA2,0x8F,0x0F,0xEB};

  GetScriptByIdResponse() : status(0), error() {
  }

  virtual ~GetScriptByIdResponse() throw() {}

  bool status;
  std::string error;
  Script script;

  _GetScriptByIdResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_error(const std::string& val) {
    error = val;
  }

  void __set_script(const Script& val) {
    script = val;
  }

  bool operator == (const GetScriptByIdResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(error == rhs.error))
      return false;
    if (!(script == rhs.script))
      return false;
    return true;
  }
  bool operator != (const GetScriptByIdResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetScriptByIdResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetScriptByIdResponse &a, GetScriptByIdResponse &b);

typedef struct _AddToken__isset {
  _AddToken__isset() : token(false), login(false), type(false) {}
  bool token;
  bool login;
  bool type;
} _AddToken__isset;

class AddToken {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  AddToken() : token(), login(), type() {
  }

  virtual ~AddToken() throw() {}

  std::string token;
  std::string login;
  std::string type;

  _AddToken__isset __isset;

  void __set_token(const std::string& val) {
    token = val;
  }

  void __set_login(const std::string& val) {
    login = val;
  }

  void __set_type(const std::string& val) {
    type = val;
  }

  bool operator == (const AddToken & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(login == rhs.login))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const AddToken &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddToken & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AddToken &a, AddToken &b);

typedef struct _TokenInfo__isset {
  _TokenInfo__isset() : id(false), token(false), login(false), type(false) {}
  bool id;
  bool token;
  bool login;
  bool type;
} _TokenInfo__isset;

class TokenInfo {
 public:

  static const char* ascii_fingerprint; // = "C93D890311F28844166CF6E571EB3AC2";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};

  TokenInfo() : id(), token(), login(), type() {
  }

  virtual ~TokenInfo() throw() {}

  std::string id;
  std::string token;
  std::string login;
  std::string type;

  _TokenInfo__isset __isset;

  void __set_id(const std::string& val) {
    id = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  void __set_login(const std::string& val) {
    login = val;
  }

  void __set_type(const std::string& val) {
    type = val;
  }

  bool operator == (const TokenInfo & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(token == rhs.token))
      return false;
    if (!(login == rhs.login))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const TokenInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TokenInfo &a, TokenInfo &b);

typedef struct _ListTokenResponse__isset {
  _ListTokenResponse__isset() : status(false), tokens(false) {}
  bool status;
  bool tokens;
} _ListTokenResponse__isset;

class ListTokenResponse {
 public:

  static const char* ascii_fingerprint; // = "7ECD85296FBA9085139A353336ED2AB8";
  static const uint8_t binary_fingerprint[16]; // = {0x7E,0xCD,0x85,0x29,0x6F,0xBA,0x90,0x85,0x13,0x9A,0x35,0x33,0x36,0xED,0x2A,0xB8};

  ListTokenResponse() : status(0) {
  }

  virtual ~ListTokenResponse() throw() {}

  bool status;
  std::vector<TokenInfo>  tokens;

  _ListTokenResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_tokens(const std::vector<TokenInfo> & val) {
    tokens = val;
  }

  bool operator == (const ListTokenResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(tokens == rhs.tokens))
      return false;
    return true;
  }
  bool operator != (const ListTokenResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ListTokenResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ListTokenResponse &a, ListTokenResponse &b);

typedef struct _AddTokenResponse__isset {
  _AddTokenResponse__isset() : status(false), device_id(false), info(false) {}
  bool status;
  bool device_id;
  bool info;
} _AddTokenResponse__isset;

class AddTokenResponse {
 public:

  static const char* ascii_fingerprint; // = "3C3B40B2981A7B7701A335739C9B82B7";
  static const uint8_t binary_fingerprint[16]; // = {0x3C,0x3B,0x40,0xB2,0x98,0x1A,0x7B,0x77,0x01,0xA3,0x35,0x73,0x9C,0x9B,0x82,0xB7};

  AddTokenResponse() : status(0), device_id() {
  }

  virtual ~AddTokenResponse() throw() {}

  bool status;
  std::string device_id;
  TokenInfo info;

  _AddTokenResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_device_id(const std::string& val) {
    device_id = val;
  }

  void __set_info(const TokenInfo& val) {
    info = val;
  }

  bool operator == (const AddTokenResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(device_id == rhs.device_id))
      return false;
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const AddTokenResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddTokenResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AddTokenResponse &a, AddTokenResponse &b);

typedef struct _RfFoundDevice__isset {
  _RfFoundDevice__isset() : rf_id(false), detected_types(false) {}
  bool rf_id;
  bool detected_types;
} _RfFoundDevice__isset;

class RfFoundDevice {
 public:

  static const char* ascii_fingerprint; // = "25702B8D5E28AA39160F267DABBC8446";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0x70,0x2B,0x8D,0x5E,0x28,0xAA,0x39,0x16,0x0F,0x26,0x7D,0xAB,0xBC,0x84,0x46};

  RfFoundDevice() : rf_id() {
  }

  virtual ~RfFoundDevice() throw() {}

  std::string rf_id;
  std::vector<std::string>  detected_types;

  _RfFoundDevice__isset __isset;

  void __set_rf_id(const std::string& val) {
    rf_id = val;
  }

  void __set_detected_types(const std::vector<std::string> & val) {
    detected_types = val;
  }

  bool operator == (const RfFoundDevice & rhs) const
  {
    if (!(rf_id == rhs.rf_id))
      return false;
    if (!(detected_types == rhs.detected_types))
      return false;
    return true;
  }
  bool operator != (const RfFoundDevice &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RfFoundDevice & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RfFoundDevice &a, RfFoundDevice &b);

typedef struct _AddRfDeviceByType__isset {
  _AddRfDeviceByType__isset() : rf_id(false), type(false) {}
  bool rf_id;
  bool type;
} _AddRfDeviceByType__isset;

class AddRfDeviceByType {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  AddRfDeviceByType() : rf_id(), type() {
  }

  virtual ~AddRfDeviceByType() throw() {}

  std::string rf_id;
  std::string type;

  _AddRfDeviceByType__isset __isset;

  void __set_rf_id(const std::string& val) {
    rf_id = val;
  }

  void __set_type(const std::string& val) {
    type = val;
  }

  bool operator == (const AddRfDeviceByType & rhs) const
  {
    if (!(rf_id == rhs.rf_id))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const AddRfDeviceByType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddRfDeviceByType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AddRfDeviceByType &a, AddRfDeviceByType &b);

typedef struct _AddRfDeviceByTypeResponse__isset {
  _AddRfDeviceByTypeResponse__isset() : status(false), device_id(false), rf_id(false), type(false) {}
  bool status;
  bool device_id;
  bool rf_id;
  bool type;
} _AddRfDeviceByTypeResponse__isset;

class AddRfDeviceByTypeResponse {
 public:

  static const char* ascii_fingerprint; // = "B7080D97FBE64A05254F705FB1FADA7F";
  static const uint8_t binary_fingerprint[16]; // = {0xB7,0x08,0x0D,0x97,0xFB,0xE6,0x4A,0x05,0x25,0x4F,0x70,0x5F,0xB1,0xFA,0xDA,0x7F};

  AddRfDeviceByTypeResponse() : status(0), device_id(), rf_id(), type() {
  }

  virtual ~AddRfDeviceByTypeResponse() throw() {}

  bool status;
  std::string device_id;
  std::string rf_id;
  std::string type;

  _AddRfDeviceByTypeResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_device_id(const std::string& val) {
    device_id = val;
  }

  void __set_rf_id(const std::string& val) {
    rf_id = val;
  }

  void __set_type(const std::string& val) {
    type = val;
  }

  bool operator == (const AddRfDeviceByTypeResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(device_id == rhs.device_id))
      return false;
    if (!(rf_id == rhs.rf_id))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const AddRfDeviceByTypeResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddRfDeviceByTypeResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AddRfDeviceByTypeResponse &a, AddRfDeviceByTypeResponse &b);

typedef struct _GetCcServerResponse__isset {
  _GetCcServerResponse__isset() : status(false), server(false), is_demo(false), notification_server(false) {}
  bool status;
  bool server;
  bool is_demo;
  bool notification_server;
} _GetCcServerResponse__isset;

class GetCcServerResponse {
 public:

  static const char* ascii_fingerprint; // = "81BFBF9F74BFE7F195133BDB23962E28";
  static const uint8_t binary_fingerprint[16]; // = {0x81,0xBF,0xBF,0x9F,0x74,0xBF,0xE7,0xF1,0x95,0x13,0x3B,0xDB,0x23,0x96,0x2E,0x28};

  GetCcServerResponse() : status(0), server(), is_demo(0), notification_server() {
  }

  virtual ~GetCcServerResponse() throw() {}

  bool status;
  std::string server;
  bool is_demo;
  std::string notification_server;

  _GetCcServerResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_server(const std::string& val) {
    server = val;
  }

  void __set_is_demo(const bool val) {
    is_demo = val;
  }

  void __set_notification_server(const std::string& val) {
    notification_server = val;
  }

  bool operator == (const GetCcServerResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(server == rhs.server))
      return false;
    if (!(is_demo == rhs.is_demo))
      return false;
    if (!(notification_server == rhs.notification_server))
      return false;
    return true;
  }
  bool operator != (const GetCcServerResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetCcServerResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetCcServerResponse &a, GetCcServerResponse &b);

typedef struct _GetVideoFiles__isset {
  _GetVideoFiles__isset() : camera_id(false), number_of_files(false), reference_file_name(false) {}
  bool camera_id;
  bool number_of_files;
  bool reference_file_name;
} _GetVideoFiles__isset;

class GetVideoFiles {
 public:

  static const char* ascii_fingerprint; // = "70563A0628F75DF9555F4D24690B1E26";
  static const uint8_t binary_fingerprint[16]; // = {0x70,0x56,0x3A,0x06,0x28,0xF7,0x5D,0xF9,0x55,0x5F,0x4D,0x24,0x69,0x0B,0x1E,0x26};

  GetVideoFiles() : camera_id(), number_of_files(0), reference_file_name() {
  }

  virtual ~GetVideoFiles() throw() {}

  std::string camera_id;
  int32_t number_of_files;
  std::string reference_file_name;

  _GetVideoFiles__isset __isset;

  void __set_camera_id(const std::string& val) {
    camera_id = val;
  }

  void __set_number_of_files(const int32_t val) {
    number_of_files = val;
  }

  void __set_reference_file_name(const std::string& val) {
    reference_file_name = val;
  }

  bool operator == (const GetVideoFiles & rhs) const
  {
    if (!(camera_id == rhs.camera_id))
      return false;
    if (!(number_of_files == rhs.number_of_files))
      return false;
    if (!(reference_file_name == rhs.reference_file_name))
      return false;
    return true;
  }
  bool operator != (const GetVideoFiles &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetVideoFiles & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetVideoFiles &a, GetVideoFiles &b);

typedef struct _GetCameraSnapshot__isset {
  _GetCameraSnapshot__isset() : device_id(false), context(false) {}
  bool device_id;
  bool context;
} _GetCameraSnapshot__isset;

class GetCameraSnapshot {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  GetCameraSnapshot() : device_id(), context() {
  }

  virtual ~GetCameraSnapshot() throw() {}

  std::string device_id;
  std::string context;

  _GetCameraSnapshot__isset __isset;

  void __set_device_id(const std::string& val) {
    device_id = val;
  }

  void __set_context(const std::string& val) {
    context = val;
  }

  bool operator == (const GetCameraSnapshot & rhs) const
  {
    if (!(device_id == rhs.device_id))
      return false;
    if (!(context == rhs.context))
      return false;
    return true;
  }
  bool operator != (const GetCameraSnapshot &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetCameraSnapshot & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetCameraSnapshot &a, GetCameraSnapshot &b);

typedef struct _GetCameraSnapshotResponse__isset {
  _GetCameraSnapshotResponse__isset() : status(false), device_id(false), snapshot_data(false), context(false), error(false) {}
  bool status;
  bool device_id;
  bool snapshot_data;
  bool context;
  bool error;
} _GetCameraSnapshotResponse__isset;

class GetCameraSnapshotResponse {
 public:

  static const char* ascii_fingerprint; // = "6202347A3A1C3F9F3771D3BC89B6DEED";
  static const uint8_t binary_fingerprint[16]; // = {0x62,0x02,0x34,0x7A,0x3A,0x1C,0x3F,0x9F,0x37,0x71,0xD3,0xBC,0x89,0xB6,0xDE,0xED};

  GetCameraSnapshotResponse() : status(0), device_id(), context(), error() {
  }

  virtual ~GetCameraSnapshotResponse() throw() {}

  bool status;
  std::string device_id;
  std::vector<int8_t>  snapshot_data;
  std::string context;
  std::string error;

  _GetCameraSnapshotResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_device_id(const std::string& val) {
    device_id = val;
  }

  void __set_snapshot_data(const std::vector<int8_t> & val) {
    snapshot_data = val;
  }

  void __set_context(const std::string& val) {
    context = val;
  }

  void __set_error(const std::string& val) {
    error = val;
  }

  bool operator == (const GetCameraSnapshotResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(device_id == rhs.device_id))
      return false;
    if (!(snapshot_data == rhs.snapshot_data))
      return false;
    if (!(context == rhs.context))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GetCameraSnapshotResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetCameraSnapshotResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetCameraSnapshotResponse &a, GetCameraSnapshotResponse &b);

typedef struct _ElementInfo__isset {
  _ElementInfo__isset() : element_id(false), element_type(false), probe_type(false), device_id(false), device_type(false), property_id(false) {}
  bool element_id;
  bool element_type;
  bool probe_type;
  bool device_id;
  bool device_type;
  bool property_id;
} _ElementInfo__isset;

class ElementInfo {
 public:

  static const char* ascii_fingerprint; // = "873CB9E5A4C10A7ECE7476FD192F55EE";
  static const uint8_t binary_fingerprint[16]; // = {0x87,0x3C,0xB9,0xE5,0xA4,0xC1,0x0A,0x7E,0xCE,0x74,0x76,0xFD,0x19,0x2F,0x55,0xEE};

  ElementInfo() : element_id(), element_type(), probe_type(), device_id(), device_type(), property_id() {
  }

  virtual ~ElementInfo() throw() {}

  std::string element_id;
  std::string element_type;
  std::string probe_type;
  std::string device_id;
  std::string device_type;
  std::string property_id;

  _ElementInfo__isset __isset;

  void __set_element_id(const std::string& val) {
    element_id = val;
  }

  void __set_element_type(const std::string& val) {
    element_type = val;
  }

  void __set_probe_type(const std::string& val) {
    probe_type = val;
  }

  void __set_device_id(const std::string& val) {
    device_id = val;
  }

  void __set_device_type(const std::string& val) {
    device_type = val;
  }

  void __set_property_id(const std::string& val) {
    property_id = val;
  }

  bool operator == (const ElementInfo & rhs) const
  {
    if (!(element_id == rhs.element_id))
      return false;
    if (!(element_type == rhs.element_type))
      return false;
    if (!(probe_type == rhs.probe_type))
      return false;
    if (!(device_id == rhs.device_id))
      return false;
    if (!(device_type == rhs.device_type))
      return false;
    if (!(property_id == rhs.property_id))
      return false;
    return true;
  }
  bool operator != (const ElementInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ElementInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ElementInfo &a, ElementInfo &b);

typedef struct _NodeTypesInfo__isset {
  _NodeTypesInfo__isset() : node_id(false), elements(false) {}
  bool node_id;
  bool elements;
} _NodeTypesInfo__isset;

class NodeTypesInfo {
 public:

  static const char* ascii_fingerprint; // = "EC974BDFCB6CF97E38A652831B73CBC8";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0x97,0x4B,0xDF,0xCB,0x6C,0xF9,0x7E,0x38,0xA6,0x52,0x83,0x1B,0x73,0xCB,0xC8};

  NodeTypesInfo() : node_id() {
  }

  virtual ~NodeTypesInfo() throw() {}

  std::string node_id;
  std::vector<ElementInfo>  elements;

  _NodeTypesInfo__isset __isset;

  void __set_node_id(const std::string& val) {
    node_id = val;
  }

  void __set_elements(const std::vector<ElementInfo> & val) {
    elements = val;
  }

  bool operator == (const NodeTypesInfo & rhs) const
  {
    if (!(node_id == rhs.node_id))
      return false;
    if (!(elements == rhs.elements))
      return false;
    return true;
  }
  bool operator != (const NodeTypesInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NodeTypesInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NodeTypesInfo &a, NodeTypesInfo &b);

typedef struct _GetNodesInfoResponse__isset {
  _GetNodesInfoResponse__isset() : devices(false) {}
  bool devices;
} _GetNodesInfoResponse__isset;

class GetNodesInfoResponse {
 public:

  static const char* ascii_fingerprint; // = "53A324210DEF202BDE824D838C37CF3C";
  static const uint8_t binary_fingerprint[16]; // = {0x53,0xA3,0x24,0x21,0x0D,0xEF,0x20,0x2B,0xDE,0x82,0x4D,0x83,0x8C,0x37,0xCF,0x3C};

  GetNodesInfoResponse() {
  }

  virtual ~GetNodesInfoResponse() throw() {}

  std::vector<NodeTypesInfo>  devices;

  _GetNodesInfoResponse__isset __isset;

  void __set_devices(const std::vector<NodeTypesInfo> & val) {
    devices = val;
  }

  bool operator == (const GetNodesInfoResponse & rhs) const
  {
    if (!(devices == rhs.devices))
      return false;
    return true;
  }
  bool operator != (const GetNodesInfoResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetNodesInfoResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetNodesInfoResponse &a, GetNodesInfoResponse &b);

typedef struct _SetRules__isset {
  _SetRules__isset() : rules(false) {}
  bool rules;
} _SetRules__isset;

class SetRules {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  SetRules() : rules() {
  }

  virtual ~SetRules() throw() {}

  std::string rules;

  _SetRules__isset __isset;

  void __set_rules(const std::string& val) {
    rules = val;
  }

  bool operator == (const SetRules & rhs) const
  {
    if (!(rules == rhs.rules))
      return false;
    return true;
  }
  bool operator != (const SetRules &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetRules & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetRules &a, SetRules &b);

typedef struct _SetRulesResponse__isset {
  _SetRulesResponse__isset() : status(false) {}
  bool status;
} _SetRulesResponse__isset;

class SetRulesResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  SetRulesResponse() : status(0) {
  }

  virtual ~SetRulesResponse() throw() {}

  bool status;

  _SetRulesResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  bool operator == (const SetRulesResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const SetRulesResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetRulesResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetRulesResponse &a, SetRulesResponse &b);

typedef struct _GetRulesResponse__isset {
  _GetRulesResponse__isset() : rules(false) {}
  bool rules;
} _GetRulesResponse__isset;

class GetRulesResponse {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  GetRulesResponse() : rules() {
  }

  virtual ~GetRulesResponse() throw() {}

  std::string rules;

  _GetRulesResponse__isset __isset;

  void __set_rules(const std::string& val) {
    rules = val;
  }

  bool operator == (const GetRulesResponse & rhs) const
  {
    if (!(rules == rhs.rules))
      return false;
    return true;
  }
  bool operator != (const GetRulesResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetRulesResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetRulesResponse &a, GetRulesResponse &b);

typedef struct _EmulatorDevice__isset {
  _EmulatorDevice__isset() : device_type(false), device_value(false), device_value_type(false), name(false), model(false) {}
  bool device_type;
  bool device_value;
  bool device_value_type;
  bool name;
  bool model;
} _EmulatorDevice__isset;

class EmulatorDevice {
 public:

  static const char* ascii_fingerprint; // = "BFF0E21728CB005F9AA5774A41542B8D";
  static const uint8_t binary_fingerprint[16]; // = {0xBF,0xF0,0xE2,0x17,0x28,0xCB,0x00,0x5F,0x9A,0xA5,0x77,0x4A,0x41,0x54,0x2B,0x8D};

  EmulatorDevice() : device_type(), device_value(), device_value_type(), name(), model() {
  }

  virtual ~EmulatorDevice() throw() {}

  std::string device_type;
  std::string device_value;
  std::string device_value_type;
  std::string name;
  std::string model;

  _EmulatorDevice__isset __isset;

  void __set_device_type(const std::string& val) {
    device_type = val;
  }

  void __set_device_value(const std::string& val) {
    device_value = val;
  }

  void __set_device_value_type(const std::string& val) {
    device_value_type = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_model(const std::string& val) {
    model = val;
  }

  bool operator == (const EmulatorDevice & rhs) const
  {
    if (!(device_type == rhs.device_type))
      return false;
    if (!(device_value == rhs.device_value))
      return false;
    if (!(device_value_type == rhs.device_value_type))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(model == rhs.model))
      return false;
    return true;
  }
  bool operator != (const EmulatorDevice &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EmulatorDevice & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EmulatorDevice &a, EmulatorDevice &b);

typedef struct _AddEmulatorDevice__isset {
  _AddEmulatorDevice__isset() : device(false) {}
  bool device;
} _AddEmulatorDevice__isset;

class AddEmulatorDevice {
 public:

  static const char* ascii_fingerprint; // = "E5BCD855F117A22CF6A72FE58D40D5C7";
  static const uint8_t binary_fingerprint[16]; // = {0xE5,0xBC,0xD8,0x55,0xF1,0x17,0xA2,0x2C,0xF6,0xA7,0x2F,0xE5,0x8D,0x40,0xD5,0xC7};

  AddEmulatorDevice() {
  }

  virtual ~AddEmulatorDevice() throw() {}

  EmulatorDevice device;

  _AddEmulatorDevice__isset __isset;

  void __set_device(const EmulatorDevice& val) {
    device = val;
  }

  bool operator == (const AddEmulatorDevice & rhs) const
  {
    if (!(device == rhs.device))
      return false;
    return true;
  }
  bool operator != (const AddEmulatorDevice &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddEmulatorDevice & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AddEmulatorDevice &a, AddEmulatorDevice &b);

typedef struct _AddEmulatorDeviceResponse__isset {
  _AddEmulatorDeviceResponse__isset() : status(false) {}
  bool status;
} _AddEmulatorDeviceResponse__isset;

class AddEmulatorDeviceResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  AddEmulatorDeviceResponse() : status(0) {
  }

  virtual ~AddEmulatorDeviceResponse() throw() {}

  bool status;

  _AddEmulatorDeviceResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  bool operator == (const AddEmulatorDeviceResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const AddEmulatorDeviceResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddEmulatorDeviceResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AddEmulatorDeviceResponse &a, AddEmulatorDeviceResponse &b);

typedef struct _ProjectSetting__isset {
  _ProjectSetting__isset() : name(false), value(false), module_name(false), type(false) {}
  bool name;
  bool value;
  bool module_name;
  bool type;
} _ProjectSetting__isset;

class ProjectSetting {
 public:

  static const char* ascii_fingerprint; // = "C93D890311F28844166CF6E571EB3AC2";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};

  ProjectSetting() : name(), value(), module_name(), type() {
  }

  virtual ~ProjectSetting() throw() {}

  std::string name;
  std::string value;
  std::string module_name;
  std::string type;

  _ProjectSetting__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  void __set_module_name(const std::string& val) {
    module_name = val;
  }

  void __set_type(const std::string& val) {
    type = val;
  }

  bool operator == (const ProjectSetting & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(module_name == rhs.module_name))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const ProjectSetting &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProjectSetting & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ProjectSetting &a, ProjectSetting &b);

typedef struct _SetProjectSetting__isset {
  _SetProjectSetting__isset() : settings(false) {}
  bool settings;
} _SetProjectSetting__isset;

class SetProjectSetting {
 public:

  static const char* ascii_fingerprint; // = "BF099D29486DD0C73BAA96297B0CA5D6";
  static const uint8_t binary_fingerprint[16]; // = {0xBF,0x09,0x9D,0x29,0x48,0x6D,0xD0,0xC7,0x3B,0xAA,0x96,0x29,0x7B,0x0C,0xA5,0xD6};

  SetProjectSetting() {
  }

  virtual ~SetProjectSetting() throw() {}

  std::vector<ProjectSetting>  settings;

  _SetProjectSetting__isset __isset;

  void __set_settings(const std::vector<ProjectSetting> & val) {
    settings = val;
  }

  bool operator == (const SetProjectSetting & rhs) const
  {
    if (!(settings == rhs.settings))
      return false;
    return true;
  }
  bool operator != (const SetProjectSetting &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetProjectSetting & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetProjectSetting &a, SetProjectSetting &b);

typedef struct _SetProjectSettingResponse__isset {
  _SetProjectSettingResponse__isset() : status(false), settings(false) {}
  bool status;
  bool settings;
} _SetProjectSettingResponse__isset;

class SetProjectSettingResponse {
 public:

  static const char* ascii_fingerprint; // = "7ECD85296FBA9085139A353336ED2AB8";
  static const uint8_t binary_fingerprint[16]; // = {0x7E,0xCD,0x85,0x29,0x6F,0xBA,0x90,0x85,0x13,0x9A,0x35,0x33,0x36,0xED,0x2A,0xB8};

  SetProjectSettingResponse() : status(0) {
  }

  virtual ~SetProjectSettingResponse() throw() {}

  bool status;
  std::vector<ProjectSetting>  settings;

  _SetProjectSettingResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_settings(const std::vector<ProjectSetting> & val) {
    settings = val;
  }

  bool operator == (const SetProjectSettingResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(settings == rhs.settings))
      return false;
    return true;
  }
  bool operator != (const SetProjectSettingResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetProjectSettingResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetProjectSettingResponse &a, SetProjectSettingResponse &b);

typedef struct _ListProjectSettingResponse__isset {
  _ListProjectSettingResponse__isset() : settings(false) {}
  bool settings;
} _ListProjectSettingResponse__isset;

class ListProjectSettingResponse {
 public:

  static const char* ascii_fingerprint; // = "BF099D29486DD0C73BAA96297B0CA5D6";
  static const uint8_t binary_fingerprint[16]; // = {0xBF,0x09,0x9D,0x29,0x48,0x6D,0xD0,0xC7,0x3B,0xAA,0x96,0x29,0x7B,0x0C,0xA5,0xD6};

  ListProjectSettingResponse() {
  }

  virtual ~ListProjectSettingResponse() throw() {}

  std::vector<ProjectSetting>  settings;

  _ListProjectSettingResponse__isset __isset;

  void __set_settings(const std::vector<ProjectSetting> & val) {
    settings = val;
  }

  bool operator == (const ListProjectSettingResponse & rhs) const
  {
    if (!(settings == rhs.settings))
      return false;
    return true;
  }
  bool operator != (const ListProjectSettingResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ListProjectSettingResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ListProjectSettingResponse &a, ListProjectSettingResponse &b);

typedef struct _WifiDevice__isset {
  _WifiDevice__isset() : wifi_device_id(false), wifi_device_key(false), device_type(false), device_name(false), device_model(false) {}
  bool wifi_device_id;
  bool wifi_device_key;
  bool device_type;
  bool device_name;
  bool device_model;
} _WifiDevice__isset;

class WifiDevice {
 public:

  static const char* ascii_fingerprint; // = "BFF0E21728CB005F9AA5774A41542B8D";
  static const uint8_t binary_fingerprint[16]; // = {0xBF,0xF0,0xE2,0x17,0x28,0xCB,0x00,0x5F,0x9A,0xA5,0x77,0x4A,0x41,0x54,0x2B,0x8D};

  WifiDevice() : wifi_device_id(), wifi_device_key(), device_type(), device_name(), device_model() {
  }

  virtual ~WifiDevice() throw() {}

  std::string wifi_device_id;
  std::string wifi_device_key;
  std::string device_type;
  std::string device_name;
  std::string device_model;

  _WifiDevice__isset __isset;

  void __set_wifi_device_id(const std::string& val) {
    wifi_device_id = val;
  }

  void __set_wifi_device_key(const std::string& val) {
    wifi_device_key = val;
  }

  void __set_device_type(const std::string& val) {
    device_type = val;
  }

  void __set_device_name(const std::string& val) {
    device_name = val;
  }

  void __set_device_model(const std::string& val) {
    device_model = val;
  }

  bool operator == (const WifiDevice & rhs) const
  {
    if (!(wifi_device_id == rhs.wifi_device_id))
      return false;
    if (!(wifi_device_key == rhs.wifi_device_key))
      return false;
    if (!(device_type == rhs.device_type))
      return false;
    if (!(device_name == rhs.device_name))
      return false;
    if (!(device_model == rhs.device_model))
      return false;
    return true;
  }
  bool operator != (const WifiDevice &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WifiDevice & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(WifiDevice &a, WifiDevice &b);

typedef struct _AddWifiDevice__isset {
  _AddWifiDevice__isset() : device(false) {}
  bool device;
} _AddWifiDevice__isset;

class AddWifiDevice {
 public:

  static const char* ascii_fingerprint; // = "E5BCD855F117A22CF6A72FE58D40D5C7";
  static const uint8_t binary_fingerprint[16]; // = {0xE5,0xBC,0xD8,0x55,0xF1,0x17,0xA2,0x2C,0xF6,0xA7,0x2F,0xE5,0x8D,0x40,0xD5,0xC7};

  AddWifiDevice() {
  }

  virtual ~AddWifiDevice() throw() {}

  WifiDevice device;

  _AddWifiDevice__isset __isset;

  void __set_device(const WifiDevice& val) {
    device = val;
  }

  bool operator == (const AddWifiDevice & rhs) const
  {
    if (!(device == rhs.device))
      return false;
    return true;
  }
  bool operator != (const AddWifiDevice &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddWifiDevice & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AddWifiDevice &a, AddWifiDevice &b);

typedef struct _AddWifiDeviceResponse__isset {
  _AddWifiDeviceResponse__isset() : status(false), device_id(false), device(false) {}
  bool status;
  bool device_id;
  bool device;
} _AddWifiDeviceResponse__isset;

class AddWifiDeviceResponse {
 public:

  static const char* ascii_fingerprint; // = "7DC1A548D9B7B1FA1ECEE461F88A2033";
  static const uint8_t binary_fingerprint[16]; // = {0x7D,0xC1,0xA5,0x48,0xD9,0xB7,0xB1,0xFA,0x1E,0xCE,0xE4,0x61,0xF8,0x8A,0x20,0x33};

  AddWifiDeviceResponse() : status(0), device_id() {
  }

  virtual ~AddWifiDeviceResponse() throw() {}

  bool status;
  std::string device_id;
  WifiDevice device;

  _AddWifiDeviceResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_device_id(const std::string& val) {
    device_id = val;
  }

  void __set_device(const WifiDevice& val) {
    device = val;
  }

  bool operator == (const AddWifiDeviceResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(device_id == rhs.device_id))
      return false;
    if (!(device == rhs.device))
      return false;
    return true;
  }
  bool operator != (const AddWifiDeviceResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddWifiDeviceResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AddWifiDeviceResponse &a, AddWifiDeviceResponse &b);

}}} // namespace

#endif
