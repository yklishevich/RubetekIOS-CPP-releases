/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef upnp_TYPES_H
#define upnp_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace rubetek { namespace tag { namespace upnp {

struct COMMAND {
  enum type {
    EXTERNAL_PORT_UPDATED = 1100,
    GET_EXTERNAL_PORT = 1101
  };
};

extern const std::map<int, const char*> _COMMAND_VALUES_TO_NAMES;

typedef struct _ExternalPortInfo__isset {
  _ExternalPortInfo__isset() : external_port(false), iface_name(false) {}
  bool external_port;
  bool iface_name;
} _ExternalPortInfo__isset;

class ExternalPortInfo {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  ExternalPortInfo() : external_port(0), iface_name() {
  }

  virtual ~ExternalPortInfo() throw() {}

  int32_t external_port;
  std::string iface_name;

  _ExternalPortInfo__isset __isset;

  void __set_external_port(const int32_t val) {
    external_port = val;
  }

  void __set_iface_name(const std::string& val) {
    iface_name = val;
  }

  bool operator == (const ExternalPortInfo & rhs) const
  {
    if (!(external_port == rhs.external_port))
      return false;
    if (!(iface_name == rhs.iface_name))
      return false;
    return true;
  }
  bool operator != (const ExternalPortInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExternalPortInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ExternalPortInfo &a, ExternalPortInfo &b);

typedef struct _ActionCompleteHelper__isset {
  _ActionCompleteHelper__isset() : code(false), error(false), result(false) {}
  bool code;
  bool error;
  bool result;
} _ActionCompleteHelper__isset;

class ActionCompleteHelper {
 public:

  static const char* ascii_fingerprint; // = "3368C2F81F2FEF71F11EDACDB2A3ECEF";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x68,0xC2,0xF8,0x1F,0x2F,0xEF,0x71,0xF1,0x1E,0xDA,0xCD,0xB2,0xA3,0xEC,0xEF};

  ActionCompleteHelper() : code(0), error(), result() {
  }

  virtual ~ActionCompleteHelper() throw() {}

  int32_t code;
  std::string error;
  std::string result;

  _ActionCompleteHelper__isset __isset;

  void __set_code(const int32_t val) {
    code = val;
  }

  void __set_error(const std::string& val) {
    error = val;
  }

  void __set_result(const std::string& val) {
    result = val;
  }

  bool operator == (const ActionCompleteHelper & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(error == rhs.error))
      return false;
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const ActionCompleteHelper &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ActionCompleteHelper & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ActionCompleteHelper &a, ActionCompleteHelper &b);

}}} // namespace

#endif
