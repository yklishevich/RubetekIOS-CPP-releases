/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef o7_TYPES_H
#define o7_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace rubetek { namespace tag { namespace o7 {

struct COMMAND {
  enum type {
    SET_PLATFORM_INFO = 1500,
    SET_PLATFORM_INFO_RESPONSE = 1501,
    GET_UUID = 1502,
    GET_UUID_RESPONSE = 1503
  };
};

extern const std::map<int, const char*> _COMMAND_VALUES_TO_NAMES;

typedef struct _SetPlatformInfo__isset {
  _SetPlatformInfo__isset() : address(false) {}
  bool address;
} _SetPlatformInfo__isset;

class SetPlatformInfo {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  SetPlatformInfo() : address() {
  }

  virtual ~SetPlatformInfo() throw() {}

  std::string address;

  _SetPlatformInfo__isset __isset;

  void __set_address(const std::string& val) {
    address = val;
  }

  bool operator == (const SetPlatformInfo & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    return true;
  }
  bool operator != (const SetPlatformInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetPlatformInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetPlatformInfo &a, SetPlatformInfo &b);

typedef struct _SetPlatformInfoResponse__isset {
  _SetPlatformInfoResponse__isset() : status(false) {}
  bool status;
} _SetPlatformInfoResponse__isset;

class SetPlatformInfoResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  SetPlatformInfoResponse() : status(0) {
  }

  virtual ~SetPlatformInfoResponse() throw() {}

  bool status;

  _SetPlatformInfoResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  bool operator == (const SetPlatformInfoResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const SetPlatformInfoResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetPlatformInfoResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetPlatformInfoResponse &a, SetPlatformInfoResponse &b);

typedef struct _GetUuidResponse__isset {
  _GetUuidResponse__isset() : uuid(false) {}
  bool uuid;
} _GetUuidResponse__isset;

class GetUuidResponse {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  GetUuidResponse() : uuid() {
  }

  virtual ~GetUuidResponse() throw() {}

  std::string uuid;

  _GetUuidResponse__isset __isset;

  void __set_uuid(const std::string& val) {
    uuid = val;
  }

  bool operator == (const GetUuidResponse & rhs) const
  {
    if (!(uuid == rhs.uuid))
      return false;
    return true;
  }
  bool operator != (const GetUuidResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetUuidResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetUuidResponse &a, GetUuidResponse &b);

}}} // namespace

#endif
