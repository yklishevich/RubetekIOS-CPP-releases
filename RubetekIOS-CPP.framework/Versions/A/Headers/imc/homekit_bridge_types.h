/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef homekit_bridge_TYPES_H
#define homekit_bridge_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace rubetek { namespace tag { namespace homekit_bridge {

struct COMMAND {
  enum type {
    RESET_HAP = 1600,
    RESET_HAP_RESPONSE = 1601,
    GET_HAP_STATUS = 1602,
    GET_HAP_STATUS_RESPONSE = 1603,
    MANAGE_HAP_STATE = 1604,
    MANAGE_HAP_STATE_RESPONSE = 1605
  };
};

extern const std::map<int, const char*> _COMMAND_VALUES_TO_NAMES;

typedef struct _ResetHapResponse__isset {
  _ResetHapResponse__isset() : status(false) {}
  bool status;
} _ResetHapResponse__isset;

class ResetHapResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  ResetHapResponse() : status(0) {
  }

  virtual ~ResetHapResponse() throw() {}

  bool status;

  _ResetHapResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  bool operator == (const ResetHapResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const ResetHapResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResetHapResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ResetHapResponse &a, ResetHapResponse &b);

typedef struct _GetHapStatusResponse__isset {
  _GetHapStatusResponse__isset() : enabled(false) {}
  bool enabled;
} _GetHapStatusResponse__isset;

class GetHapStatusResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  GetHapStatusResponse() : enabled(0) {
  }

  virtual ~GetHapStatusResponse() throw() {}

  bool enabled;

  _GetHapStatusResponse__isset __isset;

  void __set_enabled(const bool val) {
    enabled = val;
  }

  bool operator == (const GetHapStatusResponse & rhs) const
  {
    if (!(enabled == rhs.enabled))
      return false;
    return true;
  }
  bool operator != (const GetHapStatusResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetHapStatusResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetHapStatusResponse &a, GetHapStatusResponse &b);

typedef struct _ManageHapStatus__isset {
  _ManageHapStatus__isset() : state(false) {}
  bool state;
} _ManageHapStatus__isset;

class ManageHapStatus {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  ManageHapStatus() : state(0) {
  }

  virtual ~ManageHapStatus() throw() {}

  bool state;

  _ManageHapStatus__isset __isset;

  void __set_state(const bool val) {
    state = val;
  }

  bool operator == (const ManageHapStatus & rhs) const
  {
    if (!(state == rhs.state))
      return false;
    return true;
  }
  bool operator != (const ManageHapStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ManageHapStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ManageHapStatus &a, ManageHapStatus &b);

typedef struct _ManageHapStatusResponse__isset {
  _ManageHapStatusResponse__isset() : status(false) {}
  bool status;
} _ManageHapStatusResponse__isset;

class ManageHapStatusResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  ManageHapStatusResponse() : status(0) {
  }

  virtual ~ManageHapStatusResponse() throw() {}

  bool status;

  _ManageHapStatusResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  bool operator == (const ManageHapStatusResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const ManageHapStatusResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ManageHapStatusResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ManageHapStatusResponse &a, ManageHapStatusResponse &b);

}}} // namespace

#endif
