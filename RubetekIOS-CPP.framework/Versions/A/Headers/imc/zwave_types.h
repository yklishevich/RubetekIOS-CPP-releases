/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef zwave_TYPES_H
#define zwave_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace rubetek { namespace tag { namespace zwave {

struct COMMAND {
  enum type {
    DEFAULT_VALUE = 0,
    START_ADD_DEVICE = 100,
    START_REMOVE_DEVICE = 101,
    CANCEL_OPERATION = 102,
    REMOVE_FAILED_DEVICE = 103,
    GET_SETTINGS = 104,
    SET_SETTINGS = 105,
    SYNC_DEVICE = 106,
    START_LEARN_MODE = 107,
    START_LEARN_MODE_RESPONSE = 108,
    LEARN_MODE_COMPLETE = 109,
    REMOVE_FAILED_DEVICE_RESPONSE = 110,
    REPLACE_FAILED_DEVICE = 111,
    REPLACE_FAILED_DEVICE_RESPONSE = 112,
    LIST_NODE = 113,
    LIST_NODE_RESPONSE = 114,
    RESET_STICK = 115,
    RESET_STICK_RESPONSE = 116,
    NETWORK_UPDATE = 117,
    NETWROK_UPDATE_RESPONSE = 118,
    SET_SIS_ROLE = 119,
    SET_SIS_ROLE_RESPONSE = 120,
    DISABLE_SIS_ROLE = 121,
    DISABLE_SIS_ROLE_REPONSE = 122,
    GET_CONTROLLER_CAPABILITIES = 123,
    GET_CONTROLLER_CAPABILITIES_RESPONSE = 124,
    LIST_DEVICES = 125,
    LIST_DEVICES_RESPONSE = 126,
    GET_DEVICE_INFO = 127,
    GET_DEVICE_INFO_RESPONSE = 128,
    GET_HOME_ID = 129,
    GET_HOME_ID_RESPONSE = 130,
    GET_ROUTING_TABLE = 131,
    GET_ROUTING_TABLE_RESPONSE = 132,
    START_UPDATE_FIRMWARE = 133,
    START_UPDATE_FIRMWARE_RESPONSE = 134
  };
};

extern const std::map<int, const char*> _COMMAND_VALUES_TO_NAMES;

struct SyncOperation {
  enum type {
    soAdd = 0,
    soRemove = 1
  };
};

extern const std::map<int, const char*> _SyncOperation_VALUES_TO_NAMES;

struct NodeInclusionType {
  enum type {
    nitUnSecured = 0,
    nitSecured = 1,
    nitSecuredFailed = 2,
    nitUndefine = 3
  };
};

extern const std::map<int, const char*> _NodeInclusionType_VALUES_TO_NAMES;

struct ControllerCaps {
  enum type {
    CAN_INCLUDE_NODE = 0,
    CAN_EXCLUDE_NODE = 1,
    CAN_REMOVE_FAILED_NODE = 2,
    CAN_REPLACE_FAILED_NODE = 3,
    CAN_ENTER_LEARN_MODE = 4
  };
};

extern const std::map<int, const char*> _ControllerCaps_VALUES_TO_NAMES;

typedef struct _RemoveFailedDevice__isset {
  _RemoveFailedDevice__isset() : node_id(false) {}
  bool node_id;
} _RemoveFailedDevice__isset;

class RemoveFailedDevice {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  RemoveFailedDevice() : node_id(0) {
  }

  virtual ~RemoveFailedDevice() throw() {}

  int8_t node_id;

  _RemoveFailedDevice__isset __isset;

  void __set_node_id(const int8_t val) {
    node_id = val;
  }

  bool operator == (const RemoveFailedDevice & rhs) const
  {
    if (!(node_id == rhs.node_id))
      return false;
    return true;
  }
  bool operator != (const RemoveFailedDevice &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoveFailedDevice & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RemoveFailedDevice &a, RemoveFailedDevice &b);

typedef struct _GetSettings__isset {
  _GetSettings__isset() : node_id(false), locale(false) {}
  bool node_id;
  bool locale;
} _GetSettings__isset;

class GetSettings {
 public:

  static const char* ascii_fingerprint; // = "A6609EAC7CD2A291DFDA43A4A8D65B03";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x60,0x9E,0xAC,0x7C,0xD2,0xA2,0x91,0xDF,0xDA,0x43,0xA4,0xA8,0xD6,0x5B,0x03};

  GetSettings() : node_id(0), locale() {
  }

  virtual ~GetSettings() throw() {}

  int8_t node_id;
  std::string locale;

  _GetSettings__isset __isset;

  void __set_node_id(const int8_t val) {
    node_id = val;
  }

  void __set_locale(const std::string& val) {
    locale = val;
  }

  bool operator == (const GetSettings & rhs) const
  {
    if (!(node_id == rhs.node_id))
      return false;
    if (!(locale == rhs.locale))
      return false;
    return true;
  }
  bool operator != (const GetSettings &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetSettings & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetSettings &a, GetSettings &b);

typedef struct _SettingLite__isset {
  _SettingLite__isset() : id(false), value(false) {}
  bool id;
  bool value;
} _SettingLite__isset;

class SettingLite {
 public:

  static const char* ascii_fingerprint; // = "EFFD9F67D6D23CD85DFFD381B41885B5";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xFD,0x9F,0x67,0xD6,0xD2,0x3C,0xD8,0x5D,0xFF,0xD3,0x81,0xB4,0x18,0x85,0xB5};

  SettingLite() : id(0), value(0) {
  }

  virtual ~SettingLite() throw() {}

  int8_t id;
  int32_t value;

  _SettingLite__isset __isset;

  void __set_id(const int8_t val) {
    id = val;
  }

  void __set_value(const int32_t val) {
    value = val;
  }

  bool operator == (const SettingLite & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const SettingLite &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingLite & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SettingLite &a, SettingLite &b);

typedef struct _Timeout__isset {
  _Timeout__isset() : label(false), value(false) {}
  bool label;
  bool value;
} _Timeout__isset;

class Timeout {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  Timeout() : label(), value() {
  }

  virtual ~Timeout() throw() {}

  std::string label;
  std::string value;

  _Timeout__isset __isset;

  void __set_label(const std::string& val) {
    label = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  bool operator == (const Timeout & rhs) const
  {
    if (!(label == rhs.label))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const Timeout &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Timeout & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Timeout &a, Timeout &b);

typedef struct _SetDeviceSettings__isset {
  _SetDeviceSettings__isset() : node_id(false), modified_settings(false), timeout(false) {}
  bool node_id;
  bool modified_settings;
  bool timeout;
} _SetDeviceSettings__isset;

class SetDeviceSettings {
 public:

  static const char* ascii_fingerprint; // = "93B4DA58530751B1A818E8DE96A0AC9D";
  static const uint8_t binary_fingerprint[16]; // = {0x93,0xB4,0xDA,0x58,0x53,0x07,0x51,0xB1,0xA8,0x18,0xE8,0xDE,0x96,0xA0,0xAC,0x9D};

  SetDeviceSettings() : node_id(0) {
  }

  virtual ~SetDeviceSettings() throw() {}

  int8_t node_id;
  std::vector<SettingLite>  modified_settings;
  Timeout timeout;

  _SetDeviceSettings__isset __isset;

  void __set_node_id(const int8_t val) {
    node_id = val;
  }

  void __set_modified_settings(const std::vector<SettingLite> & val) {
    modified_settings = val;
  }

  void __set_timeout(const Timeout& val) {
    timeout = val;
    __isset.timeout = true;
  }

  bool operator == (const SetDeviceSettings & rhs) const
  {
    if (!(node_id == rhs.node_id))
      return false;
    if (!(modified_settings == rhs.modified_settings))
      return false;
    if (__isset.timeout != rhs.__isset.timeout)
      return false;
    else if (__isset.timeout && !(timeout == rhs.timeout))
      return false;
    return true;
  }
  bool operator != (const SetDeviceSettings &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetDeviceSettings & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetDeviceSettings &a, SetDeviceSettings &b);

typedef struct _Instance__isset {
  _Instance__isset() : instance_id(false), type(false), model(false) {}
  bool instance_id;
  bool type;
  bool model;
} _Instance__isset;

class Instance {
 public:

  static const char* ascii_fingerprint; // = "7B5C99516DF18A93AB165FE79EAE8896";
  static const uint8_t binary_fingerprint[16]; // = {0x7B,0x5C,0x99,0x51,0x6D,0xF1,0x8A,0x93,0xAB,0x16,0x5F,0xE7,0x9E,0xAE,0x88,0x96};

  Instance() : instance_id(0), type(0), model() {
  }

  virtual ~Instance() throw() {}

  int8_t instance_id;
  int8_t type;
  std::string model;

  _Instance__isset __isset;

  void __set_instance_id(const int8_t val) {
    instance_id = val;
  }

  void __set_type(const int8_t val) {
    type = val;
  }

  void __set_model(const std::string& val) {
    model = val;
  }

  bool operator == (const Instance & rhs) const
  {
    if (!(instance_id == rhs.instance_id))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(model == rhs.model))
      return false;
    return true;
  }
  bool operator != (const Instance &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Instance & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Instance &a, Instance &b);

typedef struct _SyncDevice__isset {
  _SyncDevice__isset() : node_id(false), instances(false), operation(false), module_name(false) {}
  bool node_id;
  bool instances;
  bool operation;
  bool module_name;
} _SyncDevice__isset;

class SyncDevice {
 public:

  static const char* ascii_fingerprint; // = "1544158ACB48004C9444018825E136AF";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0x44,0x15,0x8A,0xCB,0x48,0x00,0x4C,0x94,0x44,0x01,0x88,0x25,0xE1,0x36,0xAF};

  SyncDevice() : node_id(0), operation((SyncOperation::type)0), module_name() {
  }

  virtual ~SyncDevice() throw() {}

  int8_t node_id;
  std::vector<Instance>  instances;
  SyncOperation::type operation;
  std::string module_name;

  _SyncDevice__isset __isset;

  void __set_node_id(const int8_t val) {
    node_id = val;
  }

  void __set_instances(const std::vector<Instance> & val) {
    instances = val;
  }

  void __set_operation(const SyncOperation::type val) {
    operation = val;
  }

  void __set_module_name(const std::string& val) {
    module_name = val;
  }

  bool operator == (const SyncDevice & rhs) const
  {
    if (!(node_id == rhs.node_id))
      return false;
    if (!(instances == rhs.instances))
      return false;
    if (!(operation == rhs.operation))
      return false;
    if (!(module_name == rhs.module_name))
      return false;
    return true;
  }
  bool operator != (const SyncDevice &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncDevice & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SyncDevice &a, SyncDevice &b);

typedef struct _RemoveDeviceResponse__isset {
  _RemoveDeviceResponse__isset() : status(false), node_id(false), error(false) {}
  bool status;
  bool node_id;
  bool error;
} _RemoveDeviceResponse__isset;

class RemoveDeviceResponse {
 public:

  static const char* ascii_fingerprint; // = "E35734C17C54916030F3D4FF83727A14";
  static const uint8_t binary_fingerprint[16]; // = {0xE3,0x57,0x34,0xC1,0x7C,0x54,0x91,0x60,0x30,0xF3,0xD4,0xFF,0x83,0x72,0x7A,0x14};

  RemoveDeviceResponse() : status(0), node_id(0), error() {
  }

  virtual ~RemoveDeviceResponse() throw() {}

  bool status;
  int8_t node_id;
  std::string error;

  _RemoveDeviceResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_node_id(const int8_t val) {
    node_id = val;
  }

  void __set_error(const std::string& val) {
    error = val;
  }

  bool operator == (const RemoveDeviceResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(node_id == rhs.node_id))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const RemoveDeviceResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoveDeviceResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RemoveDeviceResponse &a, RemoveDeviceResponse &b);

typedef struct _StartLearnModeResponse__isset {
  _StartLearnModeResponse__isset() : status(false), error(false) {}
  bool status;
  bool error;
} _StartLearnModeResponse__isset;

class StartLearnModeResponse {
 public:

  static const char* ascii_fingerprint; // = "1767FFB0CB3D9275BC64B198AB3B8A8B";
  static const uint8_t binary_fingerprint[16]; // = {0x17,0x67,0xFF,0xB0,0xCB,0x3D,0x92,0x75,0xBC,0x64,0xB1,0x98,0xAB,0x3B,0x8A,0x8B};

  StartLearnModeResponse() : status(0), error() {
  }

  virtual ~StartLearnModeResponse() throw() {}

  bool status;
  std::string error;

  _StartLearnModeResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_error(const std::string& val) {
    error = val;
  }

  bool operator == (const StartLearnModeResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const StartLearnModeResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StartLearnModeResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StartLearnModeResponse &a, StartLearnModeResponse &b);

typedef struct _LearnModeComplete__isset {
  _LearnModeComplete__isset() : status(false), error(false) {}
  bool status;
  bool error;
} _LearnModeComplete__isset;

class LearnModeComplete {
 public:

  static const char* ascii_fingerprint; // = "1767FFB0CB3D9275BC64B198AB3B8A8B";
  static const uint8_t binary_fingerprint[16]; // = {0x17,0x67,0xFF,0xB0,0xCB,0x3D,0x92,0x75,0xBC,0x64,0xB1,0x98,0xAB,0x3B,0x8A,0x8B};

  LearnModeComplete() : status(0), error() {
  }

  virtual ~LearnModeComplete() throw() {}

  bool status;
  std::string error;

  _LearnModeComplete__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_error(const std::string& val) {
    error = val;
  }

  bool operator == (const LearnModeComplete & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const LearnModeComplete &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LearnModeComplete & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LearnModeComplete &a, LearnModeComplete &b);

typedef struct _ReplaceFailedDevice__isset {
  _ReplaceFailedDevice__isset() : node_id(false) {}
  bool node_id;
} _ReplaceFailedDevice__isset;

class ReplaceFailedDevice {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  ReplaceFailedDevice() : node_id(0) {
  }

  virtual ~ReplaceFailedDevice() throw() {}

  int8_t node_id;

  _ReplaceFailedDevice__isset __isset;

  void __set_node_id(const int8_t val) {
    node_id = val;
  }

  bool operator == (const ReplaceFailedDevice & rhs) const
  {
    if (!(node_id == rhs.node_id))
      return false;
    return true;
  }
  bool operator != (const ReplaceFailedDevice &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReplaceFailedDevice & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ReplaceFailedDevice &a, ReplaceFailedDevice &b);

typedef struct _ReplaceFailedDeviceResponse__isset {
  _ReplaceFailedDeviceResponse__isset() : node_id(false), status(false), error(false) {}
  bool node_id;
  bool status;
  bool error;
} _ReplaceFailedDeviceResponse__isset;

class ReplaceFailedDeviceResponse {
 public:

  static const char* ascii_fingerprint; // = "440532447DEC0D86EF699919032B71E0";
  static const uint8_t binary_fingerprint[16]; // = {0x44,0x05,0x32,0x44,0x7D,0xEC,0x0D,0x86,0xEF,0x69,0x99,0x19,0x03,0x2B,0x71,0xE0};

  ReplaceFailedDeviceResponse() : node_id(0), status(0), error() {
  }

  virtual ~ReplaceFailedDeviceResponse() throw() {}

  int8_t node_id;
  bool status;
  std::string error;

  _ReplaceFailedDeviceResponse__isset __isset;

  void __set_node_id(const int8_t val) {
    node_id = val;
  }

  void __set_status(const bool val) {
    status = val;
  }

  void __set_error(const std::string& val) {
    error = val;
  }

  bool operator == (const ReplaceFailedDeviceResponse & rhs) const
  {
    if (!(node_id == rhs.node_id))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const ReplaceFailedDeviceResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReplaceFailedDeviceResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ReplaceFailedDeviceResponse &a, ReplaceFailedDeviceResponse &b);

typedef struct _NodeInfo__isset {
  _NodeInfo__isset() : node_id(false), failed(false), role(false), type(false), version(false), has_firmware_update(false), inclusion_type(false) {}
  bool node_id;
  bool failed;
  bool role;
  bool type;
  bool version;
  bool has_firmware_update;
  bool inclusion_type;
} _NodeInfo__isset;

class NodeInfo {
 public:

  static const char* ascii_fingerprint; // = "11B99BD30CD86E0D5F013C92E706722B";
  static const uint8_t binary_fingerprint[16]; // = {0x11,0xB9,0x9B,0xD3,0x0C,0xD8,0x6E,0x0D,0x5F,0x01,0x3C,0x92,0xE7,0x06,0x72,0x2B};

  NodeInfo() : node_id(0), failed(0), role(), type(), version(), has_firmware_update(0), inclusion_type((NodeInclusionType::type)0) {
  }

  virtual ~NodeInfo() throw() {}

  int8_t node_id;
  bool failed;
  std::string role;
  std::string type;
  std::string version;
  bool has_firmware_update;
  NodeInclusionType::type inclusion_type;

  _NodeInfo__isset __isset;

  void __set_node_id(const int8_t val) {
    node_id = val;
  }

  void __set_failed(const bool val) {
    failed = val;
  }

  void __set_role(const std::string& val) {
    role = val;
  }

  void __set_type(const std::string& val) {
    type = val;
  }

  void __set_version(const std::string& val) {
    version = val;
  }

  void __set_has_firmware_update(const bool val) {
    has_firmware_update = val;
  }

  void __set_inclusion_type(const NodeInclusionType::type val) {
    inclusion_type = val;
  }

  bool operator == (const NodeInfo & rhs) const
  {
    if (!(node_id == rhs.node_id))
      return false;
    if (!(failed == rhs.failed))
      return false;
    if (!(role == rhs.role))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(has_firmware_update == rhs.has_firmware_update))
      return false;
    if (!(inclusion_type == rhs.inclusion_type))
      return false;
    return true;
  }
  bool operator != (const NodeInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NodeInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NodeInfo &a, NodeInfo &b);

typedef struct _ListNodeResponse__isset {
  _ListNodeResponse__isset() : nodes(false) {}
  bool nodes;
} _ListNodeResponse__isset;

class ListNodeResponse {
 public:

  static const char* ascii_fingerprint; // = "8AD07F61FB8F71A7F70C97EE89D4465E";
  static const uint8_t binary_fingerprint[16]; // = {0x8A,0xD0,0x7F,0x61,0xFB,0x8F,0x71,0xA7,0xF7,0x0C,0x97,0xEE,0x89,0xD4,0x46,0x5E};

  ListNodeResponse() {
  }

  virtual ~ListNodeResponse() throw() {}

  std::vector<NodeInfo>  nodes;

  _ListNodeResponse__isset __isset;

  void __set_nodes(const std::vector<NodeInfo> & val) {
    nodes = val;
  }

  bool operator == (const ListNodeResponse & rhs) const
  {
    if (!(nodes == rhs.nodes))
      return false;
    return true;
  }
  bool operator != (const ListNodeResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ListNodeResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ListNodeResponse &a, ListNodeResponse &b);

typedef struct _ResetStickResponse__isset {
  _ResetStickResponse__isset() : status(false) {}
  bool status;
} _ResetStickResponse__isset;

class ResetStickResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  ResetStickResponse() : status(0) {
  }

  virtual ~ResetStickResponse() throw() {}

  bool status;

  _ResetStickResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  bool operator == (const ResetStickResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const ResetStickResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResetStickResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ResetStickResponse &a, ResetStickResponse &b);

typedef struct _NetworkUpdateResponse__isset {
  _NetworkUpdateResponse__isset() : status(false) {}
  bool status;
} _NetworkUpdateResponse__isset;

class NetworkUpdateResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  NetworkUpdateResponse() : status(0) {
  }

  virtual ~NetworkUpdateResponse() throw() {}

  bool status;

  _NetworkUpdateResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  bool operator == (const NetworkUpdateResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const NetworkUpdateResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetworkUpdateResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NetworkUpdateResponse &a, NetworkUpdateResponse &b);

typedef struct _SetSisRoleResponse__isset {
  _SetSisRoleResponse__isset() : status(false) {}
  bool status;
} _SetSisRoleResponse__isset;

class SetSisRoleResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  SetSisRoleResponse() : status(0) {
  }

  virtual ~SetSisRoleResponse() throw() {}

  bool status;

  _SetSisRoleResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  bool operator == (const SetSisRoleResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const SetSisRoleResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetSisRoleResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetSisRoleResponse &a, SetSisRoleResponse &b);

typedef struct _DisableSisRoleResponse__isset {
  _DisableSisRoleResponse__isset() : status(false) {}
  bool status;
} _DisableSisRoleResponse__isset;

class DisableSisRoleResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  DisableSisRoleResponse() : status(0) {
  }

  virtual ~DisableSisRoleResponse() throw() {}

  bool status;

  _DisableSisRoleResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  bool operator == (const DisableSisRoleResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const DisableSisRoleResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DisableSisRoleResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DisableSisRoleResponse &a, DisableSisRoleResponse &b);

typedef struct _GetControllerCapabilitiesResponse__isset {
  _GetControllerCapabilitiesResponse__isset() : capabilities(false) {}
  bool capabilities;
} _GetControllerCapabilitiesResponse__isset;

class GetControllerCapabilitiesResponse {
 public:

  static const char* ascii_fingerprint; // = "87C2618D316F4CF12649B129BA0E78C6";
  static const uint8_t binary_fingerprint[16]; // = {0x87,0xC2,0x61,0x8D,0x31,0x6F,0x4C,0xF1,0x26,0x49,0xB1,0x29,0xBA,0x0E,0x78,0xC6};

  GetControllerCapabilitiesResponse() {
  }

  virtual ~GetControllerCapabilitiesResponse() throw() {}

  std::vector<ControllerCaps::type>  capabilities;

  _GetControllerCapabilitiesResponse__isset __isset;

  void __set_capabilities(const std::vector<ControllerCaps::type> & val) {
    capabilities = val;
  }

  bool operator == (const GetControllerCapabilitiesResponse & rhs) const
  {
    if (!(capabilities == rhs.capabilities))
      return false;
    return true;
  }
  bool operator != (const GetControllerCapabilitiesResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetControllerCapabilitiesResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetControllerCapabilitiesResponse &a, GetControllerCapabilitiesResponse &b);

typedef struct _DeviceElement__isset {
  _DeviceElement__isset() : element_id(false), element_type(false), probe_type(false), device_id(false), device_type(false), property_id(false) {}
  bool element_id;
  bool element_type;
  bool probe_type;
  bool device_id;
  bool device_type;
  bool property_id;
} _DeviceElement__isset;

class DeviceElement {
 public:

  static const char* ascii_fingerprint; // = "873CB9E5A4C10A7ECE7476FD192F55EE";
  static const uint8_t binary_fingerprint[16]; // = {0x87,0x3C,0xB9,0xE5,0xA4,0xC1,0x0A,0x7E,0xCE,0x74,0x76,0xFD,0x19,0x2F,0x55,0xEE};

  DeviceElement() : element_id(), element_type(), probe_type(), device_id(), device_type(), property_id() {
  }

  virtual ~DeviceElement() throw() {}

  std::string element_id;
  std::string element_type;
  std::string probe_type;
  std::string device_id;
  std::string device_type;
  std::string property_id;

  _DeviceElement__isset __isset;

  void __set_element_id(const std::string& val) {
    element_id = val;
  }

  void __set_element_type(const std::string& val) {
    element_type = val;
  }

  void __set_probe_type(const std::string& val) {
    probe_type = val;
  }

  void __set_device_id(const std::string& val) {
    device_id = val;
  }

  void __set_device_type(const std::string& val) {
    device_type = val;
  }

  void __set_property_id(const std::string& val) {
    property_id = val;
  }

  bool operator == (const DeviceElement & rhs) const
  {
    if (!(element_id == rhs.element_id))
      return false;
    if (!(element_type == rhs.element_type))
      return false;
    if (!(probe_type == rhs.probe_type))
      return false;
    if (!(device_id == rhs.device_id))
      return false;
    if (!(device_type == rhs.device_type))
      return false;
    if (!(property_id == rhs.property_id))
      return false;
    return true;
  }
  bool operator != (const DeviceElement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceElement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DeviceElement &a, DeviceElement &b);

typedef struct _DeviceInfo__isset {
  _DeviceInfo__isset() : id(false), manufacturerId(false), productTypeId(false), productId(false), productName(false), elements(false) {}
  bool id;
  bool manufacturerId;
  bool productTypeId;
  bool productId;
  bool productName;
  bool elements;
} _DeviceInfo__isset;

class DeviceInfo {
 public:

  static const char* ascii_fingerprint; // = "3DF7CC1867F07203A2E24D1E9D658346";
  static const uint8_t binary_fingerprint[16]; // = {0x3D,0xF7,0xCC,0x18,0x67,0xF0,0x72,0x03,0xA2,0xE2,0x4D,0x1E,0x9D,0x65,0x83,0x46};

  DeviceInfo() : id(), manufacturerId(), productTypeId(), productId(), productName() {
  }

  virtual ~DeviceInfo() throw() {}

  std::string id;
  std::string manufacturerId;
  std::string productTypeId;
  std::string productId;
  std::string productName;
  std::vector<DeviceElement>  elements;

  _DeviceInfo__isset __isset;

  void __set_id(const std::string& val) {
    id = val;
  }

  void __set_manufacturerId(const std::string& val) {
    manufacturerId = val;
  }

  void __set_productTypeId(const std::string& val) {
    productTypeId = val;
  }

  void __set_productId(const std::string& val) {
    productId = val;
  }

  void __set_productName(const std::string& val) {
    productName = val;
  }

  void __set_elements(const std::vector<DeviceElement> & val) {
    elements = val;
  }

  bool operator == (const DeviceInfo & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(manufacturerId == rhs.manufacturerId))
      return false;
    if (!(productTypeId == rhs.productTypeId))
      return false;
    if (!(productId == rhs.productId))
      return false;
    if (!(productName == rhs.productName))
      return false;
    if (!(elements == rhs.elements))
      return false;
    return true;
  }
  bool operator != (const DeviceInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DeviceInfo &a, DeviceInfo &b);

typedef struct _ListDeviceResponse__isset {
  _ListDeviceResponse__isset() : devices(false) {}
  bool devices;
} _ListDeviceResponse__isset;

class ListDeviceResponse {
 public:

  static const char* ascii_fingerprint; // = "A70B459CF1ABEBFC9599CD617E52FED8";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0x0B,0x45,0x9C,0xF1,0xAB,0xEB,0xFC,0x95,0x99,0xCD,0x61,0x7E,0x52,0xFE,0xD8};

  ListDeviceResponse() {
  }

  virtual ~ListDeviceResponse() throw() {}

  std::vector<DeviceInfo>  devices;

  _ListDeviceResponse__isset __isset;

  void __set_devices(const std::vector<DeviceInfo> & val) {
    devices = val;
  }

  bool operator == (const ListDeviceResponse & rhs) const
  {
    if (!(devices == rhs.devices))
      return false;
    return true;
  }
  bool operator != (const ListDeviceResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ListDeviceResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ListDeviceResponse &a, ListDeviceResponse &b);

typedef struct _GetDeviceInfo__isset {
  _GetDeviceInfo__isset() : node_id(false) {}
  bool node_id;
} _GetDeviceInfo__isset;

class GetDeviceInfo {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  GetDeviceInfo() : node_id() {
  }

  virtual ~GetDeviceInfo() throw() {}

  std::string node_id;

  _GetDeviceInfo__isset __isset;

  void __set_node_id(const std::string& val) {
    node_id = val;
  }

  bool operator == (const GetDeviceInfo & rhs) const
  {
    if (!(node_id == rhs.node_id))
      return false;
    return true;
  }
  bool operator != (const GetDeviceInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetDeviceInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetDeviceInfo &a, GetDeviceInfo &b);

typedef struct _GetHomeIdResponse__isset {
  _GetHomeIdResponse__isset() : home_id(false) {}
  bool home_id;
} _GetHomeIdResponse__isset;

class GetHomeIdResponse {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  GetHomeIdResponse() : home_id() {
  }

  virtual ~GetHomeIdResponse() throw() {}

  std::string home_id;

  _GetHomeIdResponse__isset __isset;

  void __set_home_id(const std::string& val) {
    home_id = val;
  }

  bool operator == (const GetHomeIdResponse & rhs) const
  {
    if (!(home_id == rhs.home_id))
      return false;
    return true;
  }
  bool operator != (const GetHomeIdResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetHomeIdResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetHomeIdResponse &a, GetHomeIdResponse &b);

typedef struct _NodeNeighbour__isset {
  _NodeNeighbour__isset() : node_id(false), neighbour(false) {}
  bool node_id;
  bool neighbour;
} _NodeNeighbour__isset;

class NodeNeighbour {
 public:

  static const char* ascii_fingerprint; // = "E9315D11ED9B3ADE4F14971EFD87F639";
  static const uint8_t binary_fingerprint[16]; // = {0xE9,0x31,0x5D,0x11,0xED,0x9B,0x3A,0xDE,0x4F,0x14,0x97,0x1E,0xFD,0x87,0xF6,0x39};

  NodeNeighbour() : node_id(0) {
  }

  virtual ~NodeNeighbour() throw() {}

  int8_t node_id;
  std::vector<int8_t>  neighbour;

  _NodeNeighbour__isset __isset;

  void __set_node_id(const int8_t val) {
    node_id = val;
  }

  void __set_neighbour(const std::vector<int8_t> & val) {
    neighbour = val;
  }

  bool operator == (const NodeNeighbour & rhs) const
  {
    if (!(node_id == rhs.node_id))
      return false;
    if (!(neighbour == rhs.neighbour))
      return false;
    return true;
  }
  bool operator != (const NodeNeighbour &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NodeNeighbour & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NodeNeighbour &a, NodeNeighbour &b);

typedef struct _GetRoutingTableResponse__isset {
  _GetRoutingTableResponse__isset() : nodes(false) {}
  bool nodes;
} _GetRoutingTableResponse__isset;

class GetRoutingTableResponse {
 public:

  static const char* ascii_fingerprint; // = "045C527ABC1A2FDB470E21CB193E5168";
  static const uint8_t binary_fingerprint[16]; // = {0x04,0x5C,0x52,0x7A,0xBC,0x1A,0x2F,0xDB,0x47,0x0E,0x21,0xCB,0x19,0x3E,0x51,0x68};

  GetRoutingTableResponse() {
  }

  virtual ~GetRoutingTableResponse() throw() {}

  std::vector<NodeNeighbour>  nodes;

  _GetRoutingTableResponse__isset __isset;

  void __set_nodes(const std::vector<NodeNeighbour> & val) {
    nodes = val;
  }

  bool operator == (const GetRoutingTableResponse & rhs) const
  {
    if (!(nodes == rhs.nodes))
      return false;
    return true;
  }
  bool operator != (const GetRoutingTableResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetRoutingTableResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetRoutingTableResponse &a, GetRoutingTableResponse &b);

typedef struct _StartUpdateFirmware__isset {
  _StartUpdateFirmware__isset() : node_id(false) {}
  bool node_id;
} _StartUpdateFirmware__isset;

class StartUpdateFirmware {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  StartUpdateFirmware() : node_id(0) {
  }

  virtual ~StartUpdateFirmware() throw() {}

  int8_t node_id;

  _StartUpdateFirmware__isset __isset;

  void __set_node_id(const int8_t val) {
    node_id = val;
  }

  bool operator == (const StartUpdateFirmware & rhs) const
  {
    if (!(node_id == rhs.node_id))
      return false;
    return true;
  }
  bool operator != (const StartUpdateFirmware &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StartUpdateFirmware & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StartUpdateFirmware &a, StartUpdateFirmware &b);

typedef struct _StartUpdateFirmwareResponse__isset {
  _StartUpdateFirmwareResponse__isset() : status(false), node_id(false), error(false) {}
  bool status;
  bool node_id;
  bool error;
} _StartUpdateFirmwareResponse__isset;

class StartUpdateFirmwareResponse {
 public:

  static const char* ascii_fingerprint; // = "E35734C17C54916030F3D4FF83727A14";
  static const uint8_t binary_fingerprint[16]; // = {0xE3,0x57,0x34,0xC1,0x7C,0x54,0x91,0x60,0x30,0xF3,0xD4,0xFF,0x83,0x72,0x7A,0x14};

  StartUpdateFirmwareResponse() : status(0), node_id(0), error() {
  }

  virtual ~StartUpdateFirmwareResponse() throw() {}

  bool status;
  int8_t node_id;
  std::string error;

  _StartUpdateFirmwareResponse__isset __isset;

  void __set_status(const bool val) {
    status = val;
  }

  void __set_node_id(const int8_t val) {
    node_id = val;
  }

  void __set_error(const std::string& val) {
    error = val;
  }

  bool operator == (const StartUpdateFirmwareResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(node_id == rhs.node_id))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const StartUpdateFirmwareResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StartUpdateFirmwareResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StartUpdateFirmwareResponse &a, StartUpdateFirmwareResponse &b);

}}} // namespace

#endif
